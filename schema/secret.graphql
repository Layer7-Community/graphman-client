extend type Query {
    "Retrieves all secrets"
    secrets : [Secret!]!
    "Retrieves all keys"
    keys : [Key!]!
    "Retrieves a secret by name"
    secretByName(name: String!) : Secret
    "Retrieves a key by name"
    keyByAlias(alias: String!) : Key
}

extend type Mutation {
    "Creates or updates one or more secrets"
    setSecrets(input: [SecretInput!]!) : SecretsPayload
    "Creates or updates one or more keys"
    setKeys(input: [KeyInput!]!) : KeysPayload
    "Deletes one or more existing secrets"
    deleteSecrets(names: [String!]!) : SecretsPayload
    "Deletes one or more existing keys"
    deleteKeys(aliases: [String!]!) : KeysPayload
}

"""
These secrets are used by gateway policies also for example by jdbc connection configurations
"""
type Secret {
    "The goid for the Secret"
    goid: ID!
    """
    Identify the password being stored. You may use letters, numbers, dashes, and underscores.
    Names that contain spaces or periods are valid, but the resulting stored password cannot be referenced via context variable.
    Names that contain @ or $ are valid, but the resulting stored password cannot be referenced via context variable.
    """
    name : String!
    "The configuration checksum"
    checksum : String!

    "Description of the password. This is optional"
    description : String
    """
    Base64 encrypted secret. The encryption is compatible with openssl secret encryption
    using cypher AES/CBC/PKCS5Padding. You can decrypt these values at command line
    using this command:
    > echo <secret> | openssl enc -d -aes-256-cbc -md sha256 -pass pass:<passphrase> -a
    """
    secret : String!
    "Password or PEM Private Key"
    secretType : SecretType!
    "Whether this secret can be referred to in policy via context variable ${secpass... "
    variableReferencable : Boolean!
}

enum SecretType {
    "Stored password for example used in the jdbc connection"
    PASSWORD
    "Secure pem key for example used in the route via ssh assertion"
    PEM_PRIVATE_KEY
}

"""
This is an entry in the gateway keystore. These entries combine a private
key and associated certificate and are used for example by listener ports
These represent the gateway's own certificates as opposed to the Certificate
type which represent a cert trusted by the gateway.
"""
type Key {
    "The internal entity unique identifier"
    goid: ID!
    "The gateway keystore identifier"
    keystoreId: ID!
    "The name assigned to the key"
    alias : String!
    "The configuration checksum"
    checksum : String!

    "The type of the private key"
    keyType : String!
    "The subjectDN"
    subjectDn : String!
    """
    Base64 encoded PKCS12 keystore containing the private key and cert chain for the key entry.
    The keystore is password-protected using the transaction encryption passphrase provided.
    """
    p12 : String
    "The certificate chain in PEM format"
    certChain : [String!]
}

input SecretInput {
    """
    Identify the password being stored. You may use letters, numbers, dashes, and underscores.
    Names that contain spaces or periods are valid, but the resulting stored password cannot be referenced via context variable.
    Names that contain @ or $ are valid, but the resulting stored password cannot be referenced via context variable.
    """
    name : String!
    "Password or PEM Private Key"
    secretType : SecretType!
    "The goid for the Secret"
    goid: ID
    "Ignored at entity creation time but declared here so you can embed checksums in graphman bundles"
    checksum : String
    "Whether this secret can be referred to in policy via context variable ${secpass... "
    variableReferencable : Boolean!
    """
    Base64 encrypted secret. The encryption is compatible with openssl secret encryption
    using cypher AES/CBC/PKCS5Padding. You can create this value at command line:
    > echo -n "<clear text secret>" | openssl enc -aes-256-cbc -md sha256 -pass pass:<password> -a
    """
    secret : String!
    "Description of the password. This is optional"
    description : String
}

input KeyInput {
    keystoreId: ID
    alias : String!
    """
    Base64 encoded PKCS12 keystore containing the private key and cert chain for the key entry.
    The keystore is password-protected using the transaction encryption passphrase provided.
    """
    p12 : String
    "Will try to match at creation time is specified"
    goid: ID
    "SubjectDn of the certificate associated with the key. (Note that, this field has no effect on the mutation)"
    subjectDn : String
    "Key type. (Note that, this field has no effect on the mutation)"
    keyType : String
    "The certificate chain in PEM format. (Note that, this field has no effect on the mutation)"
    certChain : [String!]
    "Ignored at entity creation time but declared here so you can embed checksums in graphman bundles"
    checksum : String
}

type SecretsPayload implements EntityMutationsPayload {
    status: [EntityMutationStatus!]!
    detailedStatus: [EntityMutationDetailedStatus!]!
    secrets : [Secret]!
}

type KeysPayload implements EntityMutationsPayload {
    status: [EntityMutationStatus!]!
    detailedStatus: [EntityMutationDetailedStatus!]!
    keys : [Key]!
}


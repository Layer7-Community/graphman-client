extend type Query {
    "Get xml schemas configured on this gateway"
    schemas : [Schema!]!
    "The schema given its system id"
    schemaBySystemId(systemId : String!) : Schema
    "The dtds configured on this gateway"
    dtds : [Dtd!]!
    "The dtd given its system id"
    dtdBySystemId(systemId : String!) : Dtd
    "Get internal schemas, for reference only"
    internalSchemas : [Schema!]!
    "Get internal dtds, for reference only"
    internalDtds : [Dtd!]!
}

extend type Mutation {
    "Create or Update multiple XML schemas"
    setSchemas(input: [SchemaInput!]!) : SchemasPayload
    "Delete multiple XML schemas"
    deleteSchemas(systemIds: [String!]!) : SchemasPayload

    "Create or Update multiple DTD resources"
    setDtds(input: [DtdInput!]!) : DtdsPayload
    "Delete multiple DTD resources"
    deleteDtds(systemIds: [String!]!) : DtdsPayload
}

"An XML Schema which can be referred to in policy, for example in the validate xml schema assertion"
type Schema {
    "Internal goid for this schema"
    goid : ID!
    "A reference to the schema. This id is what is referred to in policy and is often mirror of the target namespace"
    systemId : String!
    "The configuration checksum"
    checksum: String!

    "The target namespace in the xml schema"
    targetNs : String
    "An optional description for the schema"
    description : String
    "The content of XML schema"
    content : String!
}

"A Document Type Definition (DTD) which can be referred to in policy"
type Dtd {
    "Internal goid for this DTD"
    goid : ID!
    "A reference to the DTD. This id is what is referred to in policy and is often mirror of the target namespace"
    systemId : String!
    "The configuration checksum"
    checksum: String!

    "The public id for the DTD"
    publicId : String
    "An optional description"
    description : String
    "The content of DTD itself"
    content : String!
}

input SchemaInput {
    "The internal entity unique identifier"
    goid: ID
    "A reference to the schema. This id is what is referred to in policy and is often mirror of the target namespace"
    systemId : String!
    "The target namespace in the XML schema"
    targetNs : String
    "An optional description for the schema"
    description : String
    "The content of XML schema"
    content : String!
    "Ignored at creation time but can be used to compare bundle with gw state"
    checksum : String
}

input DtdInput {
    "The internal entity unique identifier"
    goid: ID
    "A reference to the dtd. This id is what is referred to in policy and is often mirror of the target namespace"
    systemId : String!
    "The public id for the dtd"
    publicId : String
    "An optional description"
    description : String
    "The actual dtd itself"
    content : String!
    "Ignored at creation time but can be used to compare bundle with gw state"
    checksum : String
}

type DtdsPayload implements EntityMutationsPayload {
    status: [EntityMutationStatus!]!
    detailedStatus: [EntityMutationDetailedStatus!]!
    dtds: [Dtd]!
}

type SchemasPayload implements EntityMutationsPayload {
    status: [EntityMutationStatus!]!
    detailedStatus: [EntityMutationDetailedStatus!]!
    schemas: [Schema]!
}

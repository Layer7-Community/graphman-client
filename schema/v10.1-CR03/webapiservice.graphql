extend type Query {
  "Get all webApi services"
  webApiServices : [WebApiService]!
  internalWebApiServices : [InternalWebApiService]!
  "Get webApi services by name"
  webApiServicesByName(name: String!) : [WebApiService!]!
  "Get webApi service by name. Returns none if more than one are found."
  webApiServiceByName(name: String!) : WebApiService
  "Get Internal webApi Service by name"
  internalWebApiServiceByName(name: String!) : InternalWebApiService
  "Get webApi services by resolutionPath"
  webApiServicesByResolutionPath(resolutionPath: String!) : [WebApiService !]!
  "Get webApi service by resolutionPath. Returns none if more than one are found."
  webApiServiceByResolutionPath(resolutionPath: String!) : WebApiService
  "Get Internal webApi Services by resolutionPath"
  internalWebApiServiceByResolutionPath(resolutionPath: String!) : InternalWebApiService
  "Get webApi services inside a folder"
  webApiServicesByFolderPath(folderPath: String!) : [WebApiService]!
  "Get Internal webApi services inside a folder"
  internalWebApiServicesByFolderPath(folderPath: String!) : [InternalWebApiService]!
  "Get webApi services by goid"
  webApiServiceByGoid(goid: ID!) : WebApiService
}

extend type Mutation {
  "Create or update web api services"
  setWebApiServices(input: [WebApiServiceInput!]!) : WebApiServicesPayload
  "Create or update Internal web api services"
  setInternalWebApiServices(input: [WebApiServiceInput!]!) : InternalWebApiServicesPayload
  "Delete existing web api services given their resolution paths"
  deleteWebApiServices(resolutionPaths: [String!]!) : WebApiServicesPayload
  "Delete existing Internal web api services given their resolution paths"
  deleteInternalWebApiServices(resolutionPaths: [String!]!) : InternalWebApiServicesPayload
}

"A Web API service published on the Layer7 Gateway"
type WebApiService implements PublishedService {
    "The goid for this service"
    goid : ID!
    "The name of the service"
    name: String!
    "The resolution path to the service"
    resolutionPath: String!
    "The configuration checksum"
    checksum: String!

    "Whether or not the published service is enabled"
    enabled: Boolean!
    "The folder path to the service"
    folderPath: String!
    "Which http methods are allowed"
    methodsAllowed: [HttpMethod!]!
    tracingEnabled: Boolean!
    wssProcessingEnabled: Boolean!
    properties: [EntityProperty!]

    "The policy and dependencies"
    policy: Policy!
}

"A Internal Web API service published on the Layer7 Gateway"
type InternalWebApiService implements PublishedService {
    "The goid for this service"
    goid : ID!
    "The name of the service"
    name: String!
    "The resolution path to the service"
    resolutionPath: String!
    "The configuration checksum"
    checksum: String!

    "Whether or not the published service is enabled"
    enabled: Boolean!
    "The folder path to the service"
    folderPath: String!
    "Which http methods are allowed"
    methodsAllowed: [HttpMethod!]!
    tracingEnabled: Boolean!
    wssProcessingEnabled: Boolean!
    properties: [EntityProperty!]

    "The policy and dependencies"
    policy: Policy!
}

input WebApiServiceInput {
  "The internal entity unique identifier"
  goid: ID
  "The folder path where to create this service.  If the path does not exist, it will be created"
  folderPath: NonEmptyString!
  "The name of the service"
  name: String!
  "The resolution path of the service"
  resolutionPath: String!
  "The policy"
  policy: PolicyInput!
  "Whether the service is enabled (optional, default to true)"
  enabled: Boolean = true
  "The http methods allowed for this service"
  methodsAllowed: [HttpMethod!]!
  tracingEnabled: Boolean = false
  wssProcessingEnabled: Boolean = false
  properties: [EntityPropertyInput!]
  "Ignored at creation time but can be used to compare bundle with gw state"
  checksum : String
}

type WebApiServicesPayload implements EntityMutationsPayload {
  status: [EntityMutationStatus!]!
  detailedStatus: [EntityMutationDetailedStatus!]!
  webApiServices: [WebApiService]!
}

type InternalWebApiServicesPayload implements EntityMutationsPayload {
    status: [EntityMutationStatus!]!
    detailedStatus: [EntityMutationDetailedStatus!]!
    internalWebApiServices: [InternalWebApiService]!
}

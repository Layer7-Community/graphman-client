extend type Query {
    "Get all siteminder configurations"
    smConfigs : [SMConfig!]!
    "Get the siteminder configuration by name"
    smConfigByName(name : String!) : SMConfig
}

extend type Mutation {
    """
    Create or update existing siteminder configurations.
    Match is carried by name. If match is found, it will be updated. Otherwise, it will be created
    """
    setSMConfigs(input: [SMConfigInput!]!): SMConfigsPayload!

    "Delete existing siteminder configurations. Match is carried by name"
    deleteSMConfigs(names: [String!]!): SMConfigsPayload!
}

enum SMCryptoMode {
    COMPAT
    MIGRATE
    FIPS
}

type SMConfig {
    "The goid for the CA SSO connection"
    goid : ID!
    "Name of the CA SSO configuration"
    name : String!
    "The configuration checksum"
    checksum: String!

    "Indicates whether the specified configuration is currently enabled or disabled"
    enabled : Boolean!
    "Name of the host registered with the CA SSO Policy Server"
    agentHost: String!
    "The IP address of the CA SSO agent. This field is required if the Check IP check box is selected"
    agentIP: String!
    "CA SSO Policy Server host configuration used by the agent"
    agentHostConfig: String!
    "CA SSO shared secret used by the agent to establish communication with the Policy Server"
    agentSecret: String!
    "Choose the FIPS mode supported by the CA SSO Policy Server. The available values are: COMPAT(default)/MIGRATE/ONLY"
    cryptoMode: SMCryptoMode!
    "The CA SSO Policy Server compare the client IP against the address stored in the SSO Token"
    ipCheckEnabled: Boolean!
    "Whether to update the SSO Token after successful authentication/authorization"
    updateSSOToken: Boolean!
    "The percentage of servers within a cluster that must be available for Policy Server requests"
    clusterFailoverThreshold: PositiveInt!
    nonClusterFailover: Boolean!
    "User name of the CA SSO administrator"
    username: String!
    "The secure password reference"
    securePasswordName: String!
    "The Siteminder configuration properties"
    properties: [EntityProperty!]
}

input SMConfigInput {
    "The goid for the CA SSO connection"
    goid: ID
    "Name of the CA SSO configuration"
    name: String!
    "Indicates whether the specified configuration is currently enabled or disabled"
    enabled: Boolean!
    "Name of the host registered with the CA SSO Policy Server"
    agentHost: String!
    "The IP address of the CA SSO agent. This field is required if the Check IP check box is selected"
    agentIP: String!
    "CA SSO Policy Server host configuration used by the agent"
    agentHostConfig: String!
    "CA SSO shared secret used by the agent to establish communication with the Policy Server"
    agentSecret: String!
    "Choose the FIPS mode supported by the CA SSO Policy Server. The available values are: COMPAT(default)/MIGRATE/ONLY"
    cryptoMode: SMCryptoMode!
    "The CA SSO Policy Server compare the client IP against the address stored in the SSO Token"
    ipCheckEnabled: Boolean!
    "Whether to update the SSO Token after successful authentication/authorization"
    updateSSOToken: Boolean!
    "The percentage of servers within a cluster that must be available for Policy Server requests"
    clusterFailoverThreshold: PositiveInt!
    nonClusterFailover: Boolean!
    "User name of the CA SSO administrator"
    username: String!
    "The secure password reference"
    securePasswordName: String!
    "The Siteminder configuration properties"
    properties: [EntityPropertyInput!]
    "The configuration checksum"
    checksum : String
}

type SMConfigsPayload implements EntityMutationsPayload {
    status: [EntityMutationStatus!]!
    detailedStatus: [EntityMutationDetailedStatus!]!
    smConfigs: [SMConfig]!
}

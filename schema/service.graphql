
extend type Query {
    "Get all services"
    services : [L7Service!]!

    "Get services inside a folder"
    servicesByFolderPath(folderPath: String!) : [L7Service!]!

    "Get specified type services"
    servicesByType(serviceType: L7ServiceType!) : [L7Service!]!

    "Get specified type services inside a folder"
    servicesByFolderPathAndType(folderPath: String!, serviceType: L7ServiceType!) : [L7Service!]!

    "Get services by name"
    servicesByName(name: String!) : [L7Service!]!

    "Get services by resolutionPath"
    servicesByResolutionPath(resolutionPath: String!) : [L7Service !]!

    "Get service by name. Returns none if more than one are found."
    serviceByName(name: String!) : L7Service

    "Get service by resolutionPath. Returns none if more than one are found."
    serviceByResolutionPath(resolutionPath: String!) : L7Service

    "Get service by resolvers"
    serviceByResolvers(resolvers: ServiceResolversInput!) : L7Service

    "Get service and it's revision by resolvers and revision ordinal"
    serviceByResolversAndRevision(resolvers: ServiceResolversInput!, revision: Long!) : L7Service
}

extend type Mutation {
    "Create or update services"
    setServices(input: [L7ServiceInput!]!) : L7ServicesPayload!

    "Delete services"
    deleteServices(resolvers: [ServiceResolversInput!]!) : L7ServicesPayload!

    "Update existing revision (comment and/or active) for the services"
    updateServicesRevision(input: [L7ServicePartialInput!]!, activate: Boolean!, comment: String) : L7ServicesPayload!
}

"""
A Layer7 service.
> @l7-entity service|services
> @l7-identity-fields resolutionPath,resolvers,serviceType
> @l7-summary-fields goid,guid,name,resolutionPath,resolvers,serviceType,checksum
> @l7-excluded-fields policyRevision,policyRevisions
"""
type L7Service implements PublishedService {
    "The goid for this service"
    goid : ID!
    "The guid for this service"
    guid : ID!
    "The name of the service"
    name: String!
    "The resolution path to the service"
    resolutionPath: String!
    "The service resolvers. They can be used to identify services."
    resolvers: ServiceResolvers
    "The type of service"
    serviceType: L7ServiceType!
    "The configuration checksum"
    checksum: String!

    "Whether or not the published service is enabled"
    enabled: Boolean!
    "The folder path to the service"
    folderPath: String!
    "Which SOAP version"
    soapVersion: SoapVersion
    "Which http methods are allowed"
    methodsAllowed: [HttpMethod!]!
    tracingEnabled: Boolean!
    wssProcessingEnabled: Boolean!
    "Allow requests intended for operations not supported by the WSDL"
    laxResolution: Boolean
    properties: [EntityProperty!]

    "The WSDL of the soap service"
    wsdl: String
    "The actual service and dependencies"
    policy: Policy!
    "The service policy revision. It can be either the active revision or the specific one when queried explicitly."
    policyRevision: PolicyRevision
    policyRevisions: [PolicyRevision!]!
}

type ServiceResolvers {
    "The soap actions referred to in the wsdl"
    soapActions: [String!]
    "Base uri from the wsdl of the service. This is used for service resolution"
    baseUri: String
    "The resolution path to the service. It will be defaulted to /ssg/soap for SOAP services when not specified"
    resolutionPath: String
}

input ServiceResolversInput {
    "The soap action referred to in the wsdl"
    soapAction: String
    "The soap actions referred to in the wsdl"
    soapActions: [String!]
    "Base uri from the wsdl of the service. This is used for service resolution"
    baseUri: String
    "The resolution path to the service."
    resolutionPath: String
}

type L7ServicesPayload implements EntityMutationsPayload {
    status: [EntityMutationStatus!]!
    detailedStatus: [EntityMutationDetailedStatus!]!
    services: [L7Service]!
}

enum L7ServiceType {
    WEB_API
    SOAP
    INTERNAL_WEB_API
    INTERNAL_SOAP
}

enum SoapVersion {
    SOAP_1_1
    SOAP_1_2
    UNKNOWN
}

input L7ServiceInput {
    "The goid for this service"
    goid : ID
    "The guid for this service"
    guid : ID
    "The name of the service"
    name: String!
    "The resolution path to the service"
    resolutionPath: String!
    "The service resolvers. They can be used to identify services."
    resolvers: ServiceResolversInput
    "The type of service"
    serviceType: L7ServiceType!
    "The configuration checksum"
    checksum: String

    "Whether or not the published service is enabled"
    enabled: Boolean = true
    "The folder path where to create this service.  If the path does not exist, it will be created"
    folderPath: String!
    "Which SOAP version"
    soapVersion: SoapVersion = UNKNOWN
    "Which http methods are allowed"
    methodsAllowed: [HttpMethod!]!
    tracingEnabled: Boolean = false
    wssProcessingEnabled: Boolean = false
    "Allow requests intended for operations not supported by the WSDL"
    laxResolution: Boolean = false
    properties: [EntityPropertyInput!]

    "The WSDL of the soap service"
    wsdl: String
    "The service policy"
    policy: PolicyInput!
    "This will be ignored during the mutation"
    policyRevision: PolicyRevisionInput
    "This will be ignored during the mutation"
    policyRevisions: [PolicyRevisionInput!]
}

input L7ServicePartialInput {
    "The goid for this service"
    goid : ID
    "The guid for this service"
    guid : ID
    "The name of the service"
    name: String
    "The resolution path to the service"
    resolutionPath: String!
    "The service resolvers. They can be used to identify services."
    resolvers: ServiceResolversInput
    "The type of service"
    serviceType: L7ServiceType!
    "The configuration checksum"
    checksum: String

    "Whether or not the published service is enabled"
    enabled: Boolean
    "The folder path where to create this service.  If the path does not exist, it will be created"
    folderPath: String
    "Which SOAP version"
    soapVersion: SoapVersion
    "Which http methods are allowed"
    methodsAllowed: [HttpMethod!]
    tracingEnabled: Boolean
    wssProcessingEnabled: Boolean
    "Allow requests intended for operations not supported by the WSDL"
    laxResolution: Boolean
    properties: [EntityPropertyInput!]

    "The WSDL of the soap service"
    wsdl: String
    "The service policy"
    policy: PolicyInput
    "This will be ignored during the mutation"
    policyRevision: PolicyRevisionInput
    "This will be ignored during the mutation"
    policyRevisions: [PolicyRevisionInput!]
}

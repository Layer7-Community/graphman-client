extend type Query {
  "Get all email listeners"
  emailListeners : [EmailListener!]!
  "Get the email listener by name"
  emailListenerByName(name : String!) : EmailListener
}

extend type Mutation {
  """
  Create or update existing email listeners.
  Match is carried by name. If match is found, it will be updated. Otherwise, it will be created.
  """
  setEmailListeners(input: [EmailListenerInput!]!): EmailListenersPayload!

  "Delete existing email listeners. Match is carried by name."
  deleteEmailListeners(names: [String!]!): EmailListenersPayload!
}

enum EmailServerType {
    IMAP
    POP3
}

type EmailListener {
    "The goid for the email listener Connection"
    goid : ID!
    "The name of the email listener. If you are creating several listeners, make sure the name is descriptive"
    name : String!
    "The configuration checksum"
    checksum: String!

    "Whether this email listener is enabled(active)"
    enabled : Boolean!
    "The type of email server (IMAP or POP3)"
    serverType: EmailServerType!
    "The hostname of the email server. This name is verified against the X.509 certificate"
    hostname: String!
    "The port number to monitor"
    port : PositiveInt!
    "The folder name to check for emails (Only for IMAP)"
    folder: String!
    "Whether delete the messages on the mail server after retrieving"
    deleteOnReceive: Boolean!
    "Email account name"
    username: String!
    "Email account password. The password could be in plain text or secure password reference"
    password: String!
    "The name of the published service hardwired to the email listener"
    hardwiredServiceName: String
    "Whether email server connection (POP3S or IMAPS) is SSL enabled"
    sslEnabled: Boolean!
    "The listener will check for email after the specified number of seconds"
    pollInterval: PositiveInt!
    "Permitted maximum size of the message"
    sizeLimit: NonNegativeInt
    "The email listener properties excluding sizeLimit and HardwiredServiceName"
    properties: [EntityProperty!]

    "The published service hardwired to the email listener"
    hardwiredService: HardwiredService
}

input EmailListenerInput {
    "The internal entity unique identifier"
    goid: ID
    "The name of the email listener. If you are creating several listeners, make sure the name is descriptive"
    name: String!
    "Whether this email listener is enabled(active)"
    enabled: Boolean!
    "The hostname of the email server. This name is verified against the X.509 certificate"
    hostname: NonEmptyString!
    "The port number to monitor"
    port: PositiveInt!
    "The type of email server (IMAP or POP3)"
    serverType: EmailServerType!
    "Whether email server connection (POP3S or IMAPS) is SSL enabled"
    sslEnabled: Boolean!
    "Whether delete the messages on the mail server after retrieving"
    deleteOnReceive: Boolean!
    "The folder name to check for emails (Only for IMAP)"
    folder: String!
    "The listener will check for email after the specified number of seconds"
    pollInterval: PositiveInt!
    "Email account name"
    username: String!
    "Email account password. The password could be in plain text or secure password reference"
    password: String!
    "The name of the published service hardwired to the email listener"
    hardwiredServiceName: String
    "Permitted maximum size of the message"
    sizeLimit: NonNegativeInt
    "[Optional] The Email listener Properties excluding sizeLimit and HardwiredServiceName. When specified, will replace existing properties"
    properties: [EntityPropertyInput!]
    "Ignored at creation time but can be used to compare bundle with gw state"
    checksum : String
}

type EmailListenersPayload implements EntityMutationsPayload {
    status: [EntityMutationStatus!]!
    detailedStatus: [EntityMutationDetailedStatus!]!
    "The mutated email listener connections."
    emailListeners: [EmailListener]!
}

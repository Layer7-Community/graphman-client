extend type Query {
    "Get all soap services"
    soapServices : [SoapService]! @deprecated(reason: "Use 'services' instead.")
    "Get all Internal soap services"
    internalSoapServices : [InternalSoapService]! @deprecated(reason: "Use 'services' instead.")
    "Get soap services by name"
    soapServicesByName(name: String!) : [SoapService]! @deprecated(reason: "Use 'servicesByName' instead.")
    "Get soap service by name. Returns none if more than one are found."
    soapServiceByName(name: String!) : SoapService @deprecated(reason: "Use 'serviceByName' instead.")
    "Get Internal soap service by name. Returns none if more than one are found."
    internalSoapServiceByName(name: String!) : InternalSoapService @deprecated(reason: "Use 'serviceByName' instead.")
    "Get soap services inside a folder"
    soapServicesByFolderPath(folderPath: String!) : [SoapService]! @deprecated(reason: "Use 'servicesByFolderPath' instead.")
    "Get Internal soap services inside a folder"
    internalSoapServicesByFolderPath(folderPath: String!) : [InternalSoapService]! @deprecated(reason: "Use 'servicesByFolderPath' instead.")
    "Get soap service by goid"
    soapServiceByGoid(goid: ID!) : SoapService
    "Get soap service by resolver"
    soapServiceByResolver(resolver: SoapServiceResolverInput!) : SoapService @deprecated(reason: "Use 'serviceByResolvers' instead.")
}

extend type Mutation {
    "Create or update soap services"
    setSoapServices(input: [SoapServiceInput!]!) : SoapServicesPayload @deprecated(reason: "Use 'setServices' instead.")
    "Create or update Internal soap services"
    setInternalSoapServices(input: [SoapServiceInput!]!) : InternalSoapServicesPayload @deprecated(reason: "Use 'setServices' instead.")
    "Delete existing soap services given their resolution details"
    deleteSoapServices(resolvers: [SoapServiceResolverInput!]!) : SoapServicesPayload @deprecated(reason: "Use 'deleteServices' instead.")
    "Delete existing Internal soap services given their resolution details"
    deleteInternalSoapServices(resolvers: [SoapServiceResolverInput!]!) : InternalSoapServicesPayload @deprecated(reason: "Use 'deleteServices' instead.")
}

"""
A Soap service published on the Layer7 Gateway
> @l7-entity
> @l7-identity-fields resolutionPath,resolvers
> @l7-summary-fields goid,guid,name,resolutionPath,resolvers,checksum
> @l7-excluded-fields
"""
type SoapService implements PublishedService {
    "The goid for this service"
    goid : ID!
    "The guid for this service"
    guid : ID
    "The name of the service"
    name: String!
    "The resolution path to the service"
    resolutionPath: String
    "Soap service resolvers"
    resolvers: SoapResolvers!
    "The configuration checksum"
    checksum: String!

    "Whether or not the published service is enabled"
    enabled: Boolean!
    "The folder path to the service"
    folderPath: String!
    "Which SOAP version"
    soapVersion: SoapVersion!
    "Which http methods are allowed if not just POST"
    methodsAllowed: [HttpMethod!]!
    tracingEnabled: Boolean!
    wssProcessingEnabled: Boolean!
    "Allow requests intended for operations not supported by the WSDL"
    laxResolution: Boolean
    properties: [EntityProperty!]

    "The WSDL of the soap service"
    wsdl: String!
    "The policy and dependencies"
    policy: Policy!
}

"""
A Internal Soap service published on the Layer7 Gateway
> @l7-entity
> @l7-identity-fields resolutionPath,resolvers
> @l7-summary-fields goid,guid,name,resolutionPath,resolvers,checksum
> @l7-excluded-fields
"""
type InternalSoapService implements PublishedService {
    "The goid for this service"
    goid : ID!
    "The guid for this service"
    guid : ID
    "The name of the service"
    name: String!
    "The resolution path to the service"
    resolutionPath: String
    "Soap service resolvers"
    resolvers: SoapResolvers!
    "The configuration checksum"
    checksum: String!

    "Whether or not the published service is enabled"
    enabled: Boolean!
    "The folder path to the service"
    folderPath: String!
    "Which SOAP version"
    soapVersion: SoapVersion!
    "Which http methods are allowed if not just POST"
    methodsAllowed: [HttpMethod!]!
    tracingEnabled: Boolean!
    wssProcessingEnabled: Boolean!
    "Allow requests intended for operations not supported by the WSDL"
    laxResolution: Boolean
    properties: [EntityProperty!]

    "The WSDL of the soap service"
    wsdl: String!
    "The policy and dependencies"
    policy: Policy!
}

" Must have minimum (1 soapAction + baseUri) OR resolutionPath. You can have both too. "
type SoapResolvers {
    "The soap actions referred to in the wsdl"
    soapActions: [String!]!
    "Base uri from the wsdl of the service. This is used for service resolution"
    baseUri: String
    "The resolution path to the service if not default /ssg/soap"
    resolutionPath: String
}

" Must have minimum (1 soapAction + baseUri) OR resolutionPath. You can have both too. "
input SoapServiceResolverInput {
   "One of the SoapAction of the service to resolved. This must be specified along with a base ns from the WSDL"
   soapAction: String
   "One or more soap actions of the service to resolved. This must be specified in the absence of soapAction field."
   soapActions: [String!]
   "Base uri from the wsdl of the service. Use this alongside the soapaction property to resolve a soap service without resolutionUri"
   baseUri: String
   "The resolution path of the service if that is how the soap service is resolved"
   resolutionPath: String
}

input SoapServiceInput {
    "The internal entity unique identifier"
    goid: ID
    "The guid for this service, if none provided, assigned at creation"
    guid: ID
   "The folder path where to create this service.  If the path does not exist, it will be created"
   folderPath: String!
   "The name of the service"
   name: String!
   "The WSDL of the soap service"
   wsdl: String!
   "The resolution path of the service"
   resolutionPath: String = "/ssg/soap"
   "Soap service resolvers"
   resolvers: SoapServiceResolverInput
   "The policy"
   policy: PolicyInput!
   "Whether the service is enabled (optional, default true)"
   enabled: Boolean = true
   "The http methods allowed for this service"
   methodsAllowed: [HttpMethod!]!
   "Which SOAP version"
   soapVersion: SoapVersion = UNKNOWN
   "Whether or not the gateway should process incoming ws-security soap headers"
   wssProcessingEnabled: Boolean!
   tracingEnabled: Boolean = false
   "Allow requests intended for operations not supported by the WSDL"
   laxResolution: Boolean = false
   properties: [EntityPropertyInput!]
   "Ignored at creation time but can be used to compare bundle with gw state"
    checksum : String
}

type SoapServicesPayload implements EntityMutationsPayload {
  status: [EntityMutationStatus!]!
  detailedStatus: [EntityMutationDetailedStatus!]!
  soapServices: [SoapService]!
}

type InternalSoapServicesPayload implements EntityMutationsPayload {
    status: [EntityMutationStatus!]!
    detailedStatus: [EntityMutationDetailedStatus!]!
    internalSoapServices: [InternalSoapService]!
}

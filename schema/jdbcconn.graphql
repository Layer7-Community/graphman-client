extend type Query {
    "Get all JDBC Connections"
    jdbcConnections : [JdbcConnection!]!
    "Get JDBC Connection by name"
    jdbcConnectionByName(name: String!) : JdbcConnection
    "Get JDBC Connection by goid"
    jdbcConnectionByGoid(goid: ID!) : JdbcConnection
}

extend type Mutation {
    """
    Create a JDBC connection.
    If a JDBC connection with the same name already exists, the creation will fail.
    NOTE: This is experimental method, likely to be removed or revised in future.
    """
    createJdbcConnection(input : JdbcConnectionInput!): JdbcConnectionPayload!

    """
    Update an existing JDBC connection.
    If no JDBC connection with the same name exist, the update will fail
    NOTE: This is experimental method, likely to be removed or revised in future.
    """
    updateJdbcConnection(input: JdbcConnectionPartialInput!): JdbcConnectionPayload!

    """
    Create or update JDBC connections.
    If JDBC connection with the same name exist, the JDBC connection will be updated.
    If no JDBC connection with the name exist, a new JDBC connection will be created.
    """
    setJdbcConnections(input: [JdbcConnectionInput!]!): JdbcConnectionsPayload!

    """
    Deletes JDBC connections.
    """
    deleteJdbcConnections(
        "The names of the JDBC connection to delete"
        names: [String!]!): JdbcConnectionsPayload
}

"A JDBC Connection"
type JdbcConnection {
    "The goid for the JDBC Connection"
    goid : ID!
    "The JDBC Connection name"
    name : String!
    "The configuration checksum of this JDBC connection"
    checksum: String!

    "Whether this JDBC connection is enabled"
    enabled: Boolean!
    "The JDBC driver class name"
    driverClass: String!
    "The JDBC url"
    jdbcUrl : String!
    "The username"
    username: String!
    "The password or the secure password reference."
    password: String!
    "The minimum connection pool size"
    minPoolSize: NonNegativeInt!
    "The maximum connection pool size"
    maxPoolSize: PositiveInt!
    "The JDBC connection properties excluding 'user' and 'password'"
    properties: [EntityProperty!]
}

input JdbcConnectionInput {
    "The internal entity unique identifier"
    goid: ID
    "The JDBC Connection name"
    name : String!
    "The JDBC driver class name"
    driverClass: String!
    "The JDBC url"
    jdbcUrl : String!
    "Whether this JDBC connection is enabled"
    enabled: Boolean! = true
    "The username"
    username: String!
    "The password or the secured password reference"
    password: String!
    "The minimum connection pool size"
    minPoolSize: NonNegativeInt! = 3
    "The maximum connection pool size"
    maxPoolSize: PositiveInt! = 15
    "The JDBC connection properties excluding 'user' and 'password'"
    properties: [EntityPropertyInput!]
    "Ignored at creation time but can be used to compare bundle with gw state"
    checksum : String
}

input JdbcConnectionPartialInput {
    "The JDBC Connection name"
    name : String!
    "The JDBC driver class name"
    driverClass: String
    "The JDBC url"
    jdbcUrl : String
    "Whether this JDBC connection is enabled"
    enabled: Boolean
    "The username"
    username: String
    "The password or the secured password reference"
    password: String
    "The minimum connection pool size"
    minPoolSize: NonNegativeInt
    "The maximum connection pool size"
    maxPoolSize: PositiveInt
    "The JDBC connection properties excluding 'user' and 'password'.  When specified, will replace all existing properties"
    properties: [EntityPropertyInput!]
}

type JdbcConnectionPayload implements EntityMutationPayload {
    status: EntityMutationStatus!
    detailedStatus: EntityMutationDetailedStatus!
    "The created JDBC connection."
    jdbcConnection: JdbcConnection
}

type JdbcConnectionsPayload implements EntityMutationsPayload {
    status: [EntityMutationStatus!]!
    detailedStatus: [EntityMutationDetailedStatus!]!
    "The created/updated JDBC connections."
    jdbcConnections: [JdbcConnection]!
}

#
# The graphman schema for encapsulated assertion configurations
#

extend type Query {
    "Get all Encapsulated Assertion Configurations"
    encassConfigs : [EncassConfig!]!
    "Get all Encapsulated Assertion Configurations by folder path"
    encassConfigsByFolderPath(folderPath: String!) : [EncassConfig!]!
    "Get Encapsulated Assertion Configuration by name"
    encassConfigByName(name: String!) : EncassConfig
    "Get Encapsulated Assertion Configuration by goid"
    encassConfigByGoid(goid: ID!) : EncassConfig
    "Get Encapsulated Assertion Configuration by guid"
    encassConfigByGuid(guid: ID!) : EncassConfig
}

extend type Mutation {
    "Create or update Encapsulated Assertion Configurations"
    setEncassConfigs(input: [EncassConfigInput!]!) : EncassConfigsPayload
    "Delete existing Encapsulated Assertion Configurations"
    deleteEncassConfigs(names: [String!]!) : EncassConfigsPayload
}

"An Encapsulated Assertion Configuration"
type EncassConfig {
    "The goid for this encass config"
    goid : ID!
    "The guid for this encass config"
    guid : ID!
    "The name of the encass config"
    name: String!
    "The configuration checksum of this encass"
    checksum: String!

    description: String
    "The policy it points to and its dependencies"
    policyName: String!
    "the input argument descriptions for this encass"
    encassArgs : [EncassArg!]
    "the output descriptions"
    encassResults : [EncassResult!]
    properties: [EntityProperty!]
}

"The description of an input argument for an encapsulated assertion"
type EncassArg {
    "The name of the input"
    name: String!
    # com.l7tech.policy.variable.DataType
    "The type of input"
    type : DataType!
    "The order of the argument in the admin gui"
    ordinal : Int
    "The prompt in the admin gui for this encass argument"
    guiPrompt : Boolean
    "The label in the admin gui associated with this encass argument"
    guiLabel : String
}

"The description of an output from the encapsulated assertion"
type EncassResult {
    "The name of the output"
    name: String!
    # com.l7tech.policy.variable.DataType
    "The type of the output"
    type : DataType!
}

enum DataType {
    STRING
    CERTIFICATE
    INTEGER
    DECIMAL
    FLOAT
    ELEMENT
    BOOLEAN
    BINARY
    DATE_TIME
    MESSAGE
    BLOB
    CLOB
    UNKNOWN
}

"The description of a new encapsulated assertion configuration being created"
input EncassConfigInput {
    "The internal entity unique identifier"
    goid: ID
    "The guid for this encass config, can be omitted and a new one is assigned"
    guid : ID
    "The name of the encass config"
    name: String!
    description: String
    "The policy it points to and its dependencies"
    policyName: String!
    "the input argument descriptions for this encass"
    encassArgs : [EncassArgInput!]
    "the output descriptions"
    encassResults : [EncassResultInput!]
    properties: [EntityPropertyInput!]
    "Ignored at creation time but can be used to compare bundle with gw state"
    checksum : String
}

"The description of an input argument for an encapsulated assertion for use when creating or updating an existing encass config"
input EncassArgInput {
    "The name of the input"
    name: String!
    # com.l7tech.policy.variable.DataType
    "The type of input"
    type : DataType!
    "The order of the argument in the admin gui"
    ordinal : Int
    "The prompt in the admin gui for this encass argument"
    guiPrompt : Boolean = false
    "The label in the admin gui associated with this encass argument"
    guiLabel : String
}

"The description of an output from the encapsulated assertion for use when creating or updating an existing encass config"
input EncassResultInput {
    "The name of the output"
    name: String!
    # com.l7tech.policy.variable.DataType
    "The type of the output"
    type : DataType!
}

type EncassConfigsPayload implements EntityMutationsPayload {
    status: [EntityMutationStatus!]!
    detailedStatus: [EntityMutationDetailedStatus!]!
    encassConfigs: [EncassConfig]!
}

extend type Query {
    "Get all policy fragments"
    policyFragments : [PolicyFragment!]! @deprecated(reason: "Use 'policies' instead.")
    "Get policy fragment by name"
    policyFragmentByName(name: String!) : PolicyFragment @deprecated(reason: "Use 'policyByName' instead.")
    "Get policy fragments inside a folder"
    policyFragmentsByFolderPath(folderPath: String!) : [PolicyFragment!]! @deprecated(reason: "Use 'policiesByFolderPath' instead.")
    "Get policy fragment by goid"
    policyFragmentByGoid(goid: ID!) : PolicyFragment
    "Get policy fragment by guid"
    policyFragmentByGuid(guid: ID!) : PolicyFragment @deprecated(reason: "Use 'policyByGuid' instead.")
    "Get all global policies"
    globalPolicies : [GlobalPolicy!]! @deprecated(reason: "Use 'policies' instead.")
    "Get global policy by tag"
    globalPolicyByTag(tag: String!) : GlobalPolicy
    "Get global policies inside a folder"
    globalPoliciesByFolderPath(folderPath: String!) : [GlobalPolicy!]! @deprecated(reason: "Use 'policiesByFolderPath' instead.")
}

extend type Mutation {
    "Create or update policy fragments"
    setPolicyFragments(input: [PolicyFragmentInput!]!) : PolicyFragmentsPayload! @deprecated(reason: "Use 'setPolicies' instead.")
    "Delete policy fragments"
    deletePolicyFragments(names: [String!]!) : PolicyFragmentsPayload! @deprecated(reason: "Use 'deletePolicies' instead.")
    "Create or update global policies"
    setGlobalPolicies(input: [GlobalPolicyInput!]!) : GlobalPoliciesPayload! @deprecated(reason: "Use 'setPolicies' instead.")
    "Delete global policies"
    deleteGlobalPolicies(tags: [String!]!) : GlobalPoliciesPayload! @deprecated(reason: "Use 'deletePolicies' instead.")
}

"""
A Global policy.
> @l7-entity
> @l7-identity-fields name
> @l7-summary-fields goid,guid,name,tag,checksum
> @l7-excluded-fields
> @l7-deprecated Use 'L7Policy' instead.
"""
type GlobalPolicy {
    "The goid for this policy"
    goid : ID!
    "The guid for this policy"
    guid : ID!
    "The name of the policy (policies are unique by name)"
    name: String!
    """
    Global policy tag. Possible values are :
      message-completed
      message-received
      post-security
      post-service
      pre-security
      pre-service
    """
    tag: String!
    "The configuration checksum"
    checksum: String!

    "The folder path where this policy is located"
    folderPath: String!
    "The actual policy and dependencies"
    policy: Policy!
}

 """
 A policy fragment that can be included in another policy.
 > @l7-entity
 > @l7-identity-fields name
 > @l7-summary-fields goid,guid,name,checksum
 > @l7-excluded-fields
 > @l7-deprecated Use 'L7Policy' instead.
 """
 type PolicyFragment {
    "The goid for this policy"
    goid : ID!
    "The guid for this policy"
    guid : ID!
    "The name of the policy (policies are unique by name)"
    name: String!
    "The configuration checksum"
    checksum: String!

    "The folder path to the policy"
    folderPath: String!
    soap: Boolean
    "The actual policy and dependencies"
    policy: Policy!
 }

 input PolicyFragmentInput {
   "The internal entity unique identifier"
   goid: ID
   "The folder path where to create this policy.  If the path does not exist, it will be created"
   folderPath: String!
   "The name of the policy. Policies are unique by name."
   name: String!
   "The guid for this policy, if none provided, assigned at creation"
   guid : ID
   "The policy"
   policy: PolicyInput!
   soap: Boolean = false
   "Ignored at creation time but can be used to compare bundle with gw state"
   checksum : String
 }

input GlobalPolicyInput {
    "The name of the policy. Policies are unique by name."
    name: String!
    "The folder path where to create this policy.  If the path does not exist, it will be created"
    folderPath: String!
    "The goid for this policy"
    goid : ID
    "The guid for this service, if none provided, assigned at creation"
    guid : ID
    """
    Global policy tag. Possible values are :
      message-completed
      message-received
      post-security
      post-service
      pre-security
      pre-service
    """
    tag: String!
    "The policy"
    policy: PolicyInput!
    soap: Boolean = false
    "Ignored at creation time but can be used to compare bundle with gw state"
    checksum : String
}

 type PolicyFragmentsPayload implements EntityMutationsPayload {
   status: [EntityMutationStatus!]!
   detailedStatus: [EntityMutationDetailedStatus!]!
   policyFragments: [PolicyFragment]!
 }

type GlobalPoliciesPayload implements EntityMutationsPayload {
    status: [EntityMutationStatus!]!
    detailedStatus: [EntityMutationDetailedStatus!]!
    globalPolicies: [GlobalPolicy]!
}

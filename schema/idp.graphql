extend type Query {
    "Get all fips configurations"
    fips : [Fip!]! @deprecated(reason: "Use 'federatedIdps' instead.")
    "Get all fip users"
    fipUsers : [FipUser!]! @deprecated(reason: "Use 'federatedUsers' instead.")
    "Get all fip groups"
    fipGroups : [FipGroup!]! @deprecated(reason: "Use 'federatedGroups' instead.")
    "Get fip configuration by name"
    fipByName(name: String!) : Fip @deprecated(reason: "Use 'federatedIdpByName' instead.")
    "Get fip user by name"
    fipUserByName(providerName: String!, name: String!) : FipUser @deprecated(reason: "Use 'federatedUserByName' instead.")
    "Get fip group by name"
    fipGroupByName(providerName: String!, name: String!) : FipGroup @deprecated(reason: "Use 'federatedGroupByName' instead.")
    searchFip(filter: IdpFilter!) : FipSearchResult! @deprecated(reason: "Use 'searchFederatedIdp' instead.")
    "Get internal users and groups"
    searchInternal(filter: IdpFilter!) : InternalSearchResult! @deprecated(reason: "Use 'searchInternalIdp' instead.")
    "Get all ldap configurations"
    ldaps : [Ldap!]! @deprecated(reason: "Use 'ldapIdps' instead.")
    "Get ldap configuration by name"
    ldapByName(name: String!) : Ldap @deprecated(reason: "Use 'ldapIdpByName' instead.")
}

extend type Mutation {
    "Creates or updates one or more fips"
    setFips(input: [FipInput!]!) : FipsPayload @deprecated(reason: "Use 'setFederatedIdps' instead.")
    "Creates or updates one or more ldaps"
    setLdaps(input: [LdapInput!]!) : LdapsPayload @deprecated(reason: "Use 'setLdapIdps' instead.")
    "Deletes one or more existing fips"
    deleteFips(names: [String!]!) : FipsPayload @deprecated(reason: "Use 'deleteFederatedIdps' instead.")
    "Deletes one or more existing ldaps"
    deleteLdaps(names: [String!]!) : LdapsPayload @deprecated(reason: "Use 'deleteLdapIdps' instead.")

    """
    Creates or updates one or more fip users.
    NOTE: Existing user will be found by either login or subjectDn or name.
    """
    setFipUsers(input: [FipUserInput!]!) : FipUsersPayload @deprecated(reason: "Use 'setFederatedUsers' instead.")
    "Creates or updates one or more fip groups"
    setFipGroups(input: [FipGroupInput!]!) : FipGroupsPayload @deprecated(reason: "Use 'setFederatedGroups' instead.")
    """
    Deletes one or more existing fip users.
    NOTE: Here, name can be either login or subjectDn or name.
    """
    deleteFipUsers(providerName: String!, names: [String!]!) : FipUsersPayload @deprecated(reason: "Use 'deleteFederatedUsers' instead.")
    "Deletes one or more existing fip groups"
    deleteFipGroups(providerName: String!, names: [String!]!) : FipGroupsPayload @deprecated(reason: "Use 'deleteFederatedGroups' instead.")
}

type FipSearchResult {
    fipUsers : [FipUser!]!
    fipGroups : [FipGroup!]!
}

input FipUserInput {
    name : String!
    "If provided, will try to honour at creation time"
    goid : ID
    " The name of the FiP this user is defined as part of "
    providerName : String!
    "The list of fip group details (names) that this user is member of. If you pass empty array, will reset memberships. If absent, does not affect memberships for current user."
    memberOf : [MembershipInput!]
    login : String
    subjectDn : String
    "A client-side certificate associated with this user to use for pki type authentication"
    certBase64 : String
    firstName : String
    lastName : String
    email : String
    checksum : String
}

input FipGroupInput {
    name : String!
    "If provided, will try to honour at creation time"
    goid : ID
    " The name of the FiP this group is defined in "
    providerName : String!
    description : String
    "Ignored at creation time but can be used to compare bundle with gw state"
    checksum : String
}

"""
A group defined in a federated identity provider.
> @l7-entity
> @l7-identity-fields name
> @l7-summary-fields goid,name,providerName,checksum
> @l7-excluded-fields members
> @l7-deprecated Use 'FederatedGroup' instead.
"""
type FipGroup {
    goid : ID!
    name : String!
    " The name of the FiP this group is defined in "
    providerName : String!
    "A checksum of the name, description and member names properties of the group"
    checksum : String!

    description : String
    " Fip users that member of this group "
    members : [FipUser!]!
}
# Note FIP also has concept of virtual group with name, description, subjectDnPattern, emailPattern, isRegex

"""
A user defined in a federated identity provider..
> @l7-entity
> @l7-identity-fields login,name,providerName
> @l7-summary-fields goid,name,login,providerName,checksum
> @l7-excluded-fields
> @l7-deprecated Use 'FederatedUser' instead.
"""
type FipUser {
    goid : ID!
    name : String!
    login : String
    " The name of the FiP this user is defined as part of "
    providerName : String!
    checksum : String!

    subjectDn : String
    "A client-side certificate associated with this user to use for pki type authentication"
    certBase64 : String
    firstName : String
    lastName : String
    email : String
    " The list of Fip groups this user belongs to "
    memberOf : [FipGroup!]!
}

"""
A federated identity provider.
> @l7-entity
> @l7-identity-fields name
> @l7-summary-fields goid,name,checksum
> @l7-excluded-fields
> @l7-deprecated Use 'FederatedIdp' instead.
"""
type Fip {
    goid : ID!
    name : String!
    checksum : String!

    enableCredentialTypeSaml : Boolean!
    enableCredentialTypeX509 : Boolean!
    certificateValidation: CertificateValidationType
    " The certificates in the trusted certificate table that establish the trust for this FIP "
    certificateReferences : [Certificate!]!
}

input FipInput {
    name : String!
    "Will try to match goid if provided"
    goid : ID
    enableCredentialTypeSaml : Boolean!
    enableCredentialTypeX509 : Boolean!
    certificateValidation: CertificateValidationType
    " The certificates in the trusted certificate table that establish the trust for this FIP "
    certificateReferences : [FipCertInput!]!
    "The optional checksum is ignored during the mutation but can be used to compare bundle content"
    checksum : String
}

input LdapInput {
    name : String!
    "Will try to match goid if provided"
    goid : ID
    ldapUrls : [String!]!
    "Whether or not the gateway presents a client cert when connecting at those ldap urls (only relevant when ldaps url)"
    ldapsClientAuthEnabled : Boolean!
    "The ID of the gateway keystore where the key is located"
    ldapsClientKeystoreId: ID
    "The alias of the key in the gateway keystore that is used when doing ldaps client cert authentication"
    ldapsClientKeyAlias : String
    searchBase : String!
    writable : Boolean!
    bindDn : String!
    bindPassword : String!
    userMappings : [UserMappingInput!]!
    groupMappings : [GroupMappingInput!]!
    "The optional checksum is ignored during the mutation but can be used to compare bundle content"
    checksum : String
}

input FipCertInput {
    "The thumbprint of the cert to use as trust for a federated identity provider"
    thumbprintSha1 : String!

    "The internal entity unique identifier. (Note that, this field has no effect on the mutation)"
    goid: ID
    "The name of the trusted certificate. (Note that, this field has no effect on the mutation)"
    name: String
    "The base 64 encoded string of the certificate. (Note that, this field has no effect on the mutation)"
    certBase64: String
    "Whether to perform hostname verification with this certificate. (Note that, this field has no effect on the mutation)"
    verifyHostname: Boolean
    "Whether this certificate is a trust anchor. (Note that, this field has no effect on the mutation)"
    trustAnchor: Boolean
    "What the certificate is trusted for. (Note that, this field has no effect on the mutation)"
    trustedFor: [TrustedForType!]
    "The revocation check policy type. (Note that, this field has no effect on the mutation)"
    revocationCheckPolicyType : PolicyUsageType
    "The name of revocation policy. (Note that, this field has no effect on the mutation)"
    revocationCheckPolicyName : String
    "The Subject DN of this certificate. (Note that, this field has no effect on the mutation)"
    subjectDn : String
    "The start date of the validity period. (Note that, this field has no effect on the mutation)"
    notBefore : String
    "the end date of the validity period. (Note that, this field has no effect on the mutation)"
    notAfter : String
    "Ignored at creation time but can be used to compare bundle with gw state"
    checksum : String
}

type FipsPayload implements EntityMutationsPayload {
    status: [EntityMutationStatus!]!
    detailedStatus: [EntityMutationDetailedStatus!]!
    fips: [Fip]!
}

type LdapsPayload implements EntityMutationsPayload {
    status: [EntityMutationStatus!]!
    detailedStatus: [EntityMutationDetailedStatus!]!
    ldaps: [Ldap]!
}

type FipUsersPayload implements EntityMutationsPayload {
    status: [EntityMutationStatus!]!
    detailedStatus: [EntityMutationDetailedStatus!]!
    fipUsers : [FipUser]!
}

type FipGroupsPayload implements EntityMutationsPayload {
    status: [EntityMutationStatus!]!
    detailedStatus: [EntityMutationDetailedStatus!]!
    fipGroups : [FipGroup]!
}

"""
LdapIdp config itself is provided. Graphman wont get to
underlying users and groups in the ldap since they are not
part of the gateway configuration itself. When l7 policies
refer to these ldap users and groups, thee references are
interpreted by the ldap directory itself.
> @l7-entity
> @l7-identity-fields name
> @l7-summary-fields goid,name,checksum
> @l7-excluded-fields
> @l7-deprecated Use 'LdapIdp' instead.
"""
type Ldap {
    goid : ID!
    name : String!
    checksum : String!

    ldapUrls : [String!]!
    "Whether or not the gateway presents a client cert when connecting at those ldap urls (only relevant when ldaps url)"
    ldapsClientAuthEnabled : Boolean!
    "The ID of the gateway keystore where the key is located"
    ldapsClientKeystoreId: ID
    "The alias of the key in the gateway keystore that is used when doing ldaps client cert authentication"
    ldapsClientKeyAlias : String
    searchBase : String!
    writable : Boolean!
    bindDn : String!
    bindPassword : String!
    userMappings : [UserMapping!]!
    groupMappings : [GroupMapping!]!
#   consider these advanced ldap configuration:
#   userCertificateUseType : UserCertificateUseType!
#   ntlm stuff, 8 settings and additional arbitrary props
#   6 additional user cert settings
}

# enum UserCertificateUseType {
#    NONE
#    INDEX
#    INDEX_CUSTOM
#    SEARCH
# }

type GroupMapping {
    objClass : String!
    nameAttrName : String!
    memberAttrName : String!
    memberStrategy : MemberStrategy!
}

input GroupMappingInput {
    objClass : String!
    nameAttrName : String!
    memberAttrName : String!
    memberStrategy : MemberStrategyInput!
}

type MemberStrategy {
    "Possible values are 0 for MEMBERS_ARE_DN, 1 MEMBERS_ARE_LOGIN, 2 MEMBERS_ARE_NVPAIR, 3 MEMBERS_BY_OU"
    val : Int!
}

input MemberStrategyInput {
    "Possible values are 0 for MEMBERS_ARE_DN, 1 MEMBERS_ARE_LOGIN, 2 MEMBERS_ARE_NVPAIR, 3 MEMBERS_BY_OU"
    val : Int!
}

type UserMapping {
    objClass : String!
    nameAttrName : String!
    loginAttrName : String!
    passwdAttrName : String
    firstNameAttrName : String
    lastNameAttrName : String
    emailNameAttrName : String
    kerberosAttrName : String
    kerberosEnterpriseAttrName : String
	userCertAttrName : String
    passwdType : PasswdStrategy
}

input UserMappingInput {
    objClass : String!
    nameAttrName : String!
    loginAttrName : String!
    passwdAttrName : String
    firstNameAttrName : String
    lastNameAttrName : String
    emailNameAttrName : String
    kerberosAttrName : String
    kerberosEnterpriseAttrName : String
	userCertAttrName : String
    passwdType : PasswdStrategyInput
}

type PasswdStrategy {
    "Possible values are 0 for CLEAR, 1 for HASHED"
    val : Int!
}

input PasswdStrategyInput {
    "Possible values are 0 for CLEAR, 1 for HASHED"
    val : Int!
}
extend type Query {
    "Get all listen ports"
    listenPorts : [ListenPort!]!
    "Get the listen port by name"
    listenPortByName(name : String!) : ListenPort
    "Get the listen ports by protocol"
    listenPortsByProtocol(protocol: String!) : [ListenPort!]!
}

extend type Mutation {
    #Create or update existing listen ports.
    #Match is carried by name. If match is found, it will be updated. Otherwise, it will be created.
    """
    Create or update Listen Ports.
    If Listen Port with the same name exist, the Listen Port will be updated.
    If no Listen Port with the name exist, a new Listen Port will be created.
    """
    setListenPorts(input: [ListenPortInput!]!): ListenPortsPayload!

    "Delete existing listen ports. Match is carried by name."
    deleteListenPorts(names: [String!]!): ListenPortsPayload!
}

enum ListenPortFeature {
    PUBLISHED_SERVICE_MESSAGE_INPUT
    POLICY_MANAGER_ACCESS
    ENTERPRISE_MANAGER_ACCESS
    ADMINISTRATIVE_ACCESS
    BROWSER_BASED_ADMINISTRATION
    POLICY_DOWNLOAD_SERVICE
    PING_SERVICE
    WS_TRUST_SECURITY_TOKEN_SERVICE
    CERTIFICATE_SIGNING_SERVICE
    PASSWORD_CHANGING_SERVICE
    WSDL_DOWNLOAD_SERVICE
    SNMP_QUERY_SERVICE
    BUILT_IN_SERVICES
    NODE_CONTROL
    INTER_NODE_COMMUNICATION
}

enum ListenPortClientAuth {
    NONE
    OPTIONAL
    REQUIRED
}

type ListenPortTlsSettings {
    "Specify whether the client must present a certificate to authenticate: NONE/OPTIONAL/REQUIRED"
    clientAuthentication: ListenPortClientAuth!
    "Keystore ID"
    keystoreId: ID
    "Key alias configured for listen port"
    keyAlias: String
    "TLS versions to be enabled for the listen port"
    tlsVersions: [String!]!
    "Cipher suites that will be enabled on the SSL listen port"
    cipherSuites: [String!]
    "Enforces cipher suites usage in the order of preference"
    useCipherSuitesOrder: Boolean!
}

type ListenPort {
    "The internal entity unique identifier"
    goid : ID!
    "The listen port configuration name"
    name : String!
    "The configuration checksum"
    checksum: String!

    "Whether this listen port configuration is enabled"
    enabled : Boolean!
    """
    Protocol (scheme). Possible values are:
        HTTP
        HTTPS
        HTTP2
        HTTP2 (Secure)
        FTP
        FTPS
        l7.raw.tcp
        SSH2
    """
    protocol: String!
    """
    The ListenPort's port number
    Note: If the listen port is using the SSH2 protocol, avoid using port 22, as it may conflict with the default SSH port 22 on Linux or Unix systems.
    """
    port : PositiveInt!
    "The name of the published service hardwired to the listen port"
    hardwiredServiceName: String
    "Which Gateway services can be accessed through this listen port"
    enabledFeatures: [ListenPortFeature!]!
    "The listen port tls settings"
    tlsSettings: ListenPortTlsSettings
    "The listen port properties"
    properties: [EntityProperty!]

    "The published service hardwired to the listen port"
    hardwiredService: HardwiredService
}

input ListenPortInput {
    "The internal entity unique identifier"
    goid: ID
    "The listen port configuration name"
    name: String!
    "Whether this listen port configuration is enabled to listen for traffic on the specified port"
    enabled: Boolean!
    """
    Protocol (scheme). Possible values are:
    HTTP
    HTTPS
    HTTP2
    HTTP2 (Secure)
    FTP
    FTPS
    l7.raw.tcp
    SSH2
    """
    protocol: String!
    """
    The ListenPort's port number
    Note: If the listen port is using the SSH2 protocol, avoid using port 22, as it may conflict with the default SSH port 22 on Linux or Unix systems.
    """
    port : PositiveInt!
    "The name of the published service hardwired to the listen port"
    hardwiredServiceName: String
    "Which Gateway services can be accessed through this listen port"
    enabledFeatures: [ListenPortFeature!]!
    "The listen port tls settings"
    tlsSettings: ListenPortTlsSettingsInput
    "The listen port properties"
    properties: [EntityPropertyInput!]
    "Ignored at creation time but can be used to compare bundle with gw state"
    checksum : String
}

input ListenPortTlsSettingsInput {
    "Specify whether the client must present a certificate to authenticate: NONE/OPTIONAL/REQUIRED"
    clientAuthentication: ListenPortClientAuth!
    "Keystore ID"
    keystoreId: ID
    "Key alias configured for listen port"
    keyAlias: String
    "TLS versions to be enabled for the listen port"
    tlsVersions: [String!]!
    "Cipher suites that will be enabled on the SSL listen port"
    cipherSuites: [String!]
    "Enforces cipher suites usage in the order of preference"
    useCipherSuitesOrder: Boolean!
}

type ListenPortsPayload implements EntityMutationsPayload {
    status: [EntityMutationStatus!]!
    detailedStatus: [EntityMutationDetailedStatus!]!
    listenPorts: [ListenPort]!
}

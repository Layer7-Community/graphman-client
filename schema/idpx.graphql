extend type Query {
    "Get internal IDPs."
    internalIdps: [InternalIdp!]!
    "Get all internal users"
    internalUsers : [InternalUser!]!
    "Get all internal groups"
    internalGroups : [InternalGroup!]!
    "Get internal user by login"
    internalUserByLogin(login: String!) : InternalUser
    "Get internal group by name"
    internalGroupByName(name: String!) : InternalGroup
    "Get internal users and groups"
    searchInternalIdp(filter: IdpFilter!) : InternalSearchResult!

    "Get all federated IDP configurations"
    federatedIdps : [FederatedIdp!]!
    "Get all federated users"
    federatedUsers : [FederatedUser!]!
    "Get all federated groups"
    federatedGroups : [FederatedGroup!]!
    "Get federated IDP configuration by name"
    federatedIdpByName(name: String!) : FederatedIdp
    "Get federated user by name"
    federatedUserByName(providerName: String!, name: String!) : FederatedUser
    "Get federated group by name"
    federatedGroupByName(providerName: String!, name: String!) : FederatedGroup
    "Get federated users and groups"
    searchFederatedIdp(filter: IdpFilter!) : FederatedSearchResult!

    "Get all simple simple ldap configurations"
    simpleLdapIdps : [SimpleLdapIdp!]!
    "Get simple ldap configuration by name"
    simpleLdapIdpByName(name: String!) : SimpleLdapIdp
    "Get all policy backed ldap configurations"
    policyBackedIdps : [PolicyBackedIdp!]!
    "Get policy backed ldap configuration by name"
    policyBackedIdpByName(name: String!) : PolicyBackedIdp
    "Get all ldap configurations"
    ldapIdps : [LdapIdp!]!
    "Get ldap configuration by name"
    ldapIdpByName(name: String!) : LdapIdp
}

extend type Mutation {
    "Creates or updates one ore more internal IDP configurations"
    setInternalIdps(input: [InternalIdpInput!]!): InternalIdpsPayload
    "Creates or updates one or more internal users"
    setInternalUsers(input: [InternalUserInput!]!) : InternalUsersPayload
    "Creates or updates one or more internal groups"
    setInternalGroups(input: [InternalGroupInput!]!) : InternalGroupsPayload
    "Deletes one or more existing internal users"
    deleteInternalUsers(logins: [String!]!) : InternalUsersPayload
    "Deletes one or more existing internal groups"
    deleteInternalGroups(names: [String!]!) : InternalGroupsPayload

    "Creates or updates one or more fips"
    setFederatedIdps(input: [FederatedIdpInput!]!) : FederatedIdpsPayload
    "Deletes one or more existing fips"
    deleteFederatedIdps(names: [String!]!) : FederatedIdpsPayload
    """
    Creates or updates one or more fip users.
    NOTE: Existing user will be found by either login or subjectDn or name.
    """
    setFederatedUsers(input: [FederatedUserInput!]!) : FederatedUsersPayload
    "Creates or updates one or more fip groups"
    setFederatedGroups(input: [FederatedGroupInput!]!) : FederatedGroupsPayload
    """
    Deletes one or more existing fip users.
    NOTE: Here, name can be either login or subjectDn or name.
    """
    deleteFederatedUsers(providerName: String!, names: [String!]!) : FederatedUsersPayload
    "Deletes one or more existing fip groups"
    deleteFederatedGroups(providerName: String!, names: [String!]!) : FederatedGroupsPayload

    "Creates or updates one or more simple ldaps"
    setSimpleLdapIdps(input: [SimpleLdapIdpInput!]!) : SimpleLdapIdpsPayload
    "Deletes one or more existing simple ldaps"
    deleteSimpleLdapIdps(names: [String!]!) : SimpleLdapIdpsPayload
    "Creates or updates one or more policy backed ldaps"
    setPolicyBackedIdps(input: [PolicyBackedIdpInput!]!) : PolicyBackedIdpsPayload
    "Deletes one or more existing policy backed ldaps"
    deletePolicyBackedIdps(names: [String!]!) : PolicyBackedIdpsPayload
    "Creates or updates one or more ldaps"
    setLdapIdps(input: [LdapIdpInput!]!) : LdapIdpsPayload
    "Deletes one or more existing ldaps"
    deleteLdapIdps(names: [String!]!) : LdapIdpsPayload
}

" Indicate how to search for group or user. Provide either a name pattern, a subject dn and or a goid. "
input IdpFilter {
    " The name of the FiP provider, or 'Internal' "
    providerName : String!
    "Finds users and groups whose name matches the specified pattern. May include wildcard such as * character"
    namePattern : String
    " SubjectDN of a FIP user "
    subjectDn : String
    " Get entity by goid "
    goid : ID
}

type InternalSearchResult {
    internalUsers : [InternalUser!]!
    internalGroups : [InternalGroup!]!
}

"""
An internal identity provider.
> @l7-entity
> @l7-identity-fields name
> @l7-summary-fields goid,name,checksum
> @l7-excluded-fields
"""
type InternalIdp {
    goid: ID!
    name: String!
    checksum: String!
    certValidation: CertValidationType!
}

"""
A group of users defined in the internal identity provider.
> @l7-entity
> @l7-identity-fields name
> @l7-summary-fields goid,name,checksum
> @l7-excluded-fields members
"""
type InternalGroup {
    goid : ID!
    name : String!
    "A checksum of the name, description and member names properties of the group"
    checksum : String!

    description : String
    " The list of internal users that are part of this group "
    members : [InternalUser!]!
}

"""
A user in the internal identity provider.
> @l7-entity
> @l7-identity-fields login
> @l7-summary-fields goid,name,login,checksum
> @l7-excluded-fields memberOf.*
> @l7-included-fields memberOf.name
"""
type InternalUser {
    goid : ID!
    name : String
    login : String!
    checksum : String!

    enabled : Boolean!
    "The hashed password of the user if defined"
    password : String
    "A client-side certificate associated with this user to use for pki type authentication"
    certBase64 : String
    firstName : String
    lastName : String
    email : String

    " List of groups this is member of "
    memberOf : [InternalGroup!]!

    # possible future expansion expiration, accountExpiration
}

input InternalIdpInput {
    goid: ID
    name: String!
    checksum: String
    certValidation: CertValidationType = USE_DEFAULT
}

input InternalGroupInput {
    name : String!
    "If provided, will try to honour at creation time"
    goid : ID
    description : String
    "Ignored at creation time but can be used to compare bundle with gw state"
    checksum : String
}

input InternalUserInput {
    name : String
    "If provided, will try to honour at creation time"
    goid : ID
    "The list of internal group details (names) that this user is member of. If you pass empty array, will reset memberships. If absent, does not affect memberships for current users."
    memberOf : [MembershipInput!]
    login : String!
    "You can either pass in the hashed password which comes back in queries or the raw passwd directly"
    password : String
    "A client-side certificate associated with this user to use for pki type authentication"
    certBase64 : String
    firstName : String
    lastName : String
    email : String
    "Is user enabled or not!"
    enabled : Boolean
    "Ignored at creation time but can be used to compare bundle with gw state"
    checksum : String
}

input MembershipInput {
    "The name of group to which the membership is defined"
    name: String!
    goid : ID
    description : String
    providerName : String
    checksum : String
}

type InternalIdpsPayload implements EntityMutationsPayload {
    status: [EntityMutationStatus!]!
    detailedStatus: [EntityMutationDetailedStatus!]!
    internalIdps: [InternalIdp]!
}

type InternalUsersPayload implements EntityMutationsPayload {
    status: [EntityMutationStatus!]!
    detailedStatus: [EntityMutationDetailedStatus!]!
    internalUsers: [InternalUser]!
}

type InternalGroupsPayload implements EntityMutationsPayload {
    status: [EntityMutationStatus!]!
    detailedStatus: [EntityMutationDetailedStatus!]!
    internalGroups: [InternalGroup]!
}

"""
A federated identity provider.
> @l7-entity
> @l7-identity-fields name
> @l7-summary-fields goid,name,checksum
> @l7-excluded-fields
"""
type FederatedIdp {
    goid : ID!
    name : String!
    checksum : String!

    supportsSAML : Boolean!
    supportsX509 : Boolean!
    certValidation: CertValidationType!
    " The certificates in the trusted certificate table that establish the trust for this FIP "
    trustedCerts : [TrustedCertRef!]
}

"""
A group defined in a federated identity provider.
> @l7-entity
> @l7-identity-fields name
> @l7-summary-fields goid,name,providerName,checksum
> @l7-excluded-fields members
"""
type FederatedGroup {
    goid : ID!
    name : String!
    " The name of the FiP this group is defined in "
    providerName : String!
    "A checksum of the name, description and member names properties of the group"
    checksum : String!

    description : String
    " Federated users that member of this group "
    members : [FederatedUser!]!
}

# Note FIP also has concept of virtual group with name, description, subjectDnPattern, emailPattern, isRegex

"""
A user defined in a federated identity provider..
> @l7-entity
> @l7-identity-fields login,name,providerName
> @l7-summary-fields goid,name,login,providerName,checksum
> @l7-excluded-fields memberOf.*
> @l7-included-fields memberOf.providerName,memberOf.name
"""
type FederatedUser {
    goid : ID!
    name : String!
    login : String
    " The name of the FiP this user is defined as part of "
    providerName : String!
    checksum : String!

    subjectDn : String
    "A client-side certificate associated with this user to use for pki type authentication"
    certBase64 : String
    firstName : String
    lastName : String
    email : String
    " The list of Federated groups this user belongs to "
    memberOf : [FederatedGroup!]!
}

type FederatedSearchResult {
    federatedUsers : [FederatedUser!]!
    federatedGroups : [FederatedGroup!]!
}

type FederatedIdpsPayload implements EntityMutationsPayload {
    status: [EntityMutationStatus!]!
    detailedStatus: [EntityMutationDetailedStatus!]!
    federatedIdps: [FederatedIdp]!
}

type FederatedUsersPayload implements EntityMutationsPayload {
    status: [EntityMutationStatus!]!
    detailedStatus: [EntityMutationDetailedStatus!]!
    federatedUsers : [FederatedUser]!
}

type FederatedGroupsPayload implements EntityMutationsPayload {
    status: [EntityMutationStatus!]!
    detailedStatus: [EntityMutationDetailedStatus!]!
    federatedGroups : [FederatedGroup]!
}

input FederatedIdpInput {
    name : String!
    "Will try to match goid if provided"
    goid : ID
    supportsSAML : Boolean!
    supportsX509 : Boolean!
    certValidation: CertValidationType = USE_DEFAULT
    " The certificates in the trusted certificate table that establish the trust for this FIP "
    trustedCerts : [TrustedCertPartialInput!]
    "The optional checksum is ignored during the mutation but can be used to compare bundle content"
    checksum : String
}

input FederatedUserInput {
    name : String!
    "If provided, will try to honour at creation time"
    goid : ID
    " The name of the FiP this user is defined as part of "
    providerName : String!
    "The list of fip group details (names) that this user is member of. If you pass empty array, will reset memberships. If absent, does not affect memberships for current user."
    memberOf : [MembershipInput!]
    login : String
    subjectDn : String
    "A client-side certificate associated with this user to use for pki type authentication"
    certBase64 : String
    firstName : String
    lastName : String
    email : String
    checksum : String
}

input FederatedGroupInput {
    name : String!
    "If provided, will try to honour at creation time"
    goid : ID
    " The name of the FiP this group is defined in "
    providerName : String!
    description : String
    "Ignored at creation time but can be used to compare bundle with gw state"
    checksum : String
}

"""
A simple LDAP based identity provider.
> @l7-entity
> @l7-identity-fields name
> @l7-summary-fields goid,name,checksum
> @l7-excluded-fields
"""
type SimpleLdapIdp {
    "The internal entity unique identifier"
    goid : ID!
    "Name of the simple ldap identity provider"
    name : String!
    "A checksum of the properties"
    checksum : String!
    "simple ldap server urls"
    serverUrls : [String!]!
    "Whether to use client certificate authentication"
    useSslClientAuth : Boolean
    "Client key Alias"
    sslClientKeyAlias : String
    "Bind DN prefix"
    bindDnPatternPrefix : String
    "Bind DN suffix"
    bindDnPatternSuffix : String
    "Simple Ldap properties"
    properties : [EntityProperty!]
}

input SimpleLdapIdpInput {
    "The internal entity unique identifier"
    goid : ID
    "Name of the simple ldap identity provider"
    name : String!
    "A checksum of the properties"
    checksum : String
    "simple ldap server urls"
    serverUrls : [String!]!
    "Whether to use client certificate authentication"
    useSslClientAuth : Boolean
    "Client key Alias"
    sslClientKeyAlias : String
    "Bind DN prefix"
    bindDnPatternPrefix : String
    "Bind DN suffix"
    bindDnPatternSuffix : String
    "Simple Ldap properties"
    properties : [EntityPropertyInput!]
}

type SimpleLdapIdpsPayload implements EntityMutationsPayload {
    status: [EntityMutationStatus!]!
    detailedStatus: [EntityMutationDetailedStatus!]!
    simpleLdapIdps: [SimpleLdapIdp]!
}

"""
A policy backed identity provider.
> @l7-entity
> @l7-identity-fields name
> @l7-summary-fields goid,name,checksum
> @l7-excluded-fields
"""
type PolicyBackedIdp {
    "The internal entity unique identifier"
    goid : ID!
    "Name of the simple ldap identity provider"
    name : String!
    "A checksum of the properties"
    checksum : String!
    "Authentication Policy Name"
    authPolicyName : String
    "Default Role"
    defaultRoleName : String
    "Additional properties"
    properties : [EntityProperty!]
}

input PolicyBackedIdpInput {
    "The internal entity unique identifier"
    goid : ID
    "Name of the simple ldap identity provider"
    name : String!
    "A checksum of the properties"
    checksum : String
    "Authentication Policy Name"
    authPolicyName : String!
    "Default Role"
    defaultRoleName : String
    "Additional properties"
    properties : [EntityPropertyInput!]
}

type PolicyBackedIdpsPayload implements EntityMutationsPayload {
    status: [EntityMutationStatus!]!
    detailedStatus: [EntityMutationDetailedStatus!]!
    policyBackedIdps: [PolicyBackedIdp]!
}

"""
An LDAP based identity provider. Graphman wont get to
underlying users and groups in the ldap since they are not
part of the gateway configuration itself. When l7 policies
refer to these ldap users and groups, thee references are
interpreted by the ldap directory itself.
> @l7-entity
> @l7-identity-fields name
> @l7-summary-fields goid,name,ldapType,checksum
> @l7-excluded-fields
"""
type LdapIdp {
    goid : ID!
    name : String!
    "Ldap type"
    ldapType : String!
    checksum : String!
    "Ldap server urls"
    serverUrls : [String!]!
    "Whether or not the gateway presents a client cert when connecting at those ldap urls (only relevant when ldaps url)"
    useSslClientAuth : Boolean!
    "The alias of the key in the gateway keystore that is used when doing ldaps client cert authentication"
    sslClientKeyAlias : String
    searchBase : String!
    bindDn : String
    bindPassword : String
    writable : Boolean!
    writeBase : String!
    specifiedAttributes: [String!]
    userMappings : [UserMapping!]!
    groupMappings : [GroupMapping!]!
    ntlmProperties: [EntityProperty!]
    "Additional properties"
    properties : [EntityProperty!]
}

input LdapIdpInput {
    goid : ID
    name : String!
    checksum : String
    "Ldap type"
    ldapType : String!
    "Ldap server urls"
    serverUrls : [String!]!
    "Whether or not the gateway presents a client cert when connecting at those ldap urls (only relevant when ldaps url)"
    useSslClientAuth : Boolean!
    "The alias of the key in the gateway keystore that is used when doing ldaps client cert authentication"
    sslClientKeyAlias : String
    searchBase : String!
    bindDn : String
    bindPassword : String
    writable : Boolean!
    writeBase : String!
    specifiedAttributes: [String!]
    userMappings : [UserMappingInput!]!
    groupMappings : [GroupMappingInput!]!
    ntlmProperties: [EntityPropertyInput!]
    "Additional properties"
    properties : [EntityPropertyInput!]
}

type LdapIdpsPayload implements EntityMutationsPayload {
    status: [EntityMutationStatus!]!
    detailedStatus: [EntityMutationDetailedStatus!]!
    ldapIdps: [LdapIdp]!
}

extend type Mutation {
   "Generate Certificate Signing Request"
    generateCSR(alias: String!, params: CSRGenerateParamsInput!) : KeyCSRPayload
    "Sign CSR"
    signCSR(alias: String!, params: CSRSignParamsInput!) : KeyCertChainPayload
    "Replace Certificate Chain"
    replaceCertChain(alias: String!, params: KeyCertChainParamsInput!) : ReplaceCertChainPayload
}

"""
The certificate signing request parameters
"""
input CSRGenerateParamsInput {
    "The CSR subject dn to use. It defaults to the key's subject dn if none is specified."
    subjectDn : String
    "The subject alternative names"
    subjectAlternativeNames : [EntityPropertyInput!]
    "The signature hash to use"
    hashAlgorithm : HashAlgorithm
    "The signing algorithm to use"
    signatureAlgorithm: SignatureAlgorithm
    "Expiry age in days"
    expiryAge: PositiveInt
    "Not before"
    notBefore: Date
}

enum HashAlgorithm {
    "SHA1 hash algorithm"
    SHA1,
    "SHA256 hash algorithm"
    SHA256,
    "SHA384 hash algorithm"
    SHA384,
    "SHA512 hash algorithm"
    SHA512
}
enum SignatureAlgorithm {
    "RSASSA-PSS signing Algorithm"
    RSASSA_PSS
}

type KeyCSRPayload {
    "Key CSR"
    csr: KeyCSR

}

type KeyCSR {
    "Key for which csr is generated"
    issuedTo : String
    "CSR data in pem format."
    pem : String
}

type KeyCertChainPayload {
     "Key Certificate chain"
     chain : KeyCertChain
}

type KeyCertChain {
     "Key for which cert chain is created"
     issuedTo : String
     "Signer Key"
     issuedBy : String
     "Signed Cert chain in pem format."
     certChain : [String!]
}

input KeyCSRInput {
    "CSR data in pem format."
    pem : String!
    "Key for which csr is generated"
    issuedTo : String
}

input CSRSignParamsInput {
    "The CSR subject dn to use. It defaults to the key's subject dn if none is specified."
    subjectDn : String
    "The signature hash to use"
    hashAlgorithm : HashAlgorithm
    "The signing algorithm to use"
    signatureAlgorithm: SignatureAlgorithm
    "Expiry age in days"
    expiryAge: PositiveInt
    "Not before"
    notBefore: Date
    "Key CSR"
    csr: KeyCSRInput!
}

input KeyCertChainParamsInput {
    "Certificate chain to be replaced"
    certChain: [String!]!
    "Replace All matching certificates flag"
    replaceAllMatchingCerts: Boolean
}

type ReplaceCertChainPayload {
    "List of updated key aliases"
    affectedKeyAliases : [String!]
}
{
	"info": {
		"_postman_id": "a8a2e286-a5c2-46bf-9c3d-073187e47813",
		"name": "Layer7 Gateway - graphman",
		"description": "# Graphman API Collection\n\n- version 1.1\n    \n\nUse this collection to discover the graphman API, to capture your relevant gateway configuration, to prepare your migration workflow\n\n## Set your graphman target\n\nThe collection has variables for pointing to your graphman endpoints. You can define separate targets for a source and a target gateway.\n\n## Set your gateway\n\nYou can change the admin username/password in the Authorization tab of the collection root as well",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "10254377"
	},
	"item": [
		{
			"name": "Bundles and Migration",
			"item": [
				{
					"name": "Apply Bundle",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let bundle = JSON.parse(pm.environment.get(\"source_bundle\"));\r",
									"\r",
									"if (bundle.activeConnectors) bundle.activeConnectors.forEach(item => delete item.hardwiredService);\r",
									"if (bundle.emailListeners) bundle.emailListeners.forEach(item => delete item.hardwiredService);\r",
									"if (bundle.listenPorts) bundle.listenPorts.forEach(item => delete item.hardwiredService);\r",
									"if (bundle.internalGroups) bundle.internalGroups.forEach(item => delete item.members);\r",
									"if (bundle.fipGroups) bundle.fipGroups.forEach(item => delete item.members);\r",
									"if (bundle.trustedCerts) bundle.trustedCerts.forEach(item => delete item.revocationCheckPolicy);\r",
									"\r",
									"if (bundle.serverModuleFiles) bundle.serverModuleFiles.forEach(item => {\r",
									"    delete item.filePartName;\r",
									"    delete item.moduleStates;\r",
									"    delete item.moduleStateSummary;\r",
									"});\r",
									"\r",
									"pm.environment.set(\"source_bundle\", JSON.stringify(bundle, null, 2));"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation applyBundle (\n    $activeConnectors: [ActiveConnectorInput!]!=[],\n    $administrativeUserAccountProperties: [AdministrativeUserAccountPropertyInput!]!=[],\n    $backgroundTaskPolicies:[BackgroundTaskPolicyInput!]!=[],\n    $cassandraConnections:[CassandraConnectionInput!]!=[],\n    $clusterProperties: [ClusterPropertyInput!]!=[],\n    $dtds:[DtdInput!]!=[],\n    $emailListeners: [EmailListenerInput!]!=[],\n    $encassConfigs:[EncassConfigInput!]!=[],\n    $fipGroups:[FipGroupInput!]!=[],\n    $fipUsers:[FipUserInput!]!=[],\n    $fips:[FipInput!]!=[],\n    $globalPolicies:[GlobalPolicyInput!]!=[],\n    $internalGroups:[InternalGroupInput!]!=[],\n    $internalSoapServices:[SoapServiceInput!]!=[],\n    $internalUsers:[InternalUserInput!]!=[],\n    $internalWebApiServices: [WebApiServiceInput!]!=[],\n    $jdbcConnections:[JdbcConnectionInput!]!=[],\n    $jmsDestinations:[JmsDestinationInput!]!=[],\n    $keys: [KeyInput!]!=[],\n    #$ldaps:[LdapInput!]!=[], \n    $internalIdps:[InternalIdpInput!]=[],\n    $federatedIdps:[FederatedIdpInput!]!=[],\n    $ldapIdps:[LdapIdpInput!]=[],\n    $simpleLdapIdps:[SimpleLdapIdpInput!]=[],\n    $policyBackedIdps:[PolicyBackedIdpInput!]=[],\n    $roles: [RoleInput!]!=[],\n    $listenPorts: [ListenPortInput!]!=[],\n    $passwordPolicies:[PasswordPolicyInput!]!=[],\n    $policyFragments: [PolicyFragmentInput!]!=[],\n    $revocationCheckPolicies:[RevocationCheckPolicyInput!]!=[],\n    $scheduledTasks:[ScheduledTaskInput!]!=[],\n    $logSinks: [LogSinkInput!]!=[],\n    $schemas:[SchemaInput!]!=[],\n    $secrets: [SecretInput!]!=[],\n    $httpConfigurations: [HttpConfigurationInput!]!=[],\n    $customKeyValues: [CustomKeyValueInput!]!=[],\n    $serverModuleFiles:[ServerModuleFileInput!]!=[],\n    $serviceResolutionConfigs:[ServiceResolutionConfigInput!]!=[],\n    $folders: [FolderInput!]!=[],\n    $smConfigs: [SMConfigInput!]!=[],\n    $soapServices:[SoapServiceInput!]!=[],\n    $trustedCerts:[TrustedCertInput!]!=[],\n    $webApiServices: [WebApiServiceInput!]!=[],\n    $genericEntities: [GenericEntityInput!]!=[]\n    $auditConfigurations: [AuditConfigurationInput!]!=[]) {\n    setServerModuleFiles(input: $serverModuleFiles){detailedStatus {action status description source {name value} target {name value}}}\n    setClusterProperties (input: $clusterProperties){detailedStatus {action status description source {name value} target {name value}}}\n    setServiceResolutionConfigs (input: $serviceResolutionConfigs){detailedStatus {action status description source {name value} target {name value}}}\n    setPasswordPolicies (input: $passwordPolicies){detailedStatus {action status description source {name value} target {name value}}}\n    setAdministrativeUserAccountProperties (input: $administrativeUserAccountProperties){detailedStatus {action status description source {name value} target {name value}}}\n\n    setFolders(input: $folders){detailedStatus {action status description source {name value} target {name value}}}\n    setRevocationCheckPolicies (input: $revocationCheckPolicies){detailedStatus {action status description source {name value} target {name value}}}\n    setTrustedCerts (input: $trustedCerts){detailedStatus {action status description source {name value} target {name value}}}\n    setSecrets (input: $secrets){detailedStatus {action status description source {name value} target {name value}}}\n    setHttpConfigurations(input: $httpConfigurations){detailedStatus {action status description source {name value} target {name value}}}\n    setCustomKeyValues(input: $customKeyValues){detailedStatus {action status description source {name value} target {name value}}}\n    setSchemas (input: $schemas){detailedStatus {action status description source {name value} target {name value}}}\n    setDtds (input: $dtds){detailedStatus {action status description source {name value} target {name value}}}\n    setJdbcConnections (input: $jdbcConnections){detailedStatus {action status description source {name value} target {name value}}}\n    setFips (input: $fips){detailedStatus {action status description source {name value} target {name value}}}\n\n    #setLdaps (input: $ldaps){detailedStatus {action status description source {name value} target {name value}}}\n    setInternalIdps (input: $internalIdps){detailedStatus {action status description source {name value} target {name value}}}\n    setFederatedIdps (input: $federatedIdps){detailedStatus {action status description source {name value} target {name value}}}\n    setLdapIdps (input: $ldapIdps){detailedStatus {action status description source {name value} target {name value}}}\n    setSimpleLdapIdps (input: $simpleLdapIdps){detailedStatus {action status description source {name value} target {name value}}}\n\n    setFipGroups (input: $fipGroups){detailedStatus {action status description source {name value} target {name value}}}\n    setInternalGroups (input: $internalGroups){detailedStatus {action status description source {name value} target {name value}}}\n    setFipUsers (input: $fipUsers){detailedStatus {action status description source {name value} target {name value}}}\n    setInternalUsers (input: $internalUsers){detailedStatus {action status description source {name value} target {name value}}}\n    setCassandraConnections (input: $cassandraConnections){detailedStatus {action status description source {name value} target {name value}}}\n\n    setPolicyBackedIdps (input: $policyBackedIdps){detailedStatus {action status description source {name value} target {name value}}}\n    \n    setJmsDestinations (input: $jmsDestinations){detailedStatus {action status description source {name value} target {name value}}}\n    setSMConfigs (input: $smConfigs){detailedStatus {action status description source {name value} target {name value}}}\n    setPolicyFragments (input: $policyFragments){detailedStatus {action status description source {name value} target {name value}}}\n    setEncassConfigs (input: $encassConfigs){detailedStatus {action status description source {name value} target {name value}}}\n    setGlobalPolicies (input: $globalPolicies){detailedStatus {action status description source {name value} target {name value}}}\n    setBackgroundTaskPolicies (input: $backgroundTaskPolicies){detailedStatus {action status description source {name value} target {name value}}}\n    setWebApiServices (input: $webApiServices){detailedStatus {action status description source {name value} target {name value}}}\n    setSoapServices (input: $soapServices){detailedStatus {action status description source {name value} target {name value}}}\n    setInternalWebApiServices (input: $internalWebApiServices){detailedStatus {action status description source {name value} target {name value}}}\n    setInternalSoapServices (input: $internalSoapServices){detailedStatus {action status description source {name value} target {name value}}}\n    setEmailListeners (input: $emailListeners){detailedStatus {action status description source {name value} target {name value}}}\n    setListenPorts (input: $listenPorts){detailedStatus {action status description source {name value} target {name value}}}\n    setActiveConnectors (input: $activeConnectors){detailedStatus {action status description source {name value} target {name value}}}\n    setScheduledTasks (input: $scheduledTasks){detailedStatus {action status description source {name value} target {name value}}}\n    setLogSinks(input: $logSinks){detailedStatus {action status description source {name value} target {name value}}}\n    setGenericEntities(input: $genericEntities){detailedStatus {action status description source {name value} target {name value}}}\n    setRoles (input: $roles) {detailedStatus {action status description source {name value} target {name value}}}\n    setAuditConfigurations(input: $auditConfigurations){detailedStatus {action status description source {name value} target {name value}}}\n\n\n    # Keys must be mutated at the end\n    setKeys (input: $keys) {detailedStatus {action status description source {name value} target {name value}}}\n}\n",
								"variables": "{{source_bundle}}"
							}
						},
						"url": {
							"raw": "{{target_gw}}",
							"host": [
								"{{target_gw}}"
							]
						},
						"description": "# Apply Bundle Template\n\nThis is a generic apply template mutation. It takes a graphman bundle as input. That bundle is a variable that was set by a Create bundle request prior to this one."
					},
					"response": []
				},
				{
					"name": "Apply Bundle - Install",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let bundle = JSON.parse(pm.environment.get(\"source_bundle\"));\r",
									"\r",
									"if (bundle.activeConnectors) bundle.activeConnectors.forEach(item => delete item.hardwiredService);\r",
									"if (bundle.emailListeners) bundle.emailListeners.forEach(item => delete item.hardwiredService);\r",
									"if (bundle.listenPorts) bundle.listenPorts.forEach(item => delete item.hardwiredService);\r",
									"if (bundle.internalGroups) bundle.internalGroups.forEach(item => delete item.members);\r",
									"if (bundle.fipGroups) bundle.fipGroups.forEach(item => delete item.members);\r",
									"if (bundle.trustedCerts) bundle.trustedCerts.forEach(item => delete item.revocationCheckPolicy);\r",
									"\r",
									"if (bundle.serverModuleFiles) bundle.serverModuleFiles.forEach(item => {\r",
									"    delete item.filePartName;\r",
									"    delete item.moduleStates;\r",
									"    delete item.moduleStateSummary;\r",
									"});\r",
									"\r",
									"pm.environment.set(\"source_bundle\", JSON.stringify(bundle, null, 2));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation installBundle {\n    installBundleEntities {summary}\n}",
								"variables": "{{source_bundle}}"
							}
						},
						"url": {
							"raw": "{{target_gw}}",
							"host": [
								"{{target_gw}}"
							]
						},
						"description": "# Apply Bundle - using standard mutation operation\n\nThis is a standard mutation operation, used to install bundled enties. It takes a graphman bundle as input. That bundle is a variable that was set by a Create bundle request prior to this one."
					},
					"response": []
				},
				{
					"name": "Apply Bundle - Delete",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let bundle = JSON.parse(pm.environment.get(\"source_bundle\"));\r",
									"\r",
									"if (bundle.activeConnectors) bundle.activeConnectors.forEach(item => delete item.hardwiredService);\r",
									"if (bundle.emailListeners) bundle.emailListeners.forEach(item => delete item.hardwiredService);\r",
									"if (bundle.listenPorts) bundle.listenPorts.forEach(item => delete item.hardwiredService);\r",
									"if (bundle.internalGroups) bundle.internalGroups.forEach(item => delete item.members);\r",
									"if (bundle.fipGroups) bundle.fipGroups.forEach(item => delete item.members);\r",
									"if (bundle.trustedCerts) bundle.trustedCerts.forEach(item => delete item.revocationCheckPolicy);\r",
									"\r",
									"if (bundle.serverModuleFiles) bundle.serverModuleFiles.forEach(item => {\r",
									"    delete item.filePartName;\r",
									"    delete item.moduleStates;\r",
									"    delete item.moduleStateSummary;\r",
									"});\r",
									"\r",
									"\r",
									"bundle.properties = bundle.properties || {};\r",
									"bundle.properties.defaultAction = 'DELETE';\r",
									"delete bundle.properties.mappings;\r",
									"bundle.properties.mappings = {\r",
									"    \"internalUsers\": [\r",
									"        {\r",
									"            \"action\": \"IGNORE\",\r",
									"            \"source\": {\r",
									"                \"name\": \"admin\",\r",
									"                \"login\": \"admin\"\r",
									"            }\r",
									"        }\r",
									"    ],\r",
									"\r",
									"    \"listenPorts\": [\r",
									"        {\r",
									"            \"action\": \"IGNORE\",\r",
									"            \"default\": true\r",
									"        }\r",
									"    ],\r",
									"\r",
									"    \"logSinks\": [\r",
									"        {\r",
									"            \"action\": \"IGNORE\",\r",
									"            \"default\": true\r",
									"        }\r",
									"    ]\r",
									"}\r",
									"\r",
									"pm.environment.set(\"source_bundle\", JSON.stringify(bundle, null, 2));"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation deleteBundle {\n    deleteBundleEntities {summary}\n}",
								"variables": "{{source_bundle}}"
							}
						},
						"url": {
							"raw": "{{target_gw}}",
							"host": [
								"{{target_gw}}"
							]
						},
						"description": "# Apply Bundle Template\n\nThis is a standard bundle mutation operation, used to delete bundled entities. It takes a graphman bundle as input. That bundle is a variable that was set by a Create bundle request prior to this one."
					},
					"response": []
				},
				{
					"name": "Policy with Dependencies - Create bundle",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"eval(pm.collectionVariables.get(\"l7utils\"));",
									"const bundle = pm.response.json();",
									"if (!bundle.data) throw \"Input does not seem to be a valid response\";",
									"",
									"l7utils().normalize(bundle);",
									"pm.environment.set(\"source_bundle\", JSON.stringify(bundle, null, 2));"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query policyFragmentByName ($name: String!) {\n    policyFragmentByName (name: $name) {\n        goid\n        guid\n        name\n        checksum\n\n        folderPath\n        soap\n        policy {\n            xml\n            allDependencies {\n                encassConfigs {\n                    goid guid name checksum \n                    description policyName \n                    encassArgs { name type ordinal guiPrompt guiLabel } \n                    encassResults{ name type } \n                    properties { name value }\n                }\n                policyFragments {\n                    goid guid name checksum \n                    folderPath soap \n                    policy { xml }\n                }\n\n                activeConnectors {\n                    goid name checksum \n                    enabled connectorType hardwiredServiceName \n                    properties { name value } \n                    advancedProperties { name value }\n                }\n                dtds {\n                    goid systemId checksum \n                    publicId description content\n                }\n                cassandraConnections {\n                    goid name checksum \n                    enabled keyspace contactPoints port compression username securePasswordName sslEnabled cipherSuites \n                    properties { name value }\n                }\n                clusterProperties {\n                    goid name checksum \n                    description hiddenProperty value\n                }\n                emailListeners {\n                    goid name checksum \n                    enabled serverType hostname port folder deleteOnReceive username password hardwiredServiceName sslEnabled pollInterval sizeLimit \n                    properties { name value }\n                }\n                fips {\n                    goid name checksum \n                    enableCredentialTypeSaml enableCredentialTypeX509 certificateValidation \n                    certificateReferences { \n                        goid name subjectDn thumbprintSha1 checksum \n                        verifyHostname trustAnchor trustedFor revocationCheckPolicyType \n                        revocationCheckPolicy { goid name } \n                        notBefore notAfter certBase64 \n                    }\n                }\n                fipGroups {\n                    goid name providerName checksum \n                    description \n                    members { \n                        goid name login providerName checksum \n                        subjectDn certBase64 firstName lastName email \n                    }\n                }\n                fipUsers {\n                    goid name login providerName checksum \n                    subjectDn certBase64 firstName lastName email \n                    memberOf { \n                        goid name providerName checksum \n                        description \n                    }\n                }\n                internalGroups {\n                    goid name checksum \n                    description \n                    members { \n                        goid name login checksum \n                        enabled password certBase64 firstName lastName email \n                    }\n                }\n                internalUsers {\n                    goid name login checksum \n                    enabled password certBase64 firstName lastName email \n                    memberOf { goid name checksum description }\n                }\n                jdbcConnections {\n                    goid name checksum \n                    enabled driverClass jdbcUrl username password minPoolSize maxPoolSize \n                    properties { name value }\n                }\n                jmsDestinations {\n                    goid connectionGoid name direction providerType checksum \n                    enabled template initialContextFactoryClassname connectionFactoryName jndiUrl jndiUsername jndiPassword \n                    jndiSslDetails { sslEnabled sslForAuthenticationOnly sslVerifyServerCertificate sslVerifyServerHostname sslClientKeyAlias } \n                    destinationType destinationName destinationUsername destinationPassword \n                    destinationSslDetails { sslEnabled sslForAuthenticationOnly sslVerifyServerCertificate sslVerifyServerHostname sslClientKeyAlias } \n                    properties { name value }\n                }\n                keys {\n                    goid keystoreId alias checksum \n                    keyType subjectDn p12 certChain\n                }                \n                ldapIdps {\n                    goid name checksum \n                    ldapType serverUrls useSslClientAuth sslClientKeyAlias searchBase \n                    writable writeBase bindDn bindPassword specifiedAttributes\n                    userMappings { \n                        objClass nameAttrName loginAttrName passwdAttrName \n                        firstNameAttrName lastNameAttrName emailNameAttrName kerberosAttrName kerberosEnterpriseAttrName\n                        userCertAttrName passwdType { val } \n                    }             \n                    groupMappings { \n                        objClass nameAttrName memberAttrName memberStrategy { val } \n                    } \n                    properties { name value } ntlmProperties{ name value }        \n                }\n                simpleLdapIdps {\n                    goid name checksum \n                    serverUrls useSslClientAuth sslClientKeyAlias bindDnPatternPrefix bindDnPatternSuffix properties { name value }        \n                }\n                federatedIdps {\n                    goid name checksum \n                    supportsSAML supportsX509 certValidation \n                    trustedCerts { name subjectDn thumbprintSha1 }\n                }\n                policyBackedIdps {\n                    goid name checksum \n                    authPolicyName defaultRoleName properties { name value }        \n                }\n                listenPorts {\n                    goid name checksum \n                    enabled protocol port hardwiredServiceName enabledFeatures \n                    tlsSettings { clientAuthentication keystoreId keyAlias tlsVersions cipherSuites useCipherSuitesOrder } \n                    properties { name value }\n                }\n                schemas {\n                    goid systemId checksum \n                    targetNs description content\n                }\n                secrets {\n                    goid name checksum \n                    description secret secretType variableReferencable\n                }\n                serverModuleFiles {\n                    goid name checksum \n                    moduleType moduleSha256 signature signerCertBase64 \n                    properties { name value } \n                    moduleStates { nodeId nodeName state description } \n                    moduleStateSummary { state description }\n                }\n                smConfigs {\n                    goid name checksum \n                    enabled agentHost agentIP agentHostConfig agentSecret cryptoMode ipCheckEnabled updateSSOToken clusterFailoverThreshold nonClusterFailover username securePasswordName \n                    properties { name value }\n                }\n                revocationCheckPolicies {\n                goid name checksum defaultPolicy defaultSuccess\n                continueOnServerUnavailable\n                    revocationCheckPolicyItems {\n                        ... on RevocationCheckPolicyItem {\n                        type url allowIssuerSignature\n                        nonceUsage signerThumbprintSha1s\n                        }\n                    }\n                }\n                trustedCerts {\n                    goid name subjectDn thumbprintSha1 checksum \n                    verifyHostname trustAnchor trustedFor revocationCheckPolicyType \n                    revocationCheckPolicy { goid name } \n                    notBefore notAfter certBase64\n                }\n                customKeyValues {\n                    goid key checksum \n                    value\n                }\n            }\n        }\n    }\n}",
								"variables": "{\n    \"name\": \"some-policy\"\n}"
							}
						},
						"url": {
							"raw": "{{source_gw}}",
							"host": [
								"{{source_gw}}"
							]
						},
						"description": "# Policy and dependencies bundle\n\nThis graphman query retrieves a policy and all its dependencies (including nested dependencies).\n\nThe script in Tests (running post-request) produces an applicable bundle from the graphman response. This bundle is persisted in an environment variable.\n\nInput:\n\nSee Body, GraphQL Variables. Set name: the name of the policy you want to package with its dependencies."
					},
					"response": []
				},
				{
					"name": "Service with Dependencies - Create bundle",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"eval(pm.collectionVariables.get(\"l7utils\"));",
									"const bundle = pm.response.json();",
									"if (!bundle.data) throw \"Input does not seem to be a valid response\";",
									"",
									"l7utils().normalize(bundle);",
									"pm.environment.set(\"source_bundle\", JSON.stringify(bundle, null, 2));",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query serviceWithDependencies ($resolutionPath: String!) {\n    webApiServiceByResolutionPath (resolutionPath: $resolutionPath) {\n        goid\n        guid\n        name\n        resolutionPath\n        checksum\n\n        enabled\n        folderPath\n        methodsAllowed\n        properties {name value}\n        tracingEnabled\n        wssProcessingEnabled\n        policy {\n            xml\n            allDependencies {\n                encassConfigs {\n                    goid guid name checksum \n                    description policyName \n                    encassArgs { name type ordinal guiPrompt guiLabel } \n                    encassResults{ name type } \n                    properties { name value }\n                }\n                policyFragments {\n                    goid guid name checksum \n                    folderPath soap \n                    policy { xml }\n                }\n\n                activeConnectors {\n                    goid name checksum \n                    enabled connectorType hardwiredServiceName \n                    properties { name value } \n                    advancedProperties { name value }\n                }\n                dtds {\n                    goid systemId checksum \n                    publicId description content\n                }\n                cassandraConnections {\n                    goid name checksum \n                    enabled keyspace contactPoints port compression username securePasswordName sslEnabled cipherSuites \n                    properties { name value }\n                }\n                clusterProperties {\n                    goid name checksum \n                    description hiddenProperty value\n                }\n                emailListeners {\n                    goid name checksum \n                    enabled serverType hostname port folder deleteOnReceive username password hardwiredServiceName sslEnabled pollInterval sizeLimit \n                    properties { name value }\n                }\n                fips {\n                    goid name checksum \n                    enableCredentialTypeSaml enableCredentialTypeX509 certificateValidation \n                    certificateReferences { \n                        goid name subjectDn thumbprintSha1 checksum \n                        verifyHostname trustAnchor trustedFor revocationCheckPolicyType \n                        revocationCheckPolicy { goid name } \n                        notBefore notAfter certBase64 \n                    }\n                }\n                fipGroups {\n                    goid name providerName checksum \n                    description \n                    members { \n                        goid name login providerName checksum \n                        subjectDn certBase64 firstName lastName email \n                    }\n                }\n                fipUsers {\n                    goid name login providerName checksum \n                    subjectDn certBase64 firstName lastName email \n                    memberOf { \n                        goid name providerName checksum \n                        description \n                    }\n                }\n                internalGroups {\n                    goid name checksum \n                    description \n                    members { \n                        goid name login checksum \n                        enabled password certBase64 firstName lastName email \n                    }\n                }\n                internalUsers {\n                    goid name login checksum \n                    enabled password certBase64 firstName lastName email \n                    memberOf { goid name checksum description }\n                }\n                jdbcConnections {\n                    goid name checksum \n                    enabled driverClass jdbcUrl username password minPoolSize maxPoolSize \n                    properties { name value }\n                }\n                jmsDestinations {\n                    goid connectionGoid name direction providerType checksum \n                    enabled template initialContextFactoryClassname connectionFactoryName jndiUrl jndiUsername jndiPassword \n                    jndiSslDetails { sslEnabled sslForAuthenticationOnly sslVerifyServerCertificate sslVerifyServerHostname sslClientKeyAlias } \n                    destinationType destinationName destinationUsername destinationPassword \n                    destinationSslDetails { sslEnabled sslForAuthenticationOnly sslVerifyServerCertificate sslVerifyServerHostname sslClientKeyAlias } \n                    properties { name value }\n                }\n                keys {\n                    goid keystoreId alias checksum \n                    keyType subjectDn p12 certChain\n                }\n                ldapIdps {\n                    goid name checksum \n                    ldapType serverUrls useSslClientAuth sslClientKeyAlias searchBase \n                    writable writeBase bindDn bindPassword specifiedAttributes\n                    userMappings { \n                        objClass nameAttrName loginAttrName passwdAttrName \n                        firstNameAttrName lastNameAttrName emailNameAttrName kerberosAttrName kerberosEnterpriseAttrName\n                        userCertAttrName passwdType { val } \n                    }             \n                    groupMappings { \n                        objClass nameAttrName memberAttrName memberStrategy { val } \n                    } \n                    properties { name value } ntlmProperties{ name value }        \n                }\n                simpleLdapIdps {\n                    goid name checksum \n                    serverUrls useSslClientAuth sslClientKeyAlias bindDnPatternPrefix bindDnPatternSuffix properties { name value }        \n                }\n                federatedIdps {\n                    goid name checksum \n                    supportsSAML supportsX509 certValidation \n                    trustedCerts { name subjectDn thumbprintSha1 }\n                }\n                policyBackedIdps {\n                    goid name checksum \n                    authPolicyName defaultRoleName properties { name value }        \n                }\n                listenPorts {\n                    goid name checksum \n                    enabled protocol port hardwiredServiceName enabledFeatures \n                    tlsSettings { clientAuthentication keystoreId keyAlias tlsVersions cipherSuites useCipherSuitesOrder } \n                    properties { name value }\n                }\n                schemas {\n                    goid systemId checksum \n                    targetNs description content\n                }\n                secrets {\n                    goid name checksum \n                    description secret secretType variableReferencable\n                }\n                serverModuleFiles {\n                    goid name checksum \n                    moduleType moduleSha256 signature signerCertBase64 \n                    properties { name value } \n                    moduleStates { nodeId nodeName state description } \n                    moduleStateSummary { state description }\n                }\n                smConfigs {\n                    goid name checksum \n                    enabled agentHost agentIP agentHostConfig agentSecret cryptoMode ipCheckEnabled updateSSOToken clusterFailoverThreshold nonClusterFailover username securePasswordName \n                    properties { name value }\n                }\n                revocationCheckPolicies {\n                goid name checksum defaultPolicy defaultSuccess\n                continueOnServerUnavailable\n                    revocationCheckPolicyItems {\n                        ... on RevocationCheckPolicyItem {\n                        type url allowIssuerSignature\n                        nonceUsage signerThumbprintSha1s\n                        }\n                    }\n                }\n                trustedCerts {\n                    goid name subjectDn thumbprintSha1 checksum \n                    verifyHostname trustAnchor trustedFor revocationCheckPolicyType \n                    revocationCheckPolicy { goid name } \n                    notBefore notAfter certBase64\n                }\n                customKeyValues {\n                    goid key checksum \n                    value\n                }\n            }\n        }\n    }\n}",
								"variables": "{\n    \"resolutionPath\" : \"/some-webapi\"\n}"
							}
						},
						"url": {
							"raw": "{{source_gw}}",
							"host": [
								"{{source_gw}}"
							]
						},
						"description": "# Graph Bundle All\n\nThis gets all configuration entities in one graphman query."
					},
					"response": []
				},
				{
					"name": "Folder - Create bundle",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"eval(pm.collectionVariables.get(\"l7utils\"));",
									"const bundle = pm.response.json();",
									"if (!bundle.data) throw \"Input does not seem to be a valid response\";",
									"",
									"l7utils().normalize(bundle);",
									"pm.environment.set(\"source_bundle\", JSON.stringify(bundle, null, 2));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query folderContents ($folderPath: String!) {\n    webApiServicesByFolderPath (folderPath: $folderPath) {\n        goid\n        name\n        resolutionPath\n        checksum\n\n        enabled\n        folderPath\n        methodsAllowed\n        properties {name value}\n        tracingEnabled\n        wssProcessingEnabled\n\n        policy {xml}\n    }\n\n    soapServicesByFolderPath (folderPath: $folderPath) {\n        goid \n        name \n        resolutionPath \n        resolvers { soapActions baseUri resolutionPath } \n        checksum \n        \n        enabled \n        folderPath \n        soapVersion \n        methodsAllowed \n        tracingEnabled \n        wssProcessingEnabled \n        laxResolution \n        properties { name value } \n        wsdl \n        policy { xml }\n    }\n\n    internalWebApiServicesByFolderPath (folderPath: $folderPath) {\n        goid\n        name\n        resolutionPath\n        checksum\n\n        enabled\n        folderPath\n        methodsAllowed\n        properties {name value}\n        tracingEnabled\n        wssProcessingEnabled\n\n        policy {xml}\n    }\n\n    internalSoapServicesByFolderPath (folderPath: $folderPath) {\n        goid \n        name \n        resolutionPath \n        resolvers { soapActions baseUri resolutionPath } \n        checksum \n        \n        enabled \n        folderPath \n        soapVersion \n        methodsAllowed \n        tracingEnabled \n        wssProcessingEnabled \n        laxResolution \n        properties { name value } \n        wsdl \n        policy { xml }\n    }\n\n    policyFragmentsByFolderPath (folderPath: $folderPath) {\n        goid \n        guid \n        name \n        checksum \n        \n        folderPath \n        soap\n        policy { xml }\n    }\n\n    encassConfigsByFolderPath (folderPath: $folderPath) {\n        goid guid name checksum \n        description policyName \n        encassArgs { name type ordinal guiPrompt guiLabel } \n        encassResults{ name type } \n        properties { name value }\n    }\n\n    globalPoliciesByFolderPath (folderPath: $folderPath) {\n        goid \n        guid \n        name \n        tag \n        checksum \n        \n        folderPath \n        policy { xml }\n    }\n\n    backgroundTaskPoliciesByFolderPath (folderPath: $folderPath) {\n        goid \n        guid \n        name \n        checksum \n        \n        folderPath \n        soap \n        policy { xml }\n    }\n\n}",
								"variables": "{\n    \"folderPath\": \"/some-folder\"\n}"
							}
						},
						"url": {
							"raw": "{{source_gw}}",
							"host": [
								"{{source_gw}}"
							]
						},
						"description": "# Folder and sub-folders bundle\n\nThis graphman queries retrieves all services and policies in a folder and its subfolders.\n\nThe script in Tests (running post-request) produces an applicable bundle from the graphman response. This bundle is persisted in an environment variable.\n\nInput:\n\nSee Body, GraphQL Variables. Set folderPath: the folderPath containing the services and policies you want to package."
					},
					"response": []
				},
				{
					"name": "Everything - Create Bundle",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"eval(pm.collectionVariables.get(\"l7utils\"));",
									"const bundle = pm.response.json();",
									"if (!bundle.data) throw \"Input does not seem to be a valid response\";",
									"",
									"l7utils().normalize(bundle);",
									"pm.environment.set(\"source_bundle\", JSON.stringify(bundle, null, 2));",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query all($includePolicyRevision: Boolean = false, $includePolicyRevisions: Boolean = false, $includeRoles: Boolean = false) {\n  services {\n    goid\n    guid\n    name\n    resolutionPath\n    resolvers {\n      soapActions\n      baseUri\n      resolutionPath\n    }\n    serviceType\n    checksum\n    enabled\n    folderPath\n    soapVersion\n    methodsAllowed\n    tracingEnabled\n    wssProcessingEnabled\n    laxResolution\n    properties {\n      name\n      value\n    }\n    wsdlUrl\n    wsdl\n    wsdlResources {\n      uri\n      content\n    }\n    policy {\n      xml\n    }\n    policyRevision @include (if: $includePolicyRevision) {\n      goid\n      ordinal\n      active\n      comment\n      author\n      time\n      xml\n    }\n    policyRevisions @include (if: $includePolicyRevisions) {\n      goid\n      ordinal\n      active\n      comment\n      author\n      time\n      xml\n    }\n  }\n  encassConfigs {\n    goid\n    guid\n    name\n    checksum\n    description\n    policyName\n    encassArgs {\n      name\n      type\n      ordinal\n      guiPrompt\n      guiLabel\n    }\n    encassResults {\n      name\n      type\n    }\n    properties {\n      name\n      value\n    }\n  }\n  policies {\n    goid\n    guid\n    name\n    policyType\n    tag\n    subTag\n    checksum\n    folderPath\n    soap\n    policy {\n      xml\n    }\n    policyRevision @include (if: $includePolicyRevision) {\n      goid\n      ordinal\n      active\n      comment\n      author\n      time\n      xml\n    }\n    policyRevisions @include (if: $includePolicyRevisions) {\n      goid\n      ordinal\n      active\n      comment\n      author\n      time\n      xml\n    }\n  }\n  activeConnectors {\n    goid\n    name\n    connectorType\n    checksum\n    enabled\n    hardwiredServiceName\n    properties {\n      name\n      value\n    }\n    advancedProperties {\n      name\n      value\n    }\n  }\n  auditConfigurations {\n    goid\n    name\n    checksum\n    lookupPolicyName\n    sinkPolicyName\n    ftpConfig {\n      host\n      port\n      timeout\n      user\n      password\n      directory\n      verifyServerCert\n      security\n      enabled\n    }\n  }\n  cassandraConnections {\n    goid\n    name\n    checksum\n    enabled\n    keyspace\n    contactPoints\n    port\n    compression\n    username\n    securePasswordName\n    sslEnabled\n    cipherSuites\n    properties {\n      name\n      value\n    }\n  }\n  clusterProperties {\n    goid\n    name\n    checksum\n    description\n    hiddenProperty\n    value\n  }\n  customKeyValues {\n    goid\n    key\n    checksum\n    value\n  }\n  dtds {\n    goid\n    systemId\n    checksum\n    publicId\n    description\n    content\n  }\n  emailListeners {\n    goid\n    name\n    checksum\n    enabled\n    serverType\n    hostname\n    port\n    folder\n    deleteOnReceive\n    username\n    password\n    hardwiredServiceName\n    sslEnabled\n    pollInterval\n    sizeLimit\n    properties {\n      name\n      value\n    }\n  }\n  federatedIdps {\n    goid\n    name\n    checksum\n    supportsSAML\n    supportsX509\n    certValidation\n    trustedCerts {\n      name\n      subjectDn\n      thumbprintSha1\n    }\n  }\n  federatedGroups {\n    goid\n    name\n    providerName\n    checksum\n    description\n  }\n  federatedUsers {\n    goid\n    name\n    login\n    providerName\n    checksum\n    subjectDn\n    certBase64\n    firstName\n    lastName\n    email\n    replaceGroupMemberships\n    memberOf {\n      name\n      providerName\n    }\n  }\n  genericEntities {\n    goid\n    name\n    checksum\n    description\n    enabled\n    entityClassName\n    valueXml\n  }\n  httpConfigurations {\n    goid\n    host\n    port\n    protocol\n    path\n    checksum\n    username\n    securePasswordName\n    ntlmHost\n    ntlmDomain\n    tlsVersion\n    tlsKeyUse\n    tlsKeystoreId\n    tlsKeyAlias\n    tlsCipherSuites\n    connectTimeout\n    readTimeout\n    followRedirects\n    proxyUse\n    proxyConfiguration {\n      host\n      port\n      username\n      securePasswordName\n    }\n  }\n  internalIdps {\n    goid\n    name\n    checksum\n    certValidation\n  }\n  internalGroups {\n    goid\n    name\n    checksum\n    description\n  }\n  internalUsers {\n    goid\n    name\n    login\n    checksum\n    enabled\n    password\n    certBase64\n    sshPublicKey\n    firstName\n    lastName\n    email\n    replaceGroupMemberships\n    memberOf {\n      name\n    }\n  }\n  jdbcConnections {\n    goid\n    name\n    checksum\n    enabled\n    driverClass\n    jdbcUrl\n    username\n    password\n    minPoolSize\n    maxPoolSize\n    properties {\n      name\n      value\n    }\n  }\n  jmsDestinations {\n    goid\n    connectionGoid\n    name\n    direction\n    providerType\n    checksum\n    enabled\n    template\n    initialContextFactoryClassname\n    connectionFactoryName\n    jndiUrl\n    jndiUsername\n    jndiPassword\n    jndiSslDetails {\n      sslEnabled\n      sslForAuthenticationOnly\n      sslVerifyServerCertificate\n      sslVerifyServerHostname\n      sslClientKeyAlias\n    }\n    destinationType\n    destinationName\n    destinationUsername\n    destinationPassword\n    destinationSslDetails {\n      sslEnabled\n      sslForAuthenticationOnly\n      sslVerifyServerCertificate\n      sslVerifyServerHostname\n      sslClientKeyAlias\n    }\n    properties {\n      name\n      value\n    }\n  }\n  keys {\n    goid\n    keystoreId\n    alias\n    checksum\n    keyType\n    usageTypes\n    subjectDn\n    p12\n    certChain\n  }\n  ldapIdps {\n    goid\n    name\n    ldapType\n    checksum\n    serverUrls\n    useSslClientAuth\n    sslClientKeyAlias\n    searchBase\n    bindDn\n    bindPassword\n    writable\n    writeBase\n    specifiedAttributes\n    userMappings {\n      objClass\n      nameAttrName\n      loginAttrName\n      passwdAttrName\n      firstNameAttrName\n      lastNameAttrName\n      emailNameAttrName\n      kerberosAttrName\n      kerberosEnterpriseAttrName\n      userCertAttrName\n      passwdType {\n        val\n      }\n    }\n    groupMappings {\n      objClass\n      nameAttrName\n      memberAttrName\n      memberStrategy {\n        val\n      }\n    }\n    ntlmProperties {\n      name\n      value\n    }\n    properties {\n      name\n      value\n    }\n  }\n  listenPorts {\n    goid\n    name\n    protocol\n    port\n    checksum\n    enabled\n    hardwiredServiceName\n    enabledFeatures\n    tlsSettings {\n      clientAuthentication\n      keystoreId\n      keyAlias\n      tlsVersions\n      cipherSuites\n      useCipherSuitesOrder\n    }\n    properties {\n      name\n      value\n    }\n  }\n  logSinks {\n    goid\n    name\n    checksum\n    description\n    type\n    enabled\n    severity\n    categories\n    syslogHosts\n    filters {\n      type\n      values\n    }\n    properties {\n      name\n      value\n    }\n  }\n  policyBackedIdps {\n    goid\n    name\n    checksum\n    authPolicyName\n    defaultRoleName\n    properties {\n      name\n      value\n    }\n  }\n  revocationCheckPolicies {\n    goid\n    name\n    checksum\n    defaultPolicy\n    defaultSuccess\n    continueOnServerUnavailable\n    revocationCheckPolicyItems {\n      type\n      url\n      allowIssuerSignature\n      nonceUsage\n      signerThumbprintSha1s\n    }\n  }\n  roles @include (if: $includeRoles){\n    goid\n    name\n    checksum\n    roleType\n    description\n    tag\n    replaceAssignees\n    userAssignees {\n      name\n      login\n      subjectDn\n      providerName\n      providerType\n    }\n    groupAssignees {\n      name\n      subjectDn\n      providerName\n      providerType\n    }\n  }\n  scheduledTasks {\n    goid\n    name\n    checksum\n    policyName\n    jobType\n    cronExpression\n    executeOnSingleNode\n    executeOnCreation\n    executionDate\n    status\n    runAsUser\n    runAsUserProviderName\n  }\n  schemas {\n    goid\n    systemId\n    checksum\n    targetNs\n    description\n    content\n  }\n  secrets {\n    goid\n    name\n    checksum\n    description\n    secret\n    secretType\n    variableReferencable\n  }\n  serverModuleFiles {\n    goid\n    name\n    checksum\n    moduleType\n    moduleSha256\n    signature\n    signerCertBase64\n    properties {\n      name\n      value\n    }\n  }\n  simpleLdapIdps {\n    goid\n    name\n    checksum\n    serverUrls\n    useSslClientAuth\n    sslClientKeyAlias\n    bindDnPatternPrefix\n    bindDnPatternSuffix\n    properties {\n      name\n      value\n    }\n  }\n  smConfigs {\n    goid\n    name\n    checksum\n    enabled\n    agentHost\n    agentIP\n    agentHostConfig\n    agentSecret\n    cryptoMode\n    ipCheckEnabled\n    updateSSOToken\n    clusterFailoverThreshold\n    nonClusterFailover\n    username\n    securePasswordName\n    properties {\n      name\n      value\n    }\n  }\n  trustedCerts {\n    goid\n    name\n    subjectDn\n    thumbprintSha1\n    checksum\n    verifyHostname\n    trustAnchor\n    trustedFor\n    revocationCheckPolicyType\n    revocationCheckPolicyName\n    notBefore\n    notAfter\n    certBase64\n  }\n}",
								"variables": "{\r\n    \"includePolicyRevision\": false,\r\n    \"includePolicyRevisions\": false,\r\n    \"includeRoles\": false\r\n}"
							}
						},
						"url": {
							"raw": "{{source_gw}}",
							"host": [
								"{{source_gw}}"
							]
						},
						"description": "# Graph Bundle All\n\nThis gets all configuration entities in one graphman query."
					},
					"response": []
				},
				{
					"name": "Source Gateway - Summary",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const summary = pm.response.json();",
									"pm.environment.set(\"source_summary\", JSON.stringify(summary.data, null, 2));"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query summary {\n    webApiServices {\n         goid name resolutionPath checksum\n    }\n    soapServices {\n         goid name resolutionPath resolvers { soapActions baseUri resolutionPath } checksum\n    }\n    internalWebApiServices {\n         goid name resolutionPath checksum\n    }\n    internalSoapServices {\n         goid resolutionPath checksum\n    }\n    encassConfigs {\n         goid guid name checksum\n    }\n    globalPolicies {\n         goid guid name tag checksum\n    }\n    backgroundTaskPolicies {\n         goid guid name checksum\n    }\n    policyFragments {\n         goid guid name checksum\n    }\n\n    activeConnectors {\n         goid name checksum\n    }\n    cassandraConnections {\n         goid name checksum\n    }\n    clusterProperties {\n         goid name checksum\n    }\n    dtds {\n         goid systemId checksum\n    }\n    emailListeners {\n         goid name checksum\n    }\n    fips {\n         goid name checksum\n    }\n    fipGroups {\n         goid name providerName checksum\n    }\n    fipUsers {\n         goid name providerName checksum\n    }\n    internalDtds {\n         goid systemId checksum\n    }\n    internalGroups {\n         goid name checksum\n    }\n    internalSchemas {\n         goid systemId checksum\n    }\n    internalUsers {\n         goid name login checksum\n    }\n    jdbcConnections {\n         goid name checksum\n    }\n    jmsDestinations {\n         goid connectionGoid name direction providerType checksum\n    }\n    keys {\n         goid keystoreId alias checksum\n    }\n    ldapIdps {\n         goid name checksum\n    }\n    simpleLdapIdps {\n        goid name checksum\n    }\n    policyBackedIdps {\n        goid name checksum\n    }\n    federatedIdps {\n        goid name checksum\n    }\n    listenPorts {\n         goid name checksum\n    }\n    scheduledTasks {\n         goid name checksum\n    }\n    schemas {\n         goid systemId checksum\n    }\n    secrets {\n         goid name checksum\n    }\n    serverModuleFiles {\n         goid name checksum\n    }\n    smConfigs {\n         goid name checksum\n    }\n    revocationCheckPolicies {\n        goid name checksum\n    }\n    trustedCerts {\n         goid name subjectDn thumbprintSha1 checksum\n    }\n    passwordPolicies {\n        goid checksum    \n    }\n    administrativeUserAccountProperties {\n        goid name checksum\n    }\n    serviceResolutionConfigs {\n        goid checksum\n    }\n    customKeyValues {\n        goid key checksum\n    }\n    httpConfigurations {\n        goid host port protocol path checksum\n    }\n    logSinks {\n        goid name checksum\n    }\n    roles {\n        goid name checksum description tag roleType        \n    }\n    auditConfigurations {\n        goid name checksum lookupPolicyName sinkPolicyName           \n    }\n    genericEntities {\n        goid name checksum description enabled\n    }\n}",
								"variables": "{}"
							}
						},
						"url": {
							"raw": "{{source_gw}}",
							"host": [
								"{{source_gw}}"
							]
						},
						"description": "Summary of source\n\nUse as-is except for the target. This produces a summary of all the configuration."
					},
					"response": []
				},
				{
					"name": "Target Gateway - Summary",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const summary = pm.response.json();",
									"pm.environment.set(\"target_summary\", JSON.stringify(summary.data, null, 2));"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query summary {\n    webApiServices {\n         goid name resolutionPath checksum\n    }\n    soapServices {\n         goid name resolutionPath resolvers { soapActions baseUri resolutionPath } checksum\n    }\n    internalWebApiServices {\n         goid name resolutionPath checksum\n    }\n    internalSoapServices {\n         goid resolutionPath checksum\n    }\n    encassConfigs {\n         goid guid name checksum\n    }\n    globalPolicies {\n         goid guid name tag checksum\n    }\n    backgroundTaskPolicies {\n         goid guid name checksum\n    }\n    policyFragments {\n         goid guid name checksum\n    }\n\n    activeConnectors {\n         goid name checksum\n    }\n    cassandraConnections {\n         goid name checksum\n    }\n    clusterProperties {\n         goid name checksum\n    }\n    dtds {\n         goid systemId checksum\n    }\n    emailListeners {\n         goid name checksum\n    }\n    fips {\n         goid name checksum\n    }\n    fipGroups {\n         goid name providerName checksum\n    }\n    fipUsers {\n         goid name providerName checksum\n    }\n    internalDtds {\n         goid systemId checksum\n    }\n    internalGroups {\n         goid name checksum\n    }\n    internalSchemas {\n         goid systemId checksum\n    }\n    internalUsers {\n         goid name login checksum\n    }\n    jdbcConnections {\n         goid name checksum\n    }\n    jmsDestinations {\n         goid connectionGoid name direction providerType checksum\n    }\n    keys {\n        goid keystoreId alias checksum\n    }\n    ldapIdps {\n        goid name checksum\n    }\n    simpleLdapIdps {\n        goid name checksum\n    }\n    policyBackedIdps {\n        goid name checksum\n    }\n    federatedIdps {\n        goid name checksum\n    }\n    listenPorts {\n         goid name checksum\n    }\n    scheduledTasks {\n         goid name checksum\n    }\n    schemas {\n         goid systemId checksum\n    }\n    secrets {\n         goid name checksum\n    }\n    serverModuleFiles {\n         goid name checksum\n    }\n    smConfigs {\n         goid name checksum\n    }\n    revocationCheckPolicies {\n        goid name checksum\n    }\n    trustedCerts {\n         goid name subjectDn thumbprintSha1 checksum\n    }\n    passwordPolicies {\n        goid checksum    \n    }\n    administrativeUserAccountProperties {\n        goid name checksum\n    }\n    serviceResolutionConfigs {\n        goid checksum\n    }\n    customKeyValues {\n        goid key checksum\n    }\n    httpConfigurations {\n        goid host port protocol path checksum\n    }\n    logSinks {\n        goid name checksum\n    }\n    roles {\n        goid name checksum description tag roleType        \n    }\n    auditConfigurations {\n        goid name checksum lookupPolicyName sinkPolicyName           \n    }\n    genericEntities {\n        goid name checksum description enabled\n    }\n}",
								"variables": "{}"
							}
						},
						"url": {
							"raw": "{{target_gw}}",
							"host": [
								"{{target_gw}}"
							]
						},
						"description": "Summary of target\n\nUse as-is except for the target. This produces a summary of all the configuration."
					},
					"response": []
				}
			],
			"description": "# Bundles and Migration\n\nThis folder contains the creation and application of configuration bundles that are created according to different bundling strategies:\n\n1.  a service bundled with all its dependencies\n2.  services and policies in a folder and all its sub-folders\n3.  a policy bundled with all its dependencies"
		},
		{
			"name": "Config entities (CRUD)",
			"item": [
				{
					"name": "All entities",
					"item": [
						{
							"name": "Get Everything",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"eval(pm.collectionVariables.get(\"l7utils\"));",
											"const bundle = pm.response.json();",
											"if (!bundle.data) throw \"Input does not seem to be a valid response\";",
											"",
											"l7utils().normalize(bundle);",
											"pm.environment.set(\"source_bundle\", JSON.stringify(bundle, null, 2));"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query everything {\n    webApiServices {\n        goid name resolutionPath checksum \n        enabled folderPath methodsAllowed tracingEnabled wssProcessingEnabled \n        properties { name value }\n        policy { xml }\n    }\n    soapServices {\n        goid name resolutionPath resolvers { soapActions baseUri resolutionPath } checksum \n        enabled folderPath soapVersion methodsAllowed tracingEnabled wssProcessingEnabled laxResolution \n        properties { name value }\n        wsdl \n        policy { xml }\n    }\n    internalWebApiServices {\n        goid name resolutionPath checksum \n        enabled folderPath methodsAllowed tracingEnabled wssProcessingEnabled \n        properties { name value } \n        policy { xml }\n    }\n    internalSoapServices {\n        goid name resolutionPath resolvers { soapActions baseUri resolutionPath } checksum \n        enabled folderPath soapVersion methodsAllowed tracingEnabled wssProcessingEnabled laxResolution \n        properties { name value } \n        wsdl \n        policy { xml }\n    }\n    encassConfigs {\n        goid guid name checksum \n        description policyName \n        encassArgs { name type ordinal guiPrompt guiLabel } \n        encassResults{ name type } \n        properties { name value }\n    }\n    globalPolicies {\n        goid guid name tag checksum \n        folderPath \n        policy { xml }\n    }\n    backgroundTaskPolicies {\n        goid guid name checksum \n        folderPath soap \n        policy { xml }\n    }\n    policyFragments {\n        goid guid name checksum \n        folderPath soap \n        policy { xml }\n    }\n    activeConnectors {\n        goid name checksum \n        enabled connectorType hardwiredServiceName \n        properties { name value } \n        advancedProperties { name value }\n    }\n    cassandraConnections {\n        goid name checksum \n        enabled keyspace contactPoints port compression username securePasswordName sslEnabled cipherSuites \n        properties { name value }\n    }\n    clusterProperties {\n        goid name checksum \n        description hiddenProperty value\n    }\n    dtds {\n        goid systemId checksum \n        publicId description content\n    }\n    emailListeners {\n        goid name checksum \n        enabled serverType hostname port folder deleteOnReceive username password hardwiredServiceName sslEnabled pollInterval sizeLimit \n        properties { name value }\n    }\n    fips {\n        goid name checksum \n        enableCredentialTypeSaml enableCredentialTypeX509 certificateValidation \n        certificateReferences { \n             goid name subjectDn thumbprintSha1 checksum \n             verifyHostname trustAnchor trustedFor revocationCheckPolicyType \n             revocationCheckPolicy { goid name } \n             notBefore notAfter certBase64 \n        }\n    }\n    fipGroups {\n        goid name providerName checksum \n        description \n        members { \n            goid name login providerName checksum \n            subjectDn certBase64 firstName lastName email \n        }\n    }\n    fipUsers {\n        goid name login providerName checksum \n        subjectDn certBase64 firstName lastName email \n        memberOf { \n            goid name providerName checksum \n            description \n        }\n    }\n    internalDtds {\n        goid systemId checksum \n        publicId description content\n    }\n    internalGroups {\n        goid name checksum \n        description \n        members { \n            goid name login checksum \n            enabled password certBase64 firstName lastName email \n        }\n    }\n    internalSchemas {\n        goid systemId checksum \n        targetNs description content\n    }\n    internalUsers {\n         goid name login checksum \n         enabled password certBase64 firstName lastName email \n         memberOf { goid name checksum description }\n    }\n    jdbcConnections {\n         goid name checksum \n         enabled driverClass jdbcUrl username password minPoolSize maxPoolSize \n         properties { name value }\n    }\n    jmsDestinations {\n         goid connectionGoid name direction providerType checksum \n         enabled template initialContextFactoryClassname connectionFactoryName jndiUrl jndiUsername jndiPassword \n         jndiSslDetails { sslEnabled sslForAuthenticationOnly sslVerifyServerCertificate sslVerifyServerHostname sslClientKeyAlias } \n         destinationType destinationName destinationUsername destinationPassword \n         destinationSslDetails { sslEnabled sslForAuthenticationOnly sslVerifyServerCertificate sslVerifyServerHostname sslClientKeyAlias } \n         properties { name value }\n    }\n    keys {\n         goid keystoreId alias checksum \n         keyType subjectDn p12 certChain\n    }\n    \n    ldapIdps {\n        goid name checksum \n        ldapType serverUrls useSslClientAuth sslClientKeyAlias searchBase \n        writable writeBase bindDn bindPassword specifiedAttributes\n        userMappings { \n\t\t    objClass nameAttrName loginAttrName passwdAttrName \n\t\t    firstNameAttrName lastNameAttrName emailNameAttrName kerberosAttrName kerberosEnterpriseAttrName\n\t\t\t userCertAttrName passwdType { val } \n        }             \n        groupMappings { \n            objClass nameAttrName memberAttrName memberStrategy { val } \n        } \n        properties { name value } ntlmProperties{ name value }        \n    }\n    simpleLdapIdps {\n        goid name checksum \n        serverUrls useSslClientAuth sslClientKeyAlias bindDnPatternPrefix bindDnPatternSuffix properties { name value }        \n    }\n    federatedIdps {\n        goid name checksum \n        supportsSAML supportsX509 certValidation \n        trustedCerts { name subjectDn thumbprintSha1 }\n    }\n    policyBackedIdps {\n        goid name checksum \n        authPolicyName defaultRoleName properties { name value }        \n    }\n    listenPorts {\n         goid name checksum \n         enabled protocol port hardwiredServiceName enabledFeatures \n         tlsSettings { clientAuthentication keystoreId keyAlias tlsVersions cipherSuites useCipherSuitesOrder } \n         properties { name value }\n    }\n    scheduledTasks {\n         goid name checksum \n         policyName jobType cronExpression executeOnSingleNode executeOnCreation executionDate status runAsUser runAsUserProviderName\n    }\n    schemas {\n         goid systemId checksum \n         targetNs description content\n    }\n    secrets {\n         goid name checksum \n         description secret secretType variableReferencable\n    }\n    serverModuleFiles {\n        goid name checksum \n        moduleType moduleSha256 signature signerCertBase64 \n        properties { name value } \n        moduleStates { nodeId nodeName state description } \n        moduleStateSummary { state description }\n    }\n    smConfigs {\n        goid name checksum \n        enabled agentHost agentIP agentHostConfig agentSecret cryptoMode ipCheckEnabled updateSSOToken clusterFailoverThreshold nonClusterFailover username securePasswordName \n        properties { name value }\n    }\n    trustedCerts {\n         goid name subjectDn thumbprintSha1 checksum \n         verifyHostname trustAnchor trustedFor revocationCheckPolicyType \n         revocationCheckPolicy { goid name } \n         notBefore notAfter certBase64\n    }\n    revocationCheckPolicies {\n        goid\n        name\n        defaultPolicy\n        defaultSuccess\n        continueOnServerUnavailable\n        checksum         \n        revocationCheckPolicyItems  {\n            ... on RevocationCheckPolicyItem {                \n                type\n                url\n                allowIssuerSignature\n                nonceUsage\n                signerThumbprintSha1s\n            }\n        }    \n    }\n    clusterInfo {\n        name\n        nodes\n        {\n            name\n            nodeId\n            address\n            uptime\n        }\n    }\n    passwordPolicies {\n        goid\n        forcePasswordChangeNewUser\n        noRepeatingCharacters\n        minPasswordLength\n        maxPasswordLength\n        upperMinimum\n        lowerMinimum\n        numberMinimum\n        symbolMinimum\n        nonNumericMinimum\n        charDiffMinimum\n        repeatFrequency\n        passwordExpiry\n        allowableChangesPerDay\n        checksum\n    }\n    administrativeUserAccountProperties {\n        goid\n        name\n        value\n        checksum\n    }\n    serviceResolutionConfigs {\n        goid\n        resolutionPathRequired\n        resolutionPathCaseSensitive\n        useL7OriginalUrl\n        useServiceGoid\n        useSoapAction\n        useSoapBodyChildNamespace\n        checksum\n    }\n    customKeyValues {\n        goid key checksum \n        value\n    }\n    httpConfigurations {\n        goid host port protocol path checksum \n        username securePasswordName ntlmHost ntlmDomain \n        tlsVersion tlsKeyUse tlsKeystoreId tlsKeyAlias tlsCipherSuites \n        connectTimeout readTimeout followRedirects \n        proxyUse proxyConfiguration{host port username securePasswordName}\n    }\n    logSinks {\n        goid name checksum \n        description type enabled severity categories syslogHosts \n        filters{type values} \n        properties{name value}\n    }\n    roles {\n        goid name checksum\n        description tag roleType\n        userAssignees { name providerName providerType login subjectDn }\n        groupAssignees { name providerName providerType subjectDn }\n    }\n    auditConfigurations {\n        goid name checksum\n        lookupPolicyName sinkPolicyName \n        ftpConfig { host port timeout user password directory verifyServerCert security enabled }        \n    }\n    genericEntities {\n        goid name checksum \n        description enabled entityClassName valueXml\n    }\n}",
										"variables": "{}"
									}
								},
								"url": {
									"raw": "{{source_gw}}",
									"host": [
										"{{source_gw}}"
									]
								},
								"description": "# Graph Bundle All\n\nThis gets all configuration entities in one graphman query."
							},
							"response": []
						},
						{
							"name": "Config Summary",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const summary = pm.response.json();",
											"pm.environment.set(\"source_summary\", JSON.stringify(summary, null, 2));",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query summary {\n    webApiServices {\n         goid name resolutionPath checksum\n    }\n    soapServices {\n         goid name resolutionPath resolvers { soapActions baseUri resolutionPath } checksum\n    }\n    internalWebApiServices {\n         goid name resolutionPath checksum\n    }\n    internalSoapServices {\n         goid resolutionPath checksum\n    }\n    encassConfigs {\n         goid guid name checksum\n    }\n    globalPolicies {\n         goid guid name tag checksum\n    }\n    backgroundTaskPolicies {\n         goid guid name checksum\n    }\n    policyFragments {\n         goid guid name checksum\n    }\n\n    activeConnectors {\n         goid name checksum\n    }\n    cassandraConnections {\n         goid name checksum\n    }\n    clusterProperties {\n         goid name checksum\n    }\n    dtds {\n         goid systemId checksum\n    }\n    emailListeners {\n         goid name checksum\n    }\n    fips {\n         goid name checksum\n    }\n    fipGroups {\n         goid name providerName checksum\n    }\n    fipUsers {\n         goid name providerName checksum\n    }\n    internalDtds {\n         goid systemId checksum\n    }\n    internalGroups {\n         goid name checksum\n    }\n    internalSchemas {\n         goid systemId checksum\n    }\n    internalUsers {\n         goid name login checksum\n    }\n    jdbcConnections {\n         goid name checksum\n    }\n    jmsDestinations {\n         goid connectionGoid name direction providerType checksum\n    }\n    keys {\n         goid keystoreId alias checksum\n    }\n    ldaps {\n         goid name checksum\n    }\n    ldapIdps {\n        goid name checksum\n    }\n    simpleLdapIdps {\n        goid name checksum\n    }\n    policyBackedIdps {\n        goid name checksum\n    }\n    federatedIdps {\n        goid name checksum\n    }\n    listenPorts {\n         goid name checksum\n    }\n    scheduledTasks {\n         goid name checksum\n    }\n    schemas {\n         goid systemId checksum\n    }\n    secrets {\n         goid name checksum\n    }\n    serverModuleFiles {\n         goid name checksum\n    }\n    smConfigs {\n         goid name checksum\n    }\n    trustedCerts {\n         goid name subjectDn thumbprintSha1 checksum\n    }\n    revocationCheckPolicies {\n        goid name checksum\n    }\n    passwordPolicies {\n        goid checksum    \n    }\n    administrativeUserAccountProperties {\n        goid name checksum\n    }\n    serviceResolutionConfigs {\n        goid checksum\n    }\n    customKeyValues {\n        goid key checksum\n    }\n    httpConfigurations {\n        goid host port protocol path checksum\n    }\n    logSinks {\n        goid name checksum\n    }\n    roles {\n        goid name checksum description tag roleType        \n    }\n    auditConfigurations {\n        goid name checksum lookupPolicyName sinkPolicyName           \n    }\n    genericEntities {\n        goid name checksum description enabled\n    }\n}",
										"variables": "{}"
									}
								},
								"url": {
									"raw": "{{source_gw}}",
									"host": [
										"{{source_gw}}"
									]
								},
								"description": "Summary of source\n\nUse as-is except for the target. This produces a summary of all the configuration."
							},
							"response": []
						}
					]
				},
				{
					"name": "Active Connectors",
					"item": [
						{
							"name": "Mutations",
							"item": [
								{
									"name": "Set Active Connectors",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation setActiveConnectors (\n    $secrets: [SecretInput!]!,\n    $activeConnectors: [ActiveConnectorInput!]!,    \n    $webApiServices: [WebApiServiceInput!]!) {\n    setSecrets (input: $secrets) {\n        detailedStatus {\n            action status description \n            source {name value} \n            target {name value}\n        }\n    }\n    setWebApiServices(input: $webApiServices) {\n        detailedStatus {\n            action status description \n            source {name value} \n            target {name value}\n        }\n    }\n    setActiveConnectors (input: $activeConnectors) {\n        detailedStatus {\n            action status description \n            source {name value} \n            target {name value}\n        }\n    }\n}",
												"variables": "{\n  \"activeConnectors\": [\n    {\n      \"name\": \"custom-kafka-producer\",\n      \"enabled\": true,\n      \"connectorType\": \"KAFKA\",\n      \"properties\": [\n        {\n          \"name\": \"privateKeyAlias\",\n          \"value\": \"some-key\"\n        },\n        {\n          \"name\": \"producer.idempotence\",\n          \"value\": \"true\"\n        },\n        {\n          \"name\": \"bootstrapServers\",\n          \"value\": \"some-host,some-other-host\"\n        },\n        {\n          \"name\": \"producer.retries\",\n          \"value\": \"\"\n        },\n        {\n          \"name\": \"role\",\n          \"value\": \"producer\"\n        },\n        {\n          \"name\": \"enableTls\",\n          \"value\": \"true\"\n        },\n        {\n          \"name\": \"keyStoreGoid\",\n          \"value\": \"00000000000000000000000000000002\"\n        },\n        {\n          \"name\": \"producer.acknowledgement\",\n          \"value\": \"all\"\n        },\n        {\n          \"name\": \"tlsVersion\",\n          \"value\": \"TLSv1.2\"\n        },\n        {\n          \"name\": \"tlsCipherSuites\",\n          \"value\": \"TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDH_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDH_RSA_WITH_AES_256_GCM_SHA384,TLS_DHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDH_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDH_RSA_WITH_AES_128_GCM_SHA256,TLS_DHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384,TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256,TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256,TLS_DHE_RSA_WITH_AES_256_CBC_SHA256,TLS_DHE_RSA_WITH_AES_128_CBC_SHA256,TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA384,TLS_ECDH_RSA_WITH_AES_256_CBC_SHA384,TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA256,TLS_ECDH_RSA_WITH_AES_128_CBC_SHA256,TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA,TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA,TLS_DHE_RSA_WITH_AES_256_CBC_SHA,TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA,TLS_ECDH_RSA_WITH_AES_256_CBC_SHA,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA,TLS_DHE_RSA_WITH_AES_128_CBC_SHA,TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA,TLS_ECDH_RSA_WITH_AES_128_CBC_SHA,TLS_RSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_128_GCM_SHA256,TLS_RSA_WITH_AES_256_CBC_SHA256,TLS_RSA_WITH_AES_128_CBC_SHA256,TLS_RSA_WITH_AES_256_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA\"\n        },\n        {\n          \"name\": \"username\",\n          \"value\": \"some-user\"\n        },\n        {\n          \"name\": \"authType\",\n          \"value\": \"PLAIN\"\n        },\n        {\n          \"name\": \"securePasswordName\",\n          \"value\": \"some-pwd\"\n        }\n      ],\n      \"advancedProperties\": [\n        {\n          \"name\": \"some-prop\",\n          \"value\": \"some-value\"\n        }\n      ]\n    },\n    {\n      \"name\": \"custom-mq-inbound-connection\",\n      \"enabled\": true,\n      \"connectorType\": \"MQ_NATIVE\",\n      \"hardwiredServiceName\": \"some-backend\",\n      \"properties\": [\n        {\n          \"name\": \"inboundAcknowledgementType\",\n          \"value\": \"ON_COMPLETION\"\n        },\n        {\n          \"name\": \"isInbound\",\n          \"value\": \"true\"\n        },\n        {\n          \"name\": \"isSslKeystoreUsed\",\n          \"value\": \"true\"\n        },\n        {\n          \"name\": \"inboundFailedQueueName\",\n          \"value\": \"some-failure-queue\"\n        },\n        {\n          \"name\": \"isCopyCorrelationIdFromRequest\",\n          \"value\": \"false\"\n        },\n        {\n          \"name\": \"channel\",\n          \"value\": \"SYSTEM.DEF.SVRCONN\"\n        },\n        {\n          \"name\": \"requestSizeLimit\",\n          \"value\": \"2048\"\n        },\n        {\n          \"name\": \"targetQueueName\",\n          \"value\": \"some-queue\"\n        },\n        {\n          \"name\": \"inboundGetMessageOptions\",\n          \"value\": \"5678\"\n        },\n        {\n          \"name\": \"inboundIsReplyQueuePutMessageOptionsUsed\",\n          \"value\": \"true\"\n        },\n        {\n          \"name\": \"inboundIsGetMessageOptionsUsed\",\n          \"value\": \"true\"\n        },\n        {\n          \"name\": \"queueManagerName\",\n          \"value\": \"some-queue-manager\"\n        },\n        {\n          \"name\": \"isSslEnabled\",\n          \"value\": \"true\"\n        },\n        {\n          \"name\": \"inboundIsFailedQueuePutMessageOptionsUsed\",\n          \"value\": \"true\"\n        },\n        {\n          \"name\": \"replyType\",\n          \"value\": \"REPLY_SPECIFIED_QUEUE\"\n        },\n        {\n          \"name\": \"specifiedReplyQueueName\",\n          \"value\": \"some-reply-queue\"\n        },\n        {\n          \"name\": \"numberOfSacToCreate\",\n          \"value\": \"12\"\n        },\n        {\n          \"name\": \"contentType\",\n          \"value\": \"application/x-www-form-urlencoded\"\n        },\n        {\n          \"name\": \"cipherSuite\",\n          \"value\": \"TLS_DHE_RSA_WITH_AES_128_CBC_SHA\"\n        },\n        {\n          \"name\": \"hostName\",\n          \"value\": \"some-host\"\n        },\n        {\n          \"name\": \"port\",\n          \"value\": \"1234\"\n        },\n        {\n          \"name\": \"inboundIsFailedQueueUsed\",\n          \"value\": \"true\"\n        },\n        {\n          \"name\": \"inboundIsOpenOptionsUsed\",\n          \"value\": \"true\"\n        },\n        {\n          \"name\": \"isQueueCredentialRequired\",\n          \"value\": \"true\"\n        },\n        {\n          \"name\": \"outboundIsReplyQueueGetMessageOptionsUsed\",\n          \"value\": \"false\"\n        },\n        {\n          \"name\": \"inboundOpenOptions\",\n          \"value\": \"1234\"\n        },\n        {\n          \"name\": \"inboundReplyQueuePutMessageOptions\",\n          \"value\": \"2345\"\n        },\n        {\n          \"name\": \"username\",\n          \"value\": \"some-user\"\n        },\n        {\n          \"name\": \"inboundFailedQueuePutMessageOptions\",\n          \"value\": \"1234\"\n        },\n        {\n          \"name\": \"securePasswordName\",\n          \"value\": \"some-pwd\"\n        }\n      ],\n      \"advancedProperties\": []\n    },\n    {\n      \"name\": \"custom-mq-outbound-connection\",\n      \"enabled\": true,\n      \"connectorType\": \"MQ_NATIVE\",\n      \"properties\": [\n        {\n          \"name\": \"isInbound\",\n          \"value\": \"false\"\n        },\n        {\n          \"name\": \"isSslKeystoreUsed\",\n          \"value\": \"true\"\n        },\n        {\n          \"name\": \"outboundReplyQueueGetMessageOptions\",\n          \"value\": \"1234\"\n        },\n        {\n          \"name\": \"isCopyCorrelationIdFromRequest\",\n          \"value\": \"true\"\n        },\n        {\n          \"name\": \"channel\",\n          \"value\": \"SYSTEM.DEF.SVRCONN\"\n        },\n        {\n          \"name\": \"targetQueueName\",\n          \"value\": \"some-queue\"\n        },\n        {\n          \"name\": \"inboundIsReplyQueuePutMessageOptionsUsed\",\n          \"value\": \"false\"\n        },\n        {\n          \"name\": \"inboundIsGetMessageOptionsUsed\",\n          \"value\": \"false\"\n        },\n        {\n          \"name\": \"queueManagerName\",\n          \"value\": \"some-queue-manager\"\n        },\n        {\n          \"name\": \"isSslEnabled\",\n          \"value\": \"true\"\n        },\n        {\n          \"name\": \"inboundIsFailedQueuePutMessageOptionsUsed\",\n          \"value\": \"false\"\n        },\n        {\n          \"name\": \"outboundMessageFormat\",\n          \"value\": \"AUTOMATIC\"\n        },\n        {\n          \"name\": \"outboundConnectionPoolMaxIdle\",\n          \"value\": \"5\"\n        },\n        {\n          \"name\": \"replyType\",\n          \"value\": \"REPLY_SPECIFIED_QUEUE\"\n        },\n        {\n          \"name\": \"specifiedReplyQueueName\",\n          \"value\": \"some-reply-queue\"\n        },\n        {\n          \"name\": \"cipherSuite\",\n          \"value\": \"TLS_AES_256_GCM_SHA384\"\n        },\n        {\n          \"name\": \"outboundConnectionPoolMaxWait\",\n          \"value\": \"1\"\n        },\n        {\n          \"name\": \"hostName\",\n          \"value\": \"some-host\"\n        },\n        {\n          \"name\": \"port\",\n          \"value\": \"1234\"\n        },\n        {\n          \"name\": \"sslKeystoreAlias\",\n          \"value\": \"ssl\"\n        },\n        {\n          \"name\": \"outboundIsTemplateQueue\",\n          \"value\": \"false\"\n        },\n        {\n          \"name\": \"inboundIsOpenOptionsUsed\",\n          \"value\": \"false\"\n        },\n        {\n          \"name\": \"isQueueCredentialRequired\",\n          \"value\": \"true\"\n        },\n        {\n          \"name\": \"outboundIsReplyQueueGetMessageOptionsUsed\",\n          \"value\": \"true\"\n        },\n        {\n          \"name\": \"sslKeystoreId\",\n          \"value\": \"00000000000000000000000000000002\"\n        },\n        {\n          \"name\": \"outboundConnectionPoolMaxActive\",\n          \"value\": \"10\"\n        },\n        {\n          \"name\": \"username\",\n          \"value\": \"some-user\"\n        },\n        {\n          \"name\": \"securePasswordName\",\n          \"value\": \"some-pwd\"\n        }\n      ],\n      \"advancedProperties\": []\n    },\n    {\n      \"name\": \"custom-sftp-polling-listener\",\n      \"enabled\": true,\n      \"connectorType\": \"SFTP_POLLING_LISTENER\",\n      \"hardwiredServiceName\": \"some-backend\",\n      \"properties\": [\n        {\n          \"name\": \"contentType\",\n          \"value\": \"application/json; charset=utf-8\"\n        },\n        {\n          \"name\": \"deleteOnReceive\",\n          \"value\": \"true\"\n        },\n        {\n          \"name\": \"pollInterval\",\n          \"value\": \"160\"\n        },\n        {\n          \"name\": \"directory\",\n          \"value\": \"some-directory\"\n        },\n        {\n          \"name\": \"host\",\n          \"value\": \"some-host\"\n        },\n        {\n          \"name\": \"port\",\n          \"value\": \"22\"\n        },\n        {\n          \"name\": \"requestSizeLimit\",\n          \"value\": \"2048\"\n        },\n        {\n          \"name\": \"fileNamePattern\",\n          \"value\": \"some-file-filter\"\n        },\n        {\n          \"name\": \"username\",\n          \"value\": \"some-user\"\n        },\n        {\n          \"name\": \"useDefaultKexAlgorithms\",\n          \"value\": \"true\"\n        },\n        {\n          \"name\": \"enableRespMessages\",\n          \"value\": \"true\"\n        },\n        {\n          \"name\": \"securePasswordKeyName\",\n          \"value\": \"some-pwd\"\n        }\n      ],\n      \"advancedProperties\": [\n        {\n          \"name\": \"some-prop\",\n          \"value\": \"some-value\"\n        }\n      ]\n    },\n    {\n      \"name\": \"some-kafka-producer\",\n      \"enabled\": true,\n      \"connectorType\": \"KAFKA\",\n      \"properties\": [\n        {\n          \"name\": \"producer.idempotence\",\n          \"value\": \"false\"\n        },\n        {\n          \"name\": \"bootstrapServers\",\n          \"value\": \"some-host,some-other-host\"\n        },\n        {\n          \"name\": \"enableTls\",\n          \"value\": \"false\"\n        },\n        {\n          \"name\": \"keyStoreGoid\",\n          \"value\": \"0000000000000000ffffffffffffffff\"\n        },\n        {\n          \"name\": \"producer.retries\",\n          \"value\": \"\"\n        },\n        {\n          \"name\": \"role\",\n          \"value\": \"producer\"\n        },\n        {\n          \"name\": \"producer.acknowledgement\",\n          \"value\": \"0\"\n        },\n        {\n          \"name\": \"username\",\n          \"value\": \"\"\n        }\n      ]\n    },\n    {\n      \"name\": \"some-mq-inbound-connection\",\n      \"enabled\": true,\n      \"connectorType\": \"MQ_NATIVE\",\n      \"properties\": [\n        {\n          \"name\": \"inboundAcknowledgementType\",\n          \"value\": \"AUTOMATIC\"\n        },\n        {\n          \"name\": \"isInbound\",\n          \"value\": \"true\"\n        },\n        {\n          \"name\": \"hostName\",\n          \"value\": \"some-host\"\n        },\n        {\n          \"name\": \"port\",\n          \"value\": \"1234\"\n        },\n        {\n          \"name\": \"inboundIsFailedQueueUsed\",\n          \"value\": \"false\"\n        },\n        {\n          \"name\": \"isCopyCorrelationIdFromRequest\",\n          \"value\": \"true\"\n        },\n        {\n          \"name\": \"channel\",\n          \"value\": \"SYSTEM.DEF.SVRCONN\"\n        },\n        {\n          \"name\": \"inboundIsOpenOptionsUsed\",\n          \"value\": \"false\"\n        },\n        {\n          \"name\": \"targetQueueName\",\n          \"value\": \"some-queue\"\n        },\n        {\n          \"name\": \"inboundIsReplyQueuePutMessageOptionsUsed\",\n          \"value\": \"false\"\n        },\n        {\n          \"name\": \"isQueueCredentialRequired\",\n          \"value\": \"false\"\n        },\n        {\n          \"name\": \"inboundIsGetMessageOptionsUsed\",\n          \"value\": \"false\"\n        },\n        {\n          \"name\": \"queueManagerName\",\n          \"value\": \"some-queue-manager\"\n        },\n        {\n          \"name\": \"outboundIsReplyQueueGetMessageOptionsUsed\",\n          \"value\": \"false\"\n        },\n        {\n          \"name\": \"isSslEnabled\",\n          \"value\": \"false\"\n        },\n        {\n          \"name\": \"inboundIsFailedQueuePutMessageOptionsUsed\",\n          \"value\": \"false\"\n        },\n        {\n          \"name\": \"replyType\",\n          \"value\": \"REPLY_AUTOMATIC\"\n        }\n      ],\n      \"advancedProperties\": []\n    },\n    {\n      \"name\": \"some-mq-outbound-connection\",\n      \"enabled\": true,\n      \"connectorType\": \"MQ_NATIVE\",\n      \"properties\": [\n        {\n          \"name\": \"isInbound\",\n          \"value\": \"false\"\n        },\n        {\n          \"name\": \"hostName\",\n          \"value\": \"some-host\"\n        },\n        {\n          \"name\": \"port\",\n          \"value\": \"1234\"\n        },\n        {\n          \"name\": \"channel\",\n          \"value\": \"SYSTEM.DEF.SVRCONN\"\n        },\n        {\n          \"name\": \"outboundIsTemplateQueue\",\n          \"value\": \"false\"\n        },\n        {\n          \"name\": \"inboundIsOpenOptionsUsed\",\n          \"value\": \"false\"\n        },\n        {\n          \"name\": \"targetQueueName\",\n          \"value\": \"some-queue\"\n        },\n        {\n          \"name\": \"inboundIsReplyQueuePutMessageOptionsUsed\",\n          \"value\": \"false\"\n        },\n        {\n          \"name\": \"isQueueCredentialRequired\",\n          \"value\": \"false\"\n        },\n        {\n          \"name\": \"inboundIsGetMessageOptionsUsed\",\n          \"value\": \"false\"\n        },\n        {\n          \"name\": \"queueManagerName\",\n          \"value\": \"some-queue-manager\"\n        },\n        {\n          \"name\": \"outboundIsReplyQueueGetMessageOptionsUsed\",\n          \"value\": \"false\"\n        },\n        {\n          \"name\": \"isSslEnabled\",\n          \"value\": \"false\"\n        },\n        {\n          \"name\": \"inboundIsFailedQueuePutMessageOptionsUsed\",\n          \"value\": \"false\"\n        },\n        {\n          \"name\": \"outboundMessageFormat\",\n          \"value\": \"AUTOMATIC\"\n        },\n        {\n          \"name\": \"replyType\",\n          \"value\": \"REPLY_NONE\"\n        }\n      ],\n      \"advancedProperties\": []\n    },\n    {\n      \"name\": \"some-sftp-polling-listener\",\n      \"enabled\": true,\n      \"connectorType\": \"SFTP_POLLING_LISTENER\",\n      \"properties\": [\n        {\n          \"name\": \"username\",\n          \"value\": \"some-user\"\n        },\n        {\n          \"name\": \"contentType\",\n          \"value\": \"text/xml; charset=utf-8\"\n        },\n        {\n          \"name\": \"deleteOnReceive\",\n          \"value\": \"false\"\n        },\n        {\n          \"name\": \"pollInterval\",\n          \"value\": \"60\"\n        },\n        {\n          \"name\": \"directory\",\n          \"value\": \"some-directory\"\n        },\n        {\n          \"name\": \"host\",\n          \"value\": \"some-host\"\n        },\n        {\n          \"name\": \"useDefaultKexAlgorithms\",\n          \"value\": \"true\"\n        },\n        {\n          \"name\": \"enableRespMessages\",\n          \"value\": \"true\"\n        },\n        {\n          \"name\": \"port\",\n          \"value\": \"22\"\n        },\n        {\n          \"name\": \"securePasswordName\",\n          \"value\": \"some-pwd\"\n        }\n      ]\n    }\n  ],\n\n  \"secrets\": [\n    {\n      \"name\": \"some-pwd\",\n      \"description\": \"some-description\",\n      \"secret\": \"JEw3RXYwMiQIdGZ0hAQpisU/ckUsmMDFIf+UzsIMi2fTuh9nEjgrdA==\",\n      \"secretType\": \"PASSWORD\",\n      \"variableReferencable\": true\n    }\n  ],\n\n  \"webApiServices\": [\n    {\n      \"name\": \"some-backend\",\n      \"resolutionPath\": \"/some-backend\",\n      \"enabled\": true,\n      \"folderPath\": \"/\",\n      \"methodsAllowed\": [\n        \"GET\",\n        \"POST\",\n        \"PUT\",\n        \"DELETE\"\n      ],\n      \"tracingEnabled\": false,\n      \"wssProcessingEnabled\": false,\n      \"policy\": {\n        \"xml\": \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?><wsp:Policy xmlns:L7p=\\\"http://www.layer7tech.com/ws/policy\\\" xmlns:wsp=\\\"http://schemas.xmlsoap.org/ws/2002/12/policy\\\"><wsp:All wsp:Usage=\\\"Required\\\"><L7p:HardcodedResponse>\\t<L7p:Base64ResponseBody stringValue=\\\"WyJoZWxsbyBmcm9tICR7c2VydmljZS5uYW1lfSJd\\\"/>\\t<L7p:ResponseContentType stringValue=\\\"application/json; charset=UTF-8\\\"/></L7p:HardcodedResponse></wsp:All></wsp:Policy>\"\n      }\n    }\n  ]\n}"
											}
										},
										"url": {
											"raw": "{{target_gw}}",
											"host": [
												"{{target_gw}}"
											]
										},
										"description": "# Set Cluster Properties\n\nSet or update existing cluster properties.\n\nInput: an array of cluster properties\n\n``` json\n{  \"input\": [{    \"name\": \"passthroughGrpcHost\",    \"value\": \"https://grpc.apis.corp.dev:7843\",    \"description\" : \"a cwp description\"  }]}\n\n```"
									},
									"response": []
								},
								{
									"name": "Delete Active Connectors",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation deleteActiveConnectors (\n    $activeConnectors: [String!]!,\n    $webApiServices: [String!]!,\n    $secrets: [String!]!) {\n    deleteActiveConnectors (names: $activeConnectors) {\n        detailedStatus {\n            action status description \n            source {name value} \n            target {name value}\n        }        \n    }\n\n    deleteWebApiServices(resolutionPaths: $webApiServices) {\n        detailedStatus {\n            action status description \n            source {name value} \n            target {name value}\n        }\n    }\n\n    deleteSecrets (names: $secrets) {\n        detailedStatus {\n            action status description \n            source {name value} \n            target {name value}\n        }\n    }\n}",
												"variables": "{\n    \"activeConnectors\": [\n        \"some-sftp-polling-listener\",\n        \"custom-sftp-polling-listener\",\n        \"some-mq-outbound-connection\",\n        \"custom-mq-outbound-connection\",\n        \"some-mq-inbound-connection\",\n        \"custom-mq-inbound-connection\",\n        \"some-kafka-producer\",\n        \"custom-kafka-producer\"\n    ],\n\n    \"secrets\": [\"some-pwd\"],\n    \"webApiServices\": [\"/some-backend\"]\n}"
											}
										},
										"url": {
											"raw": "{{target_gw}}",
											"host": [
												"{{target_gw}}"
											]
										},
										"description": "# Delete Cluster Property\n\nDelete a cluster property given its name.\n\nInput: name"
									},
									"response": []
								}
							]
						},
						{
							"name": "Queries",
							"item": [
								{
									"name": "All Active Connectors",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query activeConnectors {\n    activeConnectors {\n        goid \n        name \n        checksum \n        \n        enabled \n        connectorType \n        hardwiredServiceName \n        properties { name value } \n        advancedProperties { name value }\n    }\n}",
												"variables": "{}"
											}
										},
										"url": {
											"raw": "{{source_gw}}",
											"host": [
												"{{source_gw}}"
											]
										},
										"description": "# All Cluster Properties\n\nGet the list of cluster properties.\n\nInput: no input"
									},
									"response": []
								},
								{
									"name": "Active Connector by Name",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query activeConnectorByName ($name: String!) {\n    activeConnectorByName (name: $name) {\n        goid \n        name \n        checksum \n        \n        enabled \n        connectorType \n        hardwiredServiceName \n        properties { name value } \n        advancedProperties { name value }\n    }\n}",
												"variables": "{\n  \"name\": \"some-sftp-polling-listener\"\n}"
											}
										},
										"url": {
											"raw": "{{source_gw}}",
											"host": [
												"{{source_gw}}"
											]
										},
										"description": "# Cluster Property by Name\n\nGet the cluster property with the given name\n\nInput: name"
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Administrative User Account Properties",
					"item": [
						{
							"name": "Mutation",
							"item": [
								{
									"name": "Set Administrative User Account Properties",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation setAdministrativeUserAccountProperties ($input: [AdministrativeUserAccountPropertyInput!]!) {\n    setAdministrativeUserAccountProperties (input: $input) {\n        detailedStatus {\n            action status description\n            source {name value}\n            target {name value}\n        }        \n    }\n}",
												"variables": "{\r\n  \"input\": [{\r\n    \"name\": \"logonMaxAllowableAttempts\",\r\n    \"value\": \"17\"\r\n  },\r\n  {\r\n    \"name\": \"logonLockoutTime\",\r\n    \"value\": \"1300\"\r\n  },{\r\n    \"name\": \"logonInactivityPeriod\",\r\n    \"value\": \"20\"\r\n  },\r\n  {\r\n    \"name\": \"logonSessionExpiry\",\r\n    \"value\": \"25\"\r\n  }]\r\n}"
											}
										},
										"url": {
											"raw": "{{target_gw}}",
											"host": [
												"{{target_gw}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Query",
							"item": [
								{
									"name": "Get Administrative User Account Properties",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query administrativeUserAccountProperties {\n        administrativeUserAccountProperties {\n            goid\n            checksum\n            name\n            value\n        }\n}",
												"variables": ""
											}
										},
										"url": {
											"raw": "{{source_gw}}",
											"host": [
												"{{source_gw}}"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Audit Configuration",
					"item": [
						{
							"name": "Mutation",
							"item": [
								{
									"name": "Set Audit Configurations",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation setAuditConfigurations(\r\n  $auditConfigurations: [AuditConfigurationInput!]!\r\n  $policies: [L7PolicyInput!]!\r\n) {\r\n  # Ensure the availability of policy dependencies\r\n  setPolicies(input: $policies) {\r\n    detailedStatus {\r\n        action status description \r\n        source {name value} \r\n        target {name value}\r\n    }    \r\n  }\r\n\r\n  setAuditConfigurations(input: $auditConfigurations) {\r\n    detailedStatus {\r\n        action status description \r\n        source {name value} \r\n        target {name value}\r\n    }\r\n  }\r\n}\r\n",
												"variables": "{\r\n    \"auditConfigurations\": [\r\n        {\r\n            \"name\": \"AuditConfig\",\r\n            \"lookupPolicyName\": \"[Internal Audit Lookup Policy]\",\r\n            \"sinkPolicyName\": \"[Internal Audit Sink Policy]\",\r\n            \"ftpConfig\": {\r\n                \"host\": \"198.168.0.1\",\r\n                \"port\": 21,\r\n                \"timeout\": 10000,\r\n                \"user\": \"ftp\",\r\n                \"password\": \"JEw3RXYwMyQdwLvaammKUWiU/tPdGJaezwoJcd/QcJbQ/EzZE1CuEw==\",\r\n                \"directory\": \"RJ\",\r\n                \"verifyServerCert\": false,\r\n                \"security\": \"FTPS_EXPLICIT\",\r\n                \"enabled\": true\r\n            }\r\n        }\r\n    ],\r\n    \"policies\": [\r\n        {\r\n            \"goid\": \"2b0653ad36136127ae1c850733870616\",\r\n            \"guid\": \"3b4ffaae-2a90-4828-8558-586f5f28fbc6\",\r\n            \"name\": \"[Internal Audit Lookup Policy]\",\r\n            \"checksum\": \"659cc33d4c91afe666a86401d45d80cd7785fc50\",\r\n            \"folderPath\": \"/\",\r\n            \"soap\": false,\r\n            \"policyType\": \"FRAGMENT\",\r\n            \"policy\": {\r\n                \"xml\": \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n                                <wsp:Policy xmlns:L7p=\\\"http://www.layer7tech.com/ws/policy\\\" xmlns:wsp=\\\"http://schemas.xmlsoap.org/ws/2002/12/policy\\\">\\n                                <wsp:All wsp:Usage=\\\"Required\\\">\\n                                <L7p:CommentAssertion>\\n                                <L7p:Comment stringValue=\\\"Update this policy with your own audit lookup logic.\\\"/>\\n                                </L7p:CommentAssertion>\\n                                </wsp:All>\\n                                </wsp:Policy>\\n                            \",\r\n                \"json\": \"{\\\"All\\\":[{\\\"Comment\\\":\\\"Update this policy with your own audit lookup logic.\\\"}]}\",\r\n                \"yaml\": \"---\\nAll:\\n- Comment: \\\"Update this policy with your own audit lookup logic.\\\"\\n\",\r\n                \"code\": {\r\n                    \"All\": [\r\n                        {\r\n                            \"Comment\": \"Update this policy with your own audit lookup logic.\"\r\n                        }\r\n                    ]\r\n                }\r\n            }\r\n        },\r\n        {\r\n            \"goid\": \"2b0653ad36136127ae1c850733870603\",\r\n            \"guid\": \"002b78ae-fe54-49cb-8cdf-3d1e657273d3\",\r\n            \"name\": \"[Internal Audit Sink Policy]\",\r\n            \"checksum\": \"7d20e3e769fe22a65b4b99fea147a1b03d677389\",\r\n            \"folderPath\": \"/\",\r\n            \"soap\": false,\r\n            \"policyType\": \"FRAGMENT\",\r\n            \"policy\": {\r\n                \"xml\": \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n                                <wsp:Policy xmlns:L7p=\\\"http://www.layer7tech.com/ws/policy\\\" xmlns:wsp=\\\"http://schemas.xmlsoap.org/ws/2002/12/policy\\\">\\n                                <wsp:All wsp:Usage=\\\"Required\\\">\\n                                <L7p:CommentAssertion>\\n                                <L7p:Comment stringValue=\\\"A simple audit sink policy could convert the audit record to XML, then post it somewhere via HTTP\\\"/>\\n                                </L7p:CommentAssertion>\\n                                <L7p:CommentAssertion>\\n                                <L7p:Comment stringValue=\\\"To do the above, enable the following two assertions. Alternatively, replace them with your own custom logic.\\\"/>\\n                                </L7p:CommentAssertion>\\n                                <L7p:AuditRecordToXml>\\n                                <L7p:Enabled booleanValue=\\\"false\\\"/>\\n                                </L7p:AuditRecordToXml>\\n                                <L7p:HttpRoutingAssertion>\\n                                <L7p:Enabled booleanValue=\\\"false\\\"/>\\n                                <L7p:ProtectedServiceUrl stringValue=\\\"${gateway.audit.sink.url}\\\"/>\\n                                <L7p:RequestHeaderRules httpPassthroughRuleSet=\\\"included\\\">\\n                                <L7p:Rules httpPassthroughRules=\\\"included\\\">\\n                                <L7p:item httpPassthroughRule=\\\"included\\\">\\n                                <L7p:Name stringValue=\\\"Cookie\\\"/>\\n                                </L7p:item>\\n                                <L7p:item httpPassthroughRule=\\\"included\\\">\\n                                <L7p:Name stringValue=\\\"SOAPAction\\\"/>\\n                                </L7p:item>\\n                                </L7p:Rules>\\n                                </L7p:RequestHeaderRules>\\n                                <L7p:RequestParamRules httpPassthroughRuleSet=\\\"included\\\">\\n                                <L7p:ForwardAll booleanValue=\\\"true\\\"/>\\n                                <L7p:Rules httpPassthroughRules=\\\"included\\\"/>\\n                                </L7p:RequestParamRules>\\n                                <L7p:ResponseHeaderRules httpPassthroughRuleSet=\\\"included\\\">\\n                                <L7p:Rules httpPassthroughRules=\\\"included\\\">\\n                                <L7p:item httpPassthroughRule=\\\"included\\\">\\n                                <L7p:Name stringValue=\\\"Set-Cookie\\\"/>\\n                                </L7p:item>\\n                                </L7p:Rules>\\n                                </L7p:ResponseHeaderRules>\\n                                </L7p:HttpRoutingAssertion>\\n                                <L7p:CommentAssertion>\\n                                <L7p:Comment stringValue=\\\"The below Stop Processing causes this sink policy to always fail.\\\"/>\\n                                </L7p:CommentAssertion>\\n                                <L7p:CommentAssertion>\\n                                <L7p:Comment stringValue=\\\"This will (by default) cause the record to be saved to the internal audit database.\\\"/>\\n                                </L7p:CommentAssertion>\\n                                <L7p:CommentAssertion>\\n                                <L7p:Comment stringValue=\\\"Remove it once you have customized the audit sink policy.\\\"/>\\n                                </L7p:CommentAssertion>\\n                                <L7p:FalseAssertion/>\\n                                </wsp:All>\\n                                </wsp:Policy>\\n                            \",\r\n                \"json\": \"{\\\"All\\\":[{\\\"Comment\\\":\\\"A simple audit sink policy could convert the audit record to XML, then post it somewhere via HTTP\\\"},{\\\"Comment\\\":\\\"To do the above, enable the following two assertions. Alternatively, replace them with your own custom logic.\\\"},{\\\"AuditRecordToXml\\\":{},\\\".properties\\\":{\\\".enabled\\\":false}},{\\\"HttpRouting\\\":{\\\"protectedServiceUrl\\\":\\\"${gateway.audit.sink.url}\\\",\\\"requestHeaderRules\\\":{\\\".type\\\":\\\"httpPassthroughRuleSet\\\",\\\"rules\\\":[{\\\".type\\\":\\\"httpPassthroughRule\\\",\\\"name\\\":\\\"Cookie\\\"},{\\\".type\\\":\\\"httpPassthroughRule\\\",\\\"name\\\":\\\"SOAPAction\\\"}]},\\\"requestParamRules\\\":{\\\".type\\\":\\\"httpPassthroughRuleSet\\\",\\\"forwardAll\\\":true,\\\"rules\\\":[]},\\\"responseHeaderRules\\\":{\\\".type\\\":\\\"httpPassthroughRuleSet\\\",\\\"rules\\\":[{\\\".type\\\":\\\"httpPassthroughRule\\\",\\\"name\\\":\\\"Set-Cookie\\\"}]}},\\\".properties\\\":{\\\".enabled\\\":false}},{\\\"Comment\\\":\\\"The below Stop Processing causes this sink policy to always fail.\\\"},{\\\"Comment\\\":\\\"This will (by default) cause the record to be saved to the internal audit database.\\\"},{\\\"Comment\\\":\\\"Remove it once you have customized the audit sink policy.\\\"},{\\\"False\\\":{}}]}\",\r\n                \"yaml\": \"---\\nAll:\\n- Comment: \\\"A simple audit sink policy could convert the audit record to XML, then\\\\\\n    \\\\ post it somewhere via HTTP\\\"\\n- Comment: \\\"To do the above, enable the following two assertions. Alternatively, replace\\\\\\n    \\\\ them with your own custom logic.\\\"\\n- AuditRecordToXml: {}\\n  \\\".properties\\\":\\n    \\\".enabled\\\": false\\n- HttpRouting:\\n    protectedServiceUrl: \\\"${gateway.audit.sink.url}\\\"\\n    requestHeaderRules:\\n      \\\".type\\\": \\\"httpPassthroughRuleSet\\\"\\n      rules:\\n      - \\\".type\\\": \\\"httpPassthroughRule\\\"\\n        name: \\\"Cookie\\\"\\n      - \\\".type\\\": \\\"httpPassthroughRule\\\"\\n        name: \\\"SOAPAction\\\"\\n    requestParamRules:\\n      \\\".type\\\": \\\"httpPassthroughRuleSet\\\"\\n      forwardAll: true\\n      rules: []\\n    responseHeaderRules:\\n      \\\".type\\\": \\\"httpPassthroughRuleSet\\\"\\n      rules:\\n      - \\\".type\\\": \\\"httpPassthroughRule\\\"\\n        name: \\\"Set-Cookie\\\"\\n  \\\".properties\\\":\\n    \\\".enabled\\\": false\\n- Comment: \\\"The below Stop Processing causes this sink policy to always fail.\\\"\\n- Comment: \\\"This will (by default) cause the record to be saved to the internal audit\\\\\\n    \\\\ database.\\\"\\n- Comment: \\\"Remove it once you have customized the audit sink policy.\\\"\\n- \\\"False\\\": {}\\n\",\r\n                \"code\": {\r\n                    \"All\": [\r\n                        {\r\n                            \"Comment\": \"A simple audit sink policy could convert the audit record to XML, then post it somewhere via HTTP\"\r\n                        },\r\n                        {\r\n                            \"Comment\": \"To do the above, enable the following two assertions. Alternatively, replace them with your own custom logic.\"\r\n                        },\r\n                        {\r\n                            \"AuditRecordToXml\": {},\r\n                            \".properties\": {\r\n                                \".enabled\": false\r\n                            }\r\n                        },\r\n                        {\r\n                            \"HttpRouting\": {\r\n                                \"protectedServiceUrl\": \"${gateway.audit.sink.url}\",\r\n                                \"requestHeaderRules\": {\r\n                                    \".type\": \"httpPassthroughRuleSet\",\r\n                                    \"rules\": [\r\n                                        {\r\n                                            \".type\": \"httpPassthroughRule\",\r\n                                            \"name\": \"Cookie\"\r\n                                        },\r\n                                        {\r\n                                            \".type\": \"httpPassthroughRule\",\r\n                                            \"name\": \"SOAPAction\"\r\n                                        }\r\n                                    ]\r\n                                },\r\n                                \"requestParamRules\": {\r\n                                    \".type\": \"httpPassthroughRuleSet\",\r\n                                    \"forwardAll\": true,\r\n                                    \"rules\": []\r\n                                },\r\n                                \"responseHeaderRules\": {\r\n                                    \".type\": \"httpPassthroughRuleSet\",\r\n                                    \"rules\": [\r\n                                        {\r\n                                            \".type\": \"httpPassthroughRule\",\r\n                                            \"name\": \"Set-Cookie\"\r\n                                        }\r\n                                    ]\r\n                                }\r\n                            },\r\n                            \".properties\": {\r\n                                \".enabled\": false\r\n                            }\r\n                        },\r\n                        {\r\n                            \"Comment\": \"The below Stop Processing causes this sink policy to always fail.\"\r\n                        },\r\n                        {\r\n                            \"Comment\": \"This will (by default) cause the record to be saved to the internal audit database.\"\r\n                        },\r\n                        {\r\n                            \"Comment\": \"Remove it once you have customized the audit sink policy.\"\r\n                        },\r\n                        {\r\n                            \"False\": {}\r\n                        }\r\n                    ]\r\n                }\r\n            }\r\n        }\r\n    ]\r\n}"
											}
										},
										"url": {
											"raw": "{{target_gw}}",
											"host": [
												"{{target_gw}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Query",
							"item": [
								{
									"name": "Audit Configurations",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query auditConfigurations {\r\n  auditConfigurations {\r\n    goid\r\n    name\r\n    checksum\r\n    lookupPolicyName\r\n    sinkPolicyName\r\n    ftpConfig {\r\n      host\r\n      port\r\n      timeout\r\n      user\r\n      password\r\n      directory\r\n      verifyServerCert\r\n      security\r\n      enabled\r\n    }\r\n  }\r\n}\r\n",
												"variables": ""
											}
										},
										"url": {
											"raw": "{{source_gw}}",
											"host": [
												"{{source_gw}}"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Cassandra Connections",
					"item": [
						{
							"name": "Mutations",
							"item": [
								{
									"name": "Set Cassandra Connections",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation setCassandraConnections($cassandraConnections: [CassandraConnectionInput!]!, $secrets: [SecretInput!]!) {\n    # Ensure the availability of cassandra connection's dependencies\n    setSecrets(input: $secrets) {\n        detailedStatus {\n            action status description \n            source {name value} \n            target {name value}\n        }\n    }\n\n    setCassandraConnections (input: $cassandraConnections) {\n        detailedStatus {\n            action status description \n            source {name value} \n            target {name value}\n        }        \n    }\n}",
												"variables": "{\n  \"cassandraConnections\": [\n    {\n      \"name\": \"some-cassandra-connection\",\n      \"enabled\": true,\n      \"keyspace\": \"some-keyspace\",\n      \"contactPoints\": [\n        \"some-contact-point1\",\n        \"some-contact-point2\"\n      ],\n      \"port\": 9042,\n      \"compression\": \"NONE\",\n      \"username\": \"\",\n      \"sslEnabled\": false\n    },\n    {\n      \"name\": \"some-other-cassandra-connection\",\n      \"enabled\": true,\n      \"keyspace\": \"some-keyspace\",\n      \"contactPoints\": [\n        \"some-contact-point1\",\n        \"some-contact-point2\"\n      ],\n      \"port\": 9042,\n      \"compression\": \"LZ4\",\n      \"username\": \"some-user\",\n      \"securePasswordName\": \"some-pwd\",\n      \"sslEnabled\": true,\n      \"cipherSuites\": [\n        \"TLS_AES_128_GCM_SHA256\",\n        \"TLS_AES_256_GCM_SHA384\"\n      ],\n      \"properties\": [\n        {\n          \"name\": \"keepAlive\",\n          \"value\": \"true\"\n        },\n        {\n          \"name\": \"readTimeoutMillis\",\n          \"value\": \"12000\"\n        }\n      ]\n    }\n  ],\n\n  \"secrets\": [\n    {\n      \"name\": \"some-pwd\",\n      \"description\": \"some-description\",\n      \"secret\": \"JEw3RXYwMiQIdGZ0hAQpisU/ckUsmMDFIf+UzsIMi2fTuh9nEjgrdA==\",\n      \"secretType\": \"PASSWORD\",\n      \"variableReferencable\": true\n    }\n  ]\n}"
											}
										},
										"url": {
											"raw": "{{target_gw}}",
											"host": [
												"{{target_gw}}"
											]
										},
										"description": "# Set Cassandra Connections"
									},
									"response": []
								},
								{
									"name": "Update Cassandra Connection - Change Contact Points",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation updateCassandraConnection($cassandraConnections: [CassandraConnectionInput!]!) {\n    setCassandraConnections (input: $cassandraConnections) {\n        detailedStatus {\n            action status description \n            source {name value} \n            target {name value}\n        }\n        cassandraConnections {\n            goid\n            name\n            checksum\n\n            contactPoints # modified field\n        }\n    }\n}",
												"variables": "{\n  \"cassandraConnections\": [\n    {\n      \"goid\": \"ff70c6a442043ef12e74f4eb13ccb830\",\n      \"name\": \"some-cassandra-connection\",\n      \"checksum\": \"25dfefcbc814d1c5bde52ccc48fb2f8503693eed\",\n      \"enabled\": true,\n      \"keyspace\": \"some-keyspace\",\n      \"contactPoints\": [\n        \"some-contact-point1\",\n        \"some-contact-point2\",\n        \"some-contact-point3\"\n      ],\n      \"port\": 9042,\n      \"compression\": \"NONE\",\n      \"username\": \"\",\n      \"sslEnabled\": false\n    }\n  ]\n}"
											}
										},
										"url": {
											"raw": "{{target_gw}}",
											"host": [
												"{{target_gw}}"
											]
										},
										"description": "# Update Cassandra Connection"
									},
									"response": []
								},
								{
									"name": "Delete Cassandra Connections",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation deleteCassandraConnections(\n    $cassandraConnections: [String!]!,\n    $secrets: [String!]!) {\n    deleteCassandraConnections(names: $cassandraConnections) {\n        detailedStatus {\n            action status description \n            source {name value} \n            target {name value}\n        }\n    }\n\n    deleteSecrets (names: $secrets) {\n        detailedStatus {\n            action status description \n            source {name value} \n            target {name value}\n        }\n    }\n}",
												"variables": "{\n    \"cassandraConnections\": [\n        \"some-cassandra-connection\",\n        \"some-other-cassandra-connection\"\n    ],\n\n    \"secrets\": [\"some-pwd\"]\n}"
											}
										},
										"url": {
											"raw": "{{target_gw}}",
											"host": [
												"{{target_gw}}"
											]
										},
										"description": "# Delete Cassandra Connections"
									},
									"response": []
								}
							]
						},
						{
							"name": "Queries",
							"item": [
								{
									"name": "All Cassandra Connections",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query cassandraConnections {\n    cassandraConnections {\n        goid \n        name \n        checksum \n        \n        enabled \n        keyspace \n        contactPoints \n        port \n        compression \n        username \n        securePasswordName \n        sslEnabled \n        cipherSuites \n        properties { name value }\n    }\n}",
												"variables": "{}"
											}
										},
										"url": {
											"raw": "{{source_gw}}",
											"host": [
												"{{source_gw}}"
											]
										},
										"description": "# Retrieve All Cassandra Connections"
									},
									"response": []
								},
								{
									"name": "Cassandra Connection By Name",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query cassandraConnectionByName($name: String!) {\n    cassandraConnectionByName(name: $name) {\n        goid \n        name \n        checksum \n        \n        enabled \n        keyspace \n        contactPoints \n        port \n        compression \n        username \n        securePasswordName \n        sslEnabled \n        cipherSuites \n        properties { name value }\n    }\n}",
												"variables": "{\n    \"name\": \"some-cassandra-connection\"\n}"
											}
										},
										"url": {
											"raw": "{{source_gw}}",
											"host": [
												"{{source_gw}}"
											]
										},
										"description": "# Retrieve Cassandra Connection By Name"
									},
									"response": []
								}
							]
						}
					],
					"description": "# Cassandra Connections"
				},
				{
					"name": "Cluster Info",
					"item": [
						{
							"name": "Query",
							"item": [
								{
									"name": "Get Cluster Info",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query clusterInfo {\n    clusterInfo {\n        name\n        nodes\n        {\n            name\n            nodeId\n            address\n            uptime\n        }\n    }\n}",
												"variables": ""
											}
										},
										"url": {
											"raw": "{{source_gw}}",
											"host": [
												"{{source_gw}}"
											]
										},
										"description": "# Retrieves the gateway cluster information"
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Cluster Properties",
					"item": [
						{
							"name": "Mutations",
							"item": [
								{
									"name": "Set Cluster Properties",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation setClusterProperties ($clusterProperties: [ClusterPropertyInput!]!) {\n    setClusterProperties (input: $clusterProperties) {\n        detailedStatus {\n            action status description \n            source {name value} \n            target {name value}\n        }\n    }\n}",
												"variables": "{\n  \"clusterProperties\": [\n    {\n      \"name\": \"some-cwp\",\n      \"description\": \"some cluster property\",\n      \"hiddenProperty\": false,\n      \"value\": \"some-value\"\n    },\n    {\n      \"name\": \"some-other-cwp\",\n      \"description\": \"\",\n      \"hiddenProperty\": false,\n      \"value\": \"1234\"\n    }\n  ]\n}"
											}
										},
										"url": {
											"raw": "{{target_gw}}",
											"host": [
												"{{target_gw}}"
											]
										},
										"description": "# Set Cluster Properties\n\nSet or update existing cluster properties.\n\nInput: an array of cluster properties\n\n``` json\n{  \"input\": [{    \"name\": \"passthroughGrpcHost\",    \"value\": \"https://grpc.apis.corp.dev:7843\",    \"description\" : \"a cwp description\"  }]}\n\n```"
									},
									"response": []
								},
								{
									"name": "Delete Cluster Property",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation deleteClusterProperties ($clusterProperties: [String!]!) {\n    deleteClusterProperties (names: $clusterProperties) {\n        detailedStatus {\n            action status description \n            source {name value} \n            target {name value}\n        }\n    }\n}",
												"variables": "{\n    \"clusterProperties\": [\n        \"some-cwp\",\n        \"some-other-cwp\"\n    ]\n}"
											}
										},
										"url": {
											"raw": "{{target_gw}}",
											"host": [
												"{{target_gw}}"
											]
										},
										"description": "# Delete Cluster Property\n\nDelete a cluster property given its name.\n\nInput: name"
									},
									"response": []
								}
							]
						},
						{
							"name": "Queries",
							"item": [
								{
									"name": "All Cluster Properties",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query clusterProperties {\n    clusterProperties {\n        goid\n        name\n        checksum\n\n        description\n        hiddenProperty\n        value\n    }\n}",
												"variables": "{}"
											}
										},
										"url": {
											"raw": "{{source_gw}}",
											"host": [
												"{{source_gw}}"
											]
										},
										"description": "# All Cluster Properties\n\nGet the list of cluster properties.\n\nInput: no input"
									},
									"response": []
								},
								{
									"name": "Cluster Property by Name",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query clusterPropertyByName ($name: String!) {\n    clusterPropertyByName (name: $name) {\n        goid\n        name\n        checksum\n\n        description\n        hiddenProperty\n        value\n    }\n}",
												"variables": "{\n  \"name\": \"some-cwp\"\n}"
											}
										},
										"url": {
											"raw": "{{source_gw}}",
											"host": [
												"{{source_gw}}"
											]
										},
										"description": "# Cluster Property by Name\n\nGet the cluster property with the given name\n\nInput: name"
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Custom Key Values",
					"item": [
						{
							"name": "Mutations",
							"item": [
								{
									"name": "Set Custom Key Values",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation setCustomKeyValues ($customKeyValues: [CustomKeyValueInput!]!) {\n    setCustomKeyValues (input: $customKeyValues) {\n        detailedStatus {\n            action status description \n            source {name value} \n            target {name value}\n        }\n    }\n}",
												"variables": "{\n  \"customKeyValues\": [\n    {\n        \"goid\": \"625162d38c16b323dd0d9212a151fd13\",\n        \"key\": \"some-custom-key\",\n        \"checksum\": \"12e36fcfcc6de0bd28f87089c44fcb18184a4c27\",\n        \"value\": \"SGVsbG8gV29ybGQ=\"\n    },\n    {\n        \"goid\": \"919ea9f8edaa57670b4bc3249aa325e8\",\n        \"key\": \"some-other-custom-key\",\n        \"value\": \"SGVsbG8gVW5pdmVyc2U=\"\n    }\n  ]\n}"
											}
										},
										"url": {
											"raw": "{{target_gw}}",
											"host": [
												"{{target_gw}}"
											]
										},
										"description": "# Set Cluster Properties\n\nSet or update existing cluster properties.\n\nInput: an array of cluster properties\n\n``` json\n{  \"input\": [{    \"name\": \"passthroughGrpcHost\",    \"value\": \"https://grpc.apis.corp.dev:7843\",    \"description\" : \"a cwp description\"  }]}\n\n```"
									},
									"response": []
								},
								{
									"name": "Delete Custom Key Values",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation deleteCustomKeyValues ($customKeyValues: [String!]!) {\n    deleteCustomKeyValues (keys: $customKeyValues) {\n        detailedStatus {\n            action status description \n            source {name value} \n            target {name value}\n        }\n    }\n}",
												"variables": "{\n    \"customKeyValues\": [\n        \"some-custom-key\",\n        \"some-other-custom-key\"\n    ]\n}"
											}
										},
										"url": {
											"raw": "{{target_gw}}",
											"host": [
												"{{target_gw}}"
											]
										},
										"description": "# Delete Cluster Property\n\nDelete a cluster property given its name.\n\nInput: name"
									},
									"response": []
								}
							]
						},
						{
							"name": "Queries",
							"item": [
								{
									"name": "All Custom Key Values",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query customKeyValues {\n    customKeyValues {\n        goid\n        key\n        checksum\n        \n        value\n    }\n}",
												"variables": "{}"
											}
										},
										"url": {
											"raw": "{{source_gw}}",
											"host": [
												"{{source_gw}}"
											]
										},
										"description": "# All Cluster Properties\n\nGet the list of cluster properties.\n\nInput: no input"
									},
									"response": []
								},
								{
									"name": "Custom Key Value by Key",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query customKeyValueByKey ($key: String!) {\n    customKeyValueByKey (key: $key) {\n        goid\n        key\n        checksum\n        \n        value\n    }\n}",
												"variables": "{\n  \"key\": \"some-custom-key\"\n}"
											}
										},
										"url": {
											"raw": "{{source_gw}}",
											"host": [
												"{{source_gw}}"
											]
										},
										"description": "# Cluster Property by Name\n\nGet the cluster property with the given name\n\nInput: name"
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Email Listeners",
					"item": [
						{
							"name": "Mutation",
							"item": [
								{
									"name": "Set Email Listeners",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation setEmailListeners($emailListeners: [EmailListenerInput!]!, $webApiServices: [WebApiServiceInput!]!, $secrets: [SecretInput!]!) {\n    # Ensure the availability if EmailListener's dependencies\n    setWebApiServices(input: $webApiServices) {\n        detailedStatus {\n            action status description \n            source {name value} \n            target {name value}\n        }\n    }\n    setSecrets(input: $secrets) {\n        detailedStatus {\n            action status description \n            source {name value} \n            target {name value}\n        }\n    }\n\n\tsetEmailListeners(input: $emailListeners) {\n\t\tdetailedStatus {\n            action status description \n            source {name value} \n            target {name value}\n        }\n    }\n}",
												"variables": "{\n  \"emailListeners\": [\n    {\n      \"name\": \"some-other-email-listener\",\n      \"enabled\": false,\n      \"serverType\": \"IMAP\",\n      \"hostname\": \"some-host\",\n      \"port\": 1993,\n      \"folder\": \"some-folder\",\n      \"deleteOnReceive\": true,\n      \"username\": \"some-user\",\n      \"password\": \"${secpass.some-pwd.plaintext}\",\n      \"hardwiredServiceName\": \"some-backend-service\",\n      \"sslEnabled\": true,\n      \"pollInterval\": 120,\n      \"sizeLimit\": 2048\n    },\n    {\n      \"name\": \"some-email-listener\",\n      \"enabled\": true,\n      \"serverType\": \"POP3\",\n      \"hostname\": \"some-host\",\n      \"port\": 110,\n      \"folder\": \"INBOX\",\n      \"deleteOnReceive\": false,\n      \"username\": \"some-user\",\n      \"password\": \"JEw3RXYwMiR6pMoHCPGpb5DhQnSLlnFu7QfRDo7je27hPqgOUTUxNg==\",\n      \"sslEnabled\": false,\n      \"pollInterval\": 60\n    }\n  ],\n  \"webApiServices\": [\n    {\n      \"name\": \"some-backend-service\",\n      \"resolutionPath\": \"/some-backend\",\n      \"enabled\": true,\n      \"folderPath\": \"/\",\n      \"methodsAllowed\": [\n        \"GET\",\n        \"POST\",\n        \"PUT\",\n        \"DELETE\"\n      ],\n      \"tracingEnabled\": false,\n      \"wssProcessingEnabled\": false,\n      \"policy\": {\n        \"xml\": \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?><wsp:Policy xmlns:L7p=\\\"http://www.layer7tech.com/ws/policy\\\" xmlns:wsp=\\\"http://schemas.xmlsoap.org/ws/2002/12/policy\\\"><wsp:All wsp:Usage=\\\"Required\\\"><L7p:HardcodedResponse>\\t<L7p:Base64ResponseBody stringValue=\\\"WyJoZWxsbyBmcm9tICR7c2VydmljZS5uYW1lfSJd\\\"/>\\t<L7p:ResponseContentType stringValue=\\\"application/json; charset=UTF-8\\\"/></L7p:HardcodedResponse></wsp:All></wsp:Policy>\"\n      }\n    }\n  ],\n  \"secrets\": [\n    {\n      \"name\": \"some-pwd\",\n      \"description\": \"some-description\",\n      \"secret\": \"JEw3RXYwMiQIdGZ0hAQpisU/ckUsmMDFIf+UzsIMi2fTuh9nEjgrdA==\",\n      \"secretType\": \"PASSWORD\",\n      \"variableReferencable\": true\n    }\n  ]\n}"
											}
										},
										"url": {
											"raw": "{{target_gw}}",
											"host": [
												"{{target_gw}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Email Listeners",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation deleteEmailListeners(\n    $emailListeners: [String!]!,\n    $webApiServices: [String!]!,\n    $secrets: [String!]!) {\n    deleteEmailListeners(names: $emailListeners) {\n        detailedStatus {\n            action status description \n            source {name value} \n            target {name value}\n        }\n    }\n\n    deleteWebApiServices(resolutionPaths: $webApiServices) {\n        detailedStatus {\n            action status description \n            source {name value} \n            target {name value}\n        }\n    }\n\n    deleteSecrets (names: $secrets) {\n        detailedStatus {\n            action status description \n            source {name value} \n            target {name value}\n        }\n    }\n}",
												"variables": "{\n    \"emailListeners\": [\n        \"some-email-listener\",\n        \"some-other-email-listener\"\n    ],\n\n    \"secrets\": [\"some-pwd\"],\n    \"webApiServices\": [\"/some-backend\"]\n}"
											}
										},
										"url": {
											"raw": "{{target_gw}}",
											"host": [
												"{{target_gw}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Query",
							"item": [
								{
									"name": "All Email Listeners",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query emailListeners {\n    emailListeners {\n        goid \n        name \n        checksum \n        \n        enabled \n        serverType \n        hostname \n        port \n        folder \n        deleteOnReceive \n        username \n        password \n        hardwiredServiceName \n        sslEnabled \n        pollInterval \n        sizeLimit \n        properties{  name value }\n        \n        hardwiredService {\n            ... on PublishedService {\n            name \n            resolutionPath \n            folderPath \n            methodsAllowed \n            enabled\n            } \n        }\n    }\n}",
												"variables": ""
											}
										},
										"url": {
											"raw": "{{source_gw}}",
											"host": [
												"{{source_gw}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Email Listener By Name",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query emailListeners ($name: String!) {\n    emailListenerByName (name: $name) {\n        name\n        hostname\n        port\n        username\n        password\n        serverType\n        sslEnabled\n        deleteOnReceive\n        folder\n        pollInterval\n        checksum\n        sizeLimit\n        properties {\n            name\n            value\n        }\n        hardwiredService {\n            ... on PublishedService {\n                name \n                resolutionPath \n                folderPath \n                methodsAllowed \n                enabled\n                } \n        }\n    }\n}",
												"variables": "{\r\n  \"name\": \"some-email-listener\"\r\n}"
											}
										},
										"url": {
											"raw": "{{source_gw}}",
											"host": [
												"{{source_gw}}"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Encass Configs",
					"item": [
						{
							"name": "Mutations",
							"item": [
								{
									"name": "Set Encass Configs",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation setEncassConfigs (\n    $encassConfigs: [EncassConfigInput!]!,\n    $policyFragments: [PolicyFragmentInput!]!) {\n    # Ensure the availability of EncassConfig dependencies\n    setPolicyFragments(input: $policyFragments) {\n        detailedStatus {\n            action status description \n            source {name value} \n            target {name value}\n        }\n    }\n\n    setEncassConfigs(input: $encassConfigs) {\n        detailedStatus {\n            action status description \n            source {name value} \n            target {name value}\n        }\n    }\n}",
												"variables": "{\n  \"encassConfigs\": [\n    {\n      \"guid\": \"5047edc8-9df8-4e57-9e75-74221139c520\",\n      \"name\": \"some-encass\",\n      \"policyName\": \"some-encass-policy\",\n      \"encassArgs\": [\n        {\n          \"name\": \"some-binary-arg\",\n          \"type\": \"BINARY\",\n          \"ordinal\": 8,\n          \"guiPrompt\": false\n        },\n        {\n          \"name\": \"some-bool-arg\",\n          \"type\": \"BOOLEAN\",\n          \"ordinal\": 7,\n          \"guiPrompt\": true,\n          \"guiLabel\": \"boolean\"\n        },\n        {\n          \"name\": \"some-cert-arg\",\n          \"type\": \"CERTIFICATE\",\n          \"ordinal\": 2,\n          \"guiPrompt\": true,\n          \"guiLabel\": \"certificate\"\n        },\n        {\n          \"name\": \"some-datetime-arg\",\n          \"type\": \"DATE_TIME\",\n          \"ordinal\": 9,\n          \"guiPrompt\": false\n        },\n        {\n          \"name\": \"some-decimal-arg\",\n          \"type\": \"DECIMAL\",\n          \"ordinal\": 4,\n          \"guiPrompt\": true,\n          \"guiLabel\": \"decimal\"\n        },\n        {\n          \"name\": \"some-float-arg\",\n          \"type\": \"FLOAT\",\n          \"ordinal\": 5,\n          \"guiPrompt\": true,\n          \"guiLabel\": \"float\"\n        },\n        {\n          \"name\": \"some-int-arg\",\n          \"type\": \"INTEGER\",\n          \"ordinal\": 3,\n          \"guiPrompt\": true,\n          \"guiLabel\": \"integer\"\n        },\n        {\n          \"name\": \"some-msg-arg\",\n          \"type\": \"MESSAGE\",\n          \"ordinal\": 10,\n          \"guiPrompt\": false\n        },\n        {\n          \"name\": \"some-string-arg\",\n          \"type\": \"STRING\",\n          \"ordinal\": 1,\n          \"guiPrompt\": true,\n          \"guiLabel\": \"string arg\"\n        },\n        {\n          \"name\": \"some-xml-arg\",\n          \"type\": \"ELEMENT\",\n          \"ordinal\": 6,\n          \"guiPrompt\": false\n        }\n      ],\n      \"encassResults\": [\n        {\n          \"name\": \"some-binary-result\",\n          \"type\": \"BINARY\"\n        },\n        {\n          \"name\": \"some-blob-result\",\n          \"type\": \"BLOB\"\n        },\n        {\n          \"name\": \"some-bool-result\",\n          \"type\": \"BOOLEAN\"\n        },\n        {\n          \"name\": \"some-cert-result\",\n          \"type\": \"CERTIFICATE\"\n        },\n        {\n          \"name\": \"some-clob-result\",\n          \"type\": \"CLOB\"\n        },\n        {\n          \"name\": \"some-datetime-result\",\n          \"type\": \"DATE_TIME\"\n        },\n        {\n          \"name\": \"some-decimal-result\",\n          \"type\": \"DECIMAL\"\n        },\n        {\n          \"name\": \"some-float-result\",\n          \"type\": \"FLOAT\"\n        },\n        {\n          \"name\": \"some-int-result\",\n          \"type\": \"INTEGER\"\n        },\n        {\n          \"name\": \"some-msg-result\",\n          \"type\": \"MESSAGE\"\n        },\n        {\n          \"name\": \"some-string-result\",\n          \"type\": \"STRING\"\n        },\n        {\n          \"name\": \"some-unknown-result\",\n          \"type\": \"UNKNOWN\"\n        },\n        {\n          \"name\": \"some-xml-result\",\n          \"type\": \"ELEMENT\"\n        }\n      ],\n      \"properties\": [\n        {\n          \"name\": \"allowTracing\",\n          \"value\": \"false\"\n        },\n        {\n          \"name\": \"paletteFolder\",\n          \"value\": \"accessControl\"\n        },\n        {\n          \"name\": \"passMetricsToParent\",\n          \"value\": \"false\"\n        }\n      ]\n    },\n    {\n      \"goid\": \"ff70c6a442043ef12e74f4eb13ccb8c5\",\n      \"guid\": \"3acd132d-0b6a-4508-9a14-55b858651f2f\",\n      \"name\": \"some-other-encass\",\n      \"checksum\": \"6694860f2c0371cedc4071cf79418eaf34bf1c49\",\n      \"description\": \"some othe encass\",\n      \"policyName\": \"some-other-encass\",\n      \"encassArgs\": [\n        {\n          \"name\": \"input1\",\n          \"type\": \"STRING\",\n          \"ordinal\": 1,\n          \"guiPrompt\": true,\n          \"guiLabel\": \"Input1\"\n        },\n        {\n          \"name\": \"input2\",\n          \"type\": \"STRING\",\n          \"ordinal\": 2,\n          \"guiPrompt\": true,\n          \"guiLabel\": \"Input2\"\n        }\n      ],\n      \"encassResults\": [\n        {\n          \"name\": \"output\",\n          \"type\": \"STRING\"\n        }\n      ],\n      \"properties\": [\n        {\n          \"name\": \"allowTracing\",\n          \"value\": \"false\"\n        },\n        {\n          \"name\": \"paletteFolder\",\n          \"value\": \"policyLogic\"\n        },\n        {\n          \"name\": \"passMetricsToParent\",\n          \"value\": \"false\"\n        }\n      ]\n    }\n  ],\n  \"policyFragments\": [\n    {\n      \"guid\": \"605f1143-005c-4e19-8aa9-9238f665f1ec\",\n      \"name\": \"some-encass-policy\",\n      \"folderPath\": \"/graphman-tests/encassConfigs\",\n      \"soap\": false,\n      \"policy\": {\n        \"xml\": \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n<wsp:Policy xmlns:L7p=\\\"http://www.layer7tech.com/ws/policy\\\" xmlns:wsp=\\\"http://schemas.xmlsoap.org/ws/2002/12/policy\\\">\\n    <wsp:All wsp:Usage=\\\"Required\\\">\\n        <L7p:CommentAssertion>\\n            <L7p:Comment stringValue=\\\"Policy Fragment: some-policy\\\"/>\\n        </L7p:CommentAssertion>\\n        <L7p:SetVariable>\\n            <L7p:Base64Expression stringValue=\\\"JHtzb21lLXN0cmluZy1hcmd9\\\"/>\\n            <L7p:VariableToSet stringValue=\\\"some-string-result\\\"/>\\n        </L7p:SetVariable>\\n        <L7p:SetVariable>\\n            <L7p:Base64Expression stringValue=\\\"JHtzb21lLWludC1hcmd9\\\"/>\\n            <L7p:VariableToSet stringValue=\\\"some-int-result\\\"/>\\n        </L7p:SetVariable>\\n        <L7p:SetVariable>\\n            <L7p:Base64Expression stringValue=\\\"JHtzb21lLWRlY2ltYWwtYXJnfQ==\\\"/>\\n            <L7p:VariableToSet stringValue=\\\"some-decimal-result\\\"/>\\n        </L7p:SetVariable>\\n        <L7p:SetVariable>\\n            <L7p:Base64Expression stringValue=\\\"JHtzb21lLWZsb2F0LWFyZ30=\\\"/>\\n            <L7p:VariableToSet stringValue=\\\"some-float-result\\\"/>\\n        </L7p:SetVariable>\\n        <L7p:SetVariable>\\n            <L7p:Base64Expression stringValue=\\\"JHtzb21lLWJvb2wtYXJnfQ==\\\"/>\\n            <L7p:VariableToSet stringValue=\\\"some-bool-result\\\"/>\\n        </L7p:SetVariable>\\n        <L7p:SetVariable>\\n            <L7p:Base64Expression stringValue=\\\"JHtzb21lLWJpbmFyeS1hcmd9\\\"/>\\n            <L7p:VariableToSet stringValue=\\\"some-binary-result\\\"/>\\n        </L7p:SetVariable>\\n    </wsp:All>\\n</wsp:Policy>\\n\"\n      }\n    },\n    {\n      \"guid\": \"264423e9-0695-4dde-9eb6-4d94f51d6536\",\n      \"name\": \"some-other-encass\",\n      \"folderPath\": \"/graphman-tests/encassConfigs\",\n      \"soap\": false,\n      \"policy\": {\n        \"xml\": \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n<wsp:Policy xmlns:L7p=\\\"http://www.layer7tech.com/ws/policy\\\" xmlns:wsp=\\\"http://schemas.xmlsoap.org/ws/2002/12/policy\\\">\\n    <wsp:All wsp:Usage=\\\"Required\\\">\\n        <L7p:CommentAssertion>\\n            <L7p:Comment stringValue=\\\"Policy Fragment: some-other-encass\\\"/>\\n        </L7p:CommentAssertion>\\n        <L7p:SetVariable>\\n            <L7p:Base64Expression stringValue=\\\"JHtpbnB1dDF9JHtpbnB1dDJ9\\\"/>\\n            <L7p:VariableToSet stringValue=\\\"output\\\"/>\\n        </L7p:SetVariable>\\n    </wsp:All>\\n</wsp:Policy>\\n\"\n      }\n    }\n  ]\n}"
											}
										},
										"url": {
											"raw": "{{target_gw}}",
											"host": [
												"{{target_gw}}"
											]
										},
										"description": "# Set Encass Configs\n\nSet multiple encass configs altogether.\n\nAn encass config with the same name cannot exist on target. Assumes the policy is already present on target but can otherwise be combined in a bundled mutation.\n\nInput: sample input below:\n\n``` json\n{  \"input\": {            \"name\": \"combinevar2\",            \"policyName\": \"combinevar\",                        \"encassArgs\": [                {                    \"name\": \"a\",                    \"type\": \"STRING\",                    \"ordinal\": 1,                    \"guiLabel\": \"a\",                    \"guiPrompt\": true                },                {                    \"name\": \"b\",                    \"type\": \"STRING\",                    \"ordinal\": 2,                    \"guiLabel\": \"b\",                    \"guiPrompt\": true                }            ],            \"encassResults\": [                {                    \"name\": \"combo\",                    \"type\": \"STRING\"                }            ]        }}\n\n```"
									},
									"response": []
								},
								{
									"name": "Update Encass Config - Add New Argument",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation updateEncassConfig ($encassConfigs: [EncassConfigInput!]!) {\n    setEncassConfigs (input: $encassConfigs) {\n        detailedStatus {\n            action status description \n            source {name value} \n            target {name value}\n        }\n        encassConfigs {\n            goid\n            guid\n            name\n\n            encassArgs { name type ordinal guiPrompt guiLabel } \n        }\n    }\n}",
												"variables": "{\n  \"encassConfigs\": [\n    {\n      \"goid\": \"ff70c6a442043ef12e74f4eb13ccb8c5\",\n      \"guid\": \"3acd132d-0b6a-4508-9a14-55b858651f2f\",\n      \"name\": \"some-other-encass\",\n      \"checksum\": \"6694860f2c0371cedc4071cf79418eaf34bf1c49\",\n      \"description\": \"some othe encass\",\n      \"policyName\": \"some-other-encass\",\n      \"encassArgs\": [\n        {\n          \"name\": \"input1\",\n          \"type\": \"STRING\",\n          \"ordinal\": 1,\n          \"guiPrompt\": true,\n          \"guiLabel\": \"Input1\"\n        },\n        {\n          \"name\": \"input2\",\n          \"type\": \"STRING\",\n          \"ordinal\": 2,\n          \"guiPrompt\": true,\n          \"guiLabel\": \"Input2\"\n        },\n        {\n          \"name\": \"input3\",\n          \"type\": \"STRING\",\n          \"ordinal\": 3,\n          \"guiPrompt\": true,\n          \"guiLabel\": \"Input3\"\n        }\n      ],\n      \"encassResults\": [\n        {\n          \"name\": \"output\",\n          \"type\": \"STRING\"\n        }\n      ],\n      \"properties\": [\n        {\n          \"name\": \"allowTracing\",\n          \"value\": \"false\"\n        },\n        {\n          \"name\": \"paletteFolder\",\n          \"value\": \"policyLogic\"\n        },\n        {\n          \"name\": \"passMetricsToParent\",\n          \"value\": \"false\"\n        }\n      ]\n    }\n  ]\n}"
											}
										},
										"url": {
											"raw": "{{target_gw}}",
											"host": [
												"{{target_gw}}"
											]
										},
										"description": "# Update Encass Config\n\nUpdates an existing encapsulated assertion configuration. If the encass does not already exists, this will fail.\n\nInput: the name of the encass to update and what to update. see sample:\n\n``` json\n{    \"name\":\"combinevar2\",    \"input\": {            \"encassResults\": [                {                    \"name\": \"combo\",                    \"type\": \"STRING\"                },                {                    \"name\": \"added\",                    \"type\": \"STRING\"                }            ]        }}\n```"
									},
									"response": []
								},
								{
									"name": "Delete Encass Configs",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation deleteEncassConfigs (\n    $encassConfigs: [String!]!,\n    $policyFragments: [String!]!) {\n    deleteEncassConfigs (names: $encassConfigs) {\n        detailedStatus {\n            action status description \n            source {name value} \n            target {name value}\n        }\n    }\n    deletePolicyFragments (names: $policyFragments) {\n        detailedStatus {\n            action status description \n            source {name value} \n            target {name value}\n        }\n    }\n}",
												"variables": "{\n    \"encassConfigs\" : [\n        \"some-encass\",\n        \"some-other-encass\"\n    ],\n\n    \"policyFragments\": [\n        \"some-encass-policy\",\n        \"some-other-encass\"\n    ]\n}"
											}
										},
										"url": {
											"raw": "{{target_gw}}",
											"host": [
												"{{target_gw}}"
											]
										},
										"description": "# Delete Encass Config\n\nDeletes an encass config given its name\n\nInput: name"
									},
									"response": []
								}
							]
						},
						{
							"name": "Queries",
							"item": [
								{
									"name": "All Encass Configs",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query encassConfigs {\n    encassConfigs {\n        goid \n        guid \n        name \n        checksum \n        \n        description \n        policyName \n        encassArgs { name type ordinal guiPrompt guiLabel } \n        encassResults { name type } \n        properties{  name value }\n    }\n}",
												"variables": "{}"
											}
										},
										"url": {
											"raw": "{{source_gw}}",
											"host": [
												"{{source_gw}}"
											]
										},
										"description": "# All Encass Configs\n\nGet all encass configs\n\nInput: none"
									},
									"response": []
								},
								{
									"name": "Encass Config by Name",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query encassConfigByName ($name: String!) {\n    encassConfigByName (name: $name) {\n        goid \n        guid \n        name \n        checksum \n        \n        description \n        policyName \n        encassArgs { name type ordinal guiPrompt guiLabel } \n        encassResults { name type } \n        properties{  name value }\n    }\n}",
												"variables": "{\n    \"name\": \"some-encass\"\n}"
											}
										},
										"url": {
											"raw": "{{source_gw}}",
											"host": [
												"{{source_gw}}"
											]
										},
										"description": "# Encass Config by name\n\nGet the encapsulated assertion configuration by its name.\n\nInput: name"
									},
									"response": []
								},
								{
									"name": "Encass Config by GUID",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query encassConfigByGuid ($guid: ID!) {\n    encassConfigByGuid (guid: $guid) {\n        goid \n        guid \n        name \n        checksum \n        \n        description \n        policyName \n        encassArgs { name type ordinal guiPrompt guiLabel } \n        encassResults { name type } \n        properties{  name value }\n    }\n}",
												"variables": "{\n    \"guid\": \"5047edc8-9df8-4e57-9e75-74221139c520\"\n}"
											}
										},
										"url": {
											"raw": "{{source_gw}}",
											"host": [
												"{{source_gw}}"
											]
										},
										"description": "# Encass Config by Guid\n\nGet the encapsulated assertion configuration by its guid.\n\nInput: guid"
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Generic Entities",
					"item": [
						{
							"name": "Mutation",
							"item": [
								{
									"name": "Set Generic Entities",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation setGenericEntities($input: [GenericEntityInput!]!) {\r\n  setGenericEntities(input: $input) {\r\n   detailedStatus {\r\n        action status description \r\n        source {name value} \r\n        target {name value}\r\n    }\r\n  }\r\n}\r\n",
												"variables": "{\r\n    \"input\": [\r\n            {\r\n                \"goid\": \"d3c6d7e11c601e739c75e15f22000256\",\r\n                \"name\": \"some-generic-entity\",\r\n                \"checksum\": \"fa10da32135dc67d99c8c20a35b7b9d3cebd7e70\",\r\n                \"description\": \"some generic entity\",\r\n                \"enabled\": true,\r\n                \"entityClassName\": \"com.l7tech.external.assertions.http2.routing.model.Http2ClientConfigurationEntity\",\r\n                \"valueXml\": \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n<java version=\\\"17.0.10\\\" class=\\\"java.beans.XMLDecoder\\\">\\n <object class=\\\"com.l7tech.external.assertions.http2.routing.model.Http2ClientConfigurationEntity\\\">\\n  <void property=\\\"connectionTimeout\\\">\\n   <int>3000</int>\\n  </void>\\n  <void property=\\\"description\\\">\\n   <string>asdfadsfa</string>\\n  </void>\\n  <void property=\\\"followRedirects\\\">\\n   <boolean>true</boolean>\\n  </void>\\n  <void property=\\\"id\\\">\\n   <string>d3c6d7e11c601e739c75e15f22000256</string>\\n  </void>\\n  <void property=\\\"maxQueuedRequestPerHost\\\">\\n   <int>100</int>\\n  </void>\\n  <void property=\\\"name\\\">\\n   <string>test</string>\\n  </void>\\n  <void property=\\\"proxyHost\\\">\\n   <string>apim-proxy.lvn.broadcom.net</string>\\n  </void>\\n  <void property=\\\"proxyPasswordGoid\\\">\\n   <object class=\\\"com.l7tech.objectmodel.Goid\\\">\\n    <string>f31c810a1f4c4f1d9b234eb9d8d3ecb9</string>\\n   </object>\\n  </void>\\n  <void property=\\\"proxyPort\\\">\\n   <int>9823</int>\\n  </void>\\n  <void property=\\\"proxyUsername\\\">\\n   <string>root</string>\\n  </void>\\n  <void property=\\\"tlsCipherSuites\\\">\\n   <string>TLS_AES_256_GCM_SHA384,TLS_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256</string>\\n  </void>\\n  <void property=\\\"tlsTrustedCertGoids\\\">\\n   <array class=\\\"com.l7tech.objectmodel.Goid\\\" length=\\\"1\\\">\\n    <void index=\\\"0\\\">\\n     <object class=\\\"com.l7tech.objectmodel.Goid\\\">\\n      <string>b94a2b05fc44fc998d65af5dc7c48d73</string>\\n     </object>\\n    </void>\\n   </array>\\n  </void>\\n  <void property=\\\"tlsTrustedCertNames\\\">\\n   <array class=\\\"java.lang.String\\\" length=\\\"1\\\">\\n    <void index=\\\"0\\\">\\n     <string>some-fip-user</string>\\n    </void>\\n   </array>\\n  </void>\\n  <void property=\\\"tlsVersion\\\">\\n   <string>TLSv1.2</string>\\n  </void>\\n  <void property=\\\"valueXml\\\">\\n   <string></string>\\n  </void>\\n </object>\\n</java>\\n\"\r\n            },\r\n            {\r\n                \"goid\": \"f4f5af6065902932439323cae4006aea\",\r\n                \"name\": \"some-xmpp-inbound-generic-entity\",\r\n                \"checksum\": \"946dfb5d4a9c2fec3e52c989888daec320ebc6f6\",\r\n                \"enabled\": true,\r\n                \"entityClassName\": \"com.l7tech.external.assertions.xmppassertion.XMPPConnectionEntity\",\r\n                \"valueXml\": \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n<java version=\\\"17.0.10\\\" class=\\\"java.beans.XMLDecoder\\\">\\n <object class=\\\"com.l7tech.external.assertions.xmppassertion.XMPPConnectionEntity\\\">\\n  <void property=\\\"bindAddress\\\">\\n   <string>0.0.0.0</string>\\n  </void>\\n  <void property=\\\"messageReceivedServiceOid\\\">\\n   <object class=\\\"com.l7tech.objectmodel.Goid\\\">\\n    <string>f4f5af6065902932439323cae3ff8ea6</string>\\n   </object>\\n  </void>\\n  <void property=\\\"name\\\">\\n   <string>some-xmpp-inbound-generic-entity</string>\\n  </void>\\n  <void property=\\\"sessionTerminatedServiceOid\\\">\\n   <object class=\\\"com.l7tech.objectmodel.Goid\\\">\\n    <string>f4f5af6065902932439323cae3ff8ea6</string>\\n   </object>\\n  </void>\\n  <void property=\\\"valueXml\\\">\\n   <string></string>\\n  </void>\\n </object>\\n</java>\\n\"\r\n            },\r\n            {\r\n                \"goid\": \"f4f5af6065902932439323cae4006b02\",\r\n                \"name\": \"some-xmpp-outbound-generic-entity\",\r\n                \"checksum\": \"ceb2872f69986e5a5c2dd37c287bc17376fdea5d\",\r\n                \"enabled\": true,\r\n                \"entityClassName\": \"com.l7tech.external.assertions.xmppassertion.XMPPConnectionEntity\",\r\n                \"valueXml\": \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n<java version=\\\"17.0.10\\\" class=\\\"java.beans.XMLDecoder\\\">\\n <object class=\\\"com.l7tech.external.assertions.xmppassertion.XMPPConnectionEntity\\\">\\n  <void property=\\\"enabled\\\">\\n   <boolean>false</boolean>\\n  </void>\\n  <void property=\\\"hostname\\\">\\n   <string>some-generic-host-name</string>\\n  </void>\\n  <void property=\\\"inbound\\\">\\n   <boolean>false</boolean>\\n  </void>\\n  <void property=\\\"legacySsl\\\">\\n   <boolean>true</boolean>\\n  </void>\\n  <void property=\\\"messageReceivedServiceOid\\\">\\n   <object class=\\\"com.l7tech.objectmodel.Goid\\\">\\n    <string>f4f5af6065902932439323cae4006aa7</string>\\n   </object>\\n  </void>\\n  <void property=\\\"name\\\">\\n   <string>some-xmpp-outbound-generic-entity</string>\\n  </void>\\n  <void property=\\\"port\\\">\\n   <int>1234</int>\\n  </void>\\n  <void property=\\\"valueXml\\\">\\n   <string></string>\\n  </void>\\n </object>\\n</java>\\n\"\r\n            },\r\n            {\r\n                \"goid\": \"f4f5af6065902932439323cae4006b26\",\r\n                \"name\": \"some-websocket-inbound-generic-entity\",\r\n                \"checksum\": \"9d8ad9d79590517fec0bded84774241597cfdf6d\",\r\n                \"description\": \"some websocket inbound generic entity\",\r\n                \"enabled\": true,\r\n                \"entityClassName\": \"com.l7tech.external.assertions.websocket.WebSocketConnectionEntity\",\r\n                \"valueXml\": \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n<java version=\\\"17.0.10\\\" class=\\\"java.beans.XMLDecoder\\\">\\n <object class=\\\"com.l7tech.external.assertions.websocket.WebSocketConnectionEntity\\\">\\n  <void property=\\\"connectionPolicyGOID\\\">\\n   <object class=\\\"com.l7tech.objectmodel.Goid\\\">\\n    <string>f4f5af6065902932439323cae3ff8ea6</string>\\n   </object>\\n  </void>\\n  <void property=\\\"description\\\">\\n   <string>some websocket inbound generic entity</string>\\n  </void>\\n  <void property=\\\"id\\\">\\n   <string>f4f5af6065902932439323cae4006b26</string>\\n  </void>\\n  <void property=\\\"inboundClientAuth\\\">\\n   <object class=\\\"java.lang.Enum\\\" method=\\\"valueOf\\\">\\n    <class>com.l7tech.external.assertions.websocket.WebSocketConnectionEntity$ClientAuthType</class>\\n    <string>NONE</string>\\n   </object>\\n  </void>\\n  <void property=\\\"inboundListenPort\\\">\\n   <int>1234</int>\\n  </void>\\n  <void property=\\\"inboundMaxConnections\\\">\\n   <int>11</int>\\n  </void>\\n  <void property=\\\"inboundMaxIdleTime\\\">\\n   <int>3000</int>\\n  </void>\\n  <void property=\\\"inboundPolicyOID\\\">\\n   <object class=\\\"com.l7tech.objectmodel.Goid\\\">\\n    <string>f4f5af6065902932439323cae3ff8ea6</string>\\n   </object>\\n  </void>\\n  <void property=\\\"inboundPrivateKeyId\\\">\\n   <object class=\\\"com.l7tech.objectmodel.Goid\\\">\\n    <string>0000000000000000ffffffffffffffff</string>\\n   </object>\\n  </void>\\n  <void property=\\\"inboundSsl\\\">\\n   <boolean>true</boolean>\\n  </void>\\n  <void property=\\\"name\\\">\\n   <string>some-websocket-inbound-generic-entity</string>\\n  </void>\\n  <void property=\\\"outboundConnectionPolicyId\\\">\\n   <object class=\\\"com.l7tech.objectmodel.Goid\\\">\\n    <string>f4f5af6065902932439323cae3ff8ea6</string>\\n   </object>\\n  </void>\\n  <void property=\\\"outboundMaxIdleTime\\\">\\n   <int>3333</int>\\n  </void>\\n  <void property=\\\"outboundPolicyOID\\\">\\n   <object class=\\\"com.l7tech.objectmodel.Goid\\\">\\n    <string>f4f5af6065902932439323cae3ff8ea6</string>\\n   </object>\\n  </void>\\n  <void property=\\\"outboundSsl\\\">\\n   <boolean>true</boolean>\\n  </void>\\n  <void property=\\\"outboundUrl\\\">\\n   <string>some-websocket-url</string>\\n  </void>\\n  <void property=\\\"removePortFlag\\\">\\n   <boolean>true</boolean>\\n  </void>\\n  <void property=\\\"valueXml\\\">\\n   <string></string>\\n  </void>\\n </object>\\n</java>\\n\"\r\n            },\r\n            {\r\n                \"goid\": \"f4f5af6065902932439323cae4006b56\",\r\n                \"name\": \"some-websocket-outbound-generic-entity\",\r\n                \"checksum\": \"e41e5d0edc94aaf91458b04e3e711e9dcb9ba435\",\r\n                \"description\": \"some websocket outbound generic entity\",\r\n                \"enabled\": true,\r\n                \"entityClassName\": \"com.l7tech.external.assertions.websocket.WebSocketConnectionEntity\",\r\n                \"valueXml\": \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n<java version=\\\"17.0.10\\\" class=\\\"java.beans.XMLDecoder\\\">\\n <object class=\\\"com.l7tech.external.assertions.websocket.WebSocketConnectionEntity\\\">\\n  <void property=\\\"connectionPolicyGOID\\\">\\n   <object class=\\\"com.l7tech.objectmodel.Goid\\\" id=\\\"Goid0\\\">\\n    <string>0000000000000000ffffffffffffffff</string>\\n   </object>\\n  </void>\\n  <void property=\\\"description\\\">\\n   <string>some websocket outbound generic entity</string>\\n  </void>\\n  <void property=\\\"inboundPolicyOID\\\">\\n   <object idref=\\\"Goid0\\\"/>\\n  </void>\\n  <void property=\\\"name\\\">\\n   <string>some-websocket-outbound-generic-entity</string>\\n  </void>\\n  <void property=\\\"outboundClientAuthentication\\\">\\n   <boolean>true</boolean>\\n  </void>\\n  <void property=\\\"outboundConnectionPolicyId\\\">\\n   <object class=\\\"com.l7tech.objectmodel.Goid\\\">\\n    <string>f4f5af6065902932439323cae3ff8ea6</string>\\n   </object>\\n  </void>\\n  <void property=\\\"outboundMaxIdleTime\\\">\\n   <int>3333</int>\\n  </void>\\n  <void property=\\\"outboundOnly\\\">\\n   <boolean>true</boolean>\\n  </void>\\n  <void property=\\\"outboundPolicyOID\\\">\\n   <object class=\\\"com.l7tech.objectmodel.Goid\\\">\\n    <string>f4f5af6065902932439323cae3ff8ea6</string>\\n   </object>\\n  </void>\\n  <void property=\\\"outboundPrivateKeyId\\\">\\n   <object idref=\\\"Goid0\\\"/>\\n  </void>\\n  <void property=\\\"outboundSsl\\\">\\n   <boolean>true</boolean>\\n  </void>\\n  <void property=\\\"outboundTlsProtocols\\\">\\n   <array class=\\\"java.lang.String\\\" length=\\\"2\\\">\\n    <void index=\\\"0\\\">\\n     <string>TLSv1.3</string>\\n    </void>\\n    <void index=\\\"1\\\">\\n     <string>TLSv1.2</string>\\n    </void>\\n   </array>\\n  </void>\\n  <void property=\\\"outboundUrl\\\">\\n   <string>some-url</string>\\n  </void>\\n  <void property=\\\"valueXml\\\">\\n   <string></string>\\n  </void>\\n </object>\\n</java>\\n\"\r\n            }\r\n        ]\r\n}"
											}
										},
										"url": {
											"raw": "{{target_gw}}",
											"host": [
												"{{target_gw}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Generic Entities",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation deleteGenericEntities($input: [String!]!) {\r\n  deleteGenericEntities(names: $input) {\r\n    detailedStatus {\r\n        action status description \r\n        source {name value} \r\n        target {name value}\r\n    }\r\n  }\r\n}",
												"variables": "{\r\n    \"input\": [\r\n        \"some-generic-entity\",\r\n        \"some-xmpp-inbound-generic-entity\",\r\n        \"some-xmpp-outbound-generic-entity\",\r\n        \"some-websocket-inbound-generic-entity\",\r\n        \"some-websocket-outbound-generic-entity\"\r\n    ]\r\n}"
											}
										},
										"url": {
											"raw": "{{target_gw}}",
											"host": [
												"{{target_gw}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Query",
							"item": [
								{
									"name": "Generic Entities",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query genericEntities {\r\n  genericEntities {\r\n    goid\r\n    name\r\n    checksum\r\n    description\r\n    enabled\r\n    entityClassName    \r\n    valueXml\r\n  }\r\n}\r\n",
												"variables": ""
											}
										},
										"url": {
											"raw": "{{source_gw}}",
											"host": [
												"{{source_gw}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generic Entity By Name",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query genericEntityByName($name: String!) {\r\n  genericEntityByName(name: $name) {\r\n    goid\r\n    name\r\n    enabled\r\n    entityClassName\r\n    description\r\n    checksum\r\n    valueXml\r\n  }\r\n}\r\n\r\n",
												"variables": "{\r\n    \"name\": \"some-generic-entity\"\r\n}"
											}
										},
										"url": {
											"raw": "{{source_gw}}",
											"host": [
												"{{source_gw}}"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Global Policies",
					"item": [
						{
							"name": "Mutations",
							"item": [
								{
									"name": "Set Global Policies",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation setGlobalPolicies ($globalPolicies: [GlobalPolicyInput!]!) {\n    setGlobalPolicies (input: $globalPolicies) {\n        detailedStatus { \n            action status description \n            source {name value} \n            target {name value}\n        }\n    }\n}",
												"variables": "{\n  \"globalPolicies\": [\n    {\n      \"guid\": \"3a2ec320-fbb6-43ad-bef3-4cc303cb35b5\",\n      \"name\": \"msg-completed\",\n      \"tag\": \"message-completed\",\n      \"folderPath\": \"/graphman-tests/globalPolicies\",\n      \"policy\": {\n        \"xml\": \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n<wsp:Policy xmlns:L7p=\\\"http://www.layer7tech.com/ws/policy\\\" xmlns:wsp=\\\"http://schemas.xmlsoap.org/ws/2002/12/policy\\\">\\n    <wsp:All wsp:Usage=\\\"Required\\\">\\n        <L7p:CommentAssertion>\\n            <L7p:Comment stringValue=\\\"Policy Fragment: msg-completed\\\"/>\\n        </L7p:CommentAssertion>\\n        <L7p:AuditDetailAssertion>\\n            <L7p:Detail stringValue=\\\"hello from ${policy.name}\\\"/>\\n            <L7p:LoggingOnly booleanValue=\\\"true\\\"/>\\n        </L7p:AuditDetailAssertion>\\n        <L7p:Include>\\n            <L7p:PolicyGuid stringValue=\\\"c662b16f-5b23-49d1-b34c-5924697cf038\\\"/>\\n            <L7p:PolicyName stringValue=\\\"some-global-fragment\\\"/>\\n        </L7p:Include>\\n        <L7p:AuditDetailAssertion>\\n            <L7p:Detail stringValue=\\\"processing ${request.url} is completed\\\"/>\\n            <L7p:Level stringValue=\\\"WARNING\\\"/>\\n        </L7p:AuditDetailAssertion>\\n    </wsp:All>\\n</wsp:Policy>\\n\"\n      }\n    },\n    {\n      \"guid\": \"b8740af1-4e6f-4238-b091-d5392f41b789\",\n      \"name\": \"msg-received\",\n      \"tag\": \"message-received\",\n      \"folderPath\": \"/graphman-tests/globalPolicies\",\n      \"policy\": {\n        \"xml\": \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n<wsp:Policy xmlns:L7p=\\\"http://www.layer7tech.com/ws/policy\\\" xmlns:wsp=\\\"http://schemas.xmlsoap.org/ws/2002/12/policy\\\">\\n    <wsp:All wsp:Usage=\\\"Required\\\">\\n        <L7p:CommentAssertion>\\n            <L7p:Comment stringValue=\\\"Policy Fragment: msg-received\\\"/>\\n        </L7p:CommentAssertion>\\n        <L7p:AuditDetailAssertion>\\n            <L7p:Detail stringValue=\\\"processing ${request.url}\\\"/>\\n            <L7p:Level stringValue=\\\"WARNING\\\"/>\\n        </L7p:AuditDetailAssertion>\\n        <L7p:AuditDetailAssertion>\\n            <L7p:Detail stringValue=\\\"hello from ${policy.name}\\\"/>\\n            <L7p:LoggingOnly booleanValue=\\\"true\\\"/>\\n        </L7p:AuditDetailAssertion>\\n        <L7p:Include>\\n            <L7p:PolicyGuid stringValue=\\\"c662b16f-5b23-49d1-b34c-5924697cf038\\\"/>\\n            <L7p:PolicyName stringValue=\\\"some-global-fragment\\\"/>\\n        </L7p:Include>\\n    </wsp:All>\\n</wsp:Policy>\\n\"\n      }\n    }\n  ]\n}"
											}
										},
										"url": {
											"raw": "{{target_gw}}",
											"host": [
												"{{target_gw}}"
											]
										},
										"description": "# Set Policy Fragments\n\nSet multiple policy fragments together. The fragments may or may not exist at the destination. Each fragment is either created if it doesn't exist at target or updated if it already exists.\n\nInput: same structure as createPolicyFragment but as an array instead of a single web api service\n\n``` json\n{\n  \"input\": [\n    {\n      \"name\" : \"New policy somewhere\",\n      \"folderPath\" : \"/migrationTest\",\n      \"policy\" : {\n      \"xml\" : \"wsp:Policy...>\"\n      }\n    }\n  ]\n}\n\n```"
									},
									"response": []
								},
								{
									"name": "Delete Global Policy",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation deleteGlobalPolicies ($globalPolicies: [String!]!) {\n    deleteGlobalPolicies (tags: $globalPolicies) {\n        detailedStatus {\n            action status description \n            source {name value} \n            target {name value}\n        }\n    }\n}",
												"variables": "{\n    \"globalPolicies\" : [\n        \"message-received\", \n        \"message-completed\"\n    ]\n}"
											}
										},
										"url": {
											"raw": "{{target_gw}}",
											"host": [
												"{{target_gw}}"
											]
										},
										"description": "# Delete Policy Fragment\n\nDelete a policy fragment given its name.\n\nInput: name"
									},
									"response": []
								}
							]
						},
						{
							"name": "Queries",
							"item": [
								{
									"name": "Global Policies",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query globalPolicies {\n    globalPolicies {\n        goid \n        guid \n        name \n        tag \n        checksum \n        \n        folderPath \n        policy { xml }\n    }\n}",
												"variables": "{}"
											}
										},
										"url": {
											"raw": "{{source_gw}}",
											"host": [
												"{{source_gw}}"
											]
										},
										"description": "# Get all Policy Fragments\n\nGet all the policy fragments\n\nInput: no input"
									},
									"response": []
								},
								{
									"name": "Global Policy By Tag",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query globalPolicyByTag ($tag: String!) {\n    globalPolicyByTag (tag: $tag) {\n        goid \n        guid \n        name \n        tag \n        checksum \n        \n        folderPath \n        policy { xml }\n    }\n}",
												"variables": "{\n    \"tag\": \"message-received\"\n}"
											}
										},
										"url": {
											"raw": "{{source_gw}}",
											"host": [
												"{{source_gw}}"
											]
										},
										"description": "# Policy Fragment by Name\n\nGet a policy given its name\n\nInput: name"
									},
									"response": []
								},
								{
									"name": "Global Policies By Folder",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query globalPoliciesByFolderPath ($folderPath: String!) {\n    globalPoliciesByFolderPath (folderPath: $folderPath) {\n        goid \n        guid \n        name \n        tag \n        checksum \n        \n        folderPath \n        policy { xml }\n    }\n}",
												"variables": "{\n    \"folderPath\": \"/graphman-tests/globalPolicies\"\n}"
											}
										},
										"url": {
											"raw": "{{source_gw}}",
											"host": [
												"{{source_gw}}"
											]
										},
										"description": "# Policy Fragment by Name\n\nGet a policy given its name\n\nInput: name"
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Global Resources (Schemas and Dtds)",
					"item": [
						{
							"name": "Mutations",
							"item": [
								{
									"name": "Set Schemas",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation setSchemas ($schemas: [SchemaInput!]!) {\n    setSchemas (input: $schemas) {\n        detailedStatus {\n            action status description \n            source {name value} \n            target {name value}\n        }\n    }\n}",
												"variables": "{\n  \"schemas\": [\n    {\n      \"systemId\": \"http://warehouse.io/mywarehouse/some-schema\",\n      \"targetNs\": \"http://warehouse.acme.com/ws\",\n      \"description\": \"some schema\",\n      \"content\": \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n<s:schema elementFormDefault=\\\"qualified\\\"\\n    targetNamespace=\\\"http://warehouse.acme.com/ws\\\"\\n    xmlns:http=\\\"http://schemas.xmlsoap.org/wsdl/http/\\\"\\n    xmlns:mime=\\\"http://schemas.xmlsoap.org/wsdl/mime/\\\"\\n    xmlns:s=\\\"http://www.w3.org/2001/XMLSchema\\\"\\n    xmlns:s0=\\\"http://warehouse.acme.com/ws\\\"\\n    xmlns:soap=\\\"http://schemas.xmlsoap.org/wsdl/soap/\\\"\\n    xmlns:soapenc=\\\"http://schemas.xmlsoap.org/soap/encoding/\\\" xmlns:tm=\\\"http://microsoft.com/wsdl/mime/textMatching/\\\">\\n    <s:element name=\\\"listProducts\\\">\\n        <s:complexType/>\\n    </s:element>\\n    <s:element name=\\\"listProductsResponse\\\">\\n        <s:complexType>\\n            <s:sequence>\\n                <s:element maxOccurs=\\\"1\\\" minOccurs=\\\"0\\\"\\n                    name=\\\"listProductsResult\\\" type=\\\"s0:ArrayOfProductListHeader\\\"/>\\n            </s:sequence>\\n        </s:complexType>\\n    </s:element>\\n    <s:complexType name=\\\"ArrayOfProductListHeader\\\">\\n        <s:sequence>\\n            <s:element maxOccurs=\\\"unbounded\\\" minOccurs=\\\"0\\\"\\n                name=\\\"ProductListHeader\\\" nillable=\\\"true\\\" type=\\\"s0:ProductListHeader\\\"/>\\n        </s:sequence>\\n    </s:complexType>\\n    <s:complexType name=\\\"ProductListHeader\\\">\\n        <s:sequence>\\n            <s:element maxOccurs=\\\"1\\\" minOccurs=\\\"0\\\" name=\\\"productName\\\" type=\\\"s:string\\\"/>\\n            <s:element maxOccurs=\\\"1\\\" minOccurs=\\\"1\\\" name=\\\"productId\\\" type=\\\"s:long\\\"/>\\n        </s:sequence>\\n    </s:complexType>\\n    <s:element name=\\\"getProductDetails\\\">\\n        <s:complexType>\\n            <s:sequence>\\n                <s:element maxOccurs=\\\"1\\\" minOccurs=\\\"1\\\" name=\\\"productid\\\" type=\\\"s:long\\\"/>\\n            </s:sequence>\\n        </s:complexType>\\n    </s:element>\\n    <s:element name=\\\"getProductDetailsResponse\\\">\\n        <s:complexType>\\n            <s:sequence>\\n                <s:element maxOccurs=\\\"1\\\" minOccurs=\\\"0\\\"\\n                    name=\\\"getProductDetailsResult\\\" type=\\\"s0:ProductDetails\\\"/>\\n            </s:sequence>\\n        </s:complexType>\\n    </s:element>\\n    <s:complexType name=\\\"ProductDetails\\\">\\n        <s:complexContent mixed=\\\"false\\\">\\n            <s:extension base=\\\"s0:ProductListHeader\\\">\\n                <s:sequence>\\n                    <s:element maxOccurs=\\\"1\\\" minOccurs=\\\"0\\\"\\n                        name=\\\"description\\\" type=\\\"s:string\\\"/>\\n                    <s:element maxOccurs=\\\"1\\\" minOccurs=\\\"1\\\" name=\\\"price\\\" type=\\\"s:float\\\"/>\\n                    <s:element maxOccurs=\\\"1\\\" minOccurs=\\\"1\\\"\\n                        name=\\\"inStock\\\" type=\\\"s:boolean\\\"/>\\n                </s:sequence>\\n            </s:extension>\\n        </s:complexContent>\\n    </s:complexType>\\n    <s:element name=\\\"placeOrder\\\">\\n        <s:complexType>\\n            <s:sequence>\\n                <s:element maxOccurs=\\\"1\\\" minOccurs=\\\"1\\\" name=\\\"productid\\\" type=\\\"s:long\\\"/>\\n                <s:element maxOccurs=\\\"1\\\" minOccurs=\\\"1\\\" name=\\\"amount\\\" type=\\\"s:long\\\"/>\\n                <s:element maxOccurs=\\\"1\\\" minOccurs=\\\"1\\\" name=\\\"price\\\" type=\\\"s:float\\\"/>\\n                <s:element maxOccurs=\\\"1\\\" minOccurs=\\\"1\\\" name=\\\"accountid\\\" type=\\\"s:long\\\"/>\\n            </s:sequence>\\n        </s:complexType>\\n    </s:element>\\n    <s:element name=\\\"placeOrderResponse\\\">\\n        <s:complexType>\\n            <s:sequence>\\n                <s:element maxOccurs=\\\"1\\\" minOccurs=\\\"1\\\"\\n                    name=\\\"placeOrderResult\\\" type=\\\"s:long\\\"/>\\n            </s:sequence>\\n        </s:complexType>\\n    </s:element>\\n    <s:element name=\\\"currentOrders\\\">\\n        <s:complexType>\\n            <s:sequence>\\n                <s:element maxOccurs=\\\"1\\\" minOccurs=\\\"1\\\" name=\\\"accountid\\\" type=\\\"s:long\\\"/>\\n            </s:sequence>\\n        </s:complexType>\\n    </s:element>\\n    <s:element name=\\\"currentOrdersResponse\\\">\\n        <s:complexType>\\n            <s:sequence>\\n                <s:element maxOccurs=\\\"1\\\" minOccurs=\\\"0\\\"\\n                    name=\\\"currentOrdersResult\\\" type=\\\"s0:ArrayOfOrder\\\"/>\\n            </s:sequence>\\n        </s:complexType>\\n    </s:element>\\n    <s:complexType name=\\\"ArrayOfOrder\\\">\\n        <s:sequence>\\n            <s:element maxOccurs=\\\"unbounded\\\" minOccurs=\\\"0\\\" name=\\\"Order\\\"\\n                nillable=\\\"true\\\" type=\\\"s0:Order\\\"/>\\n        </s:sequence>\\n    </s:complexType>\\n    <s:complexType name=\\\"Order\\\">\\n        <s:sequence>\\n            <s:element maxOccurs=\\\"1\\\" minOccurs=\\\"1\\\" name=\\\"date\\\" type=\\\"s:dateTime\\\"/>\\n            <s:element maxOccurs=\\\"1\\\" minOccurs=\\\"1\\\" name=\\\"accountId\\\" type=\\\"s:long\\\"/>\\n            <s:element maxOccurs=\\\"1\\\" minOccurs=\\\"1\\\" name=\\\"productId\\\" type=\\\"s:long\\\"/>\\n            <s:element maxOccurs=\\\"1\\\" minOccurs=\\\"1\\\" name=\\\"amount\\\" type=\\\"s:long\\\"/>\\n            <s:element maxOccurs=\\\"1\\\" minOccurs=\\\"1\\\" name=\\\"price\\\" type=\\\"s:float\\\"/>\\n            <s:element maxOccurs=\\\"1\\\" minOccurs=\\\"1\\\" name=\\\"confirmationId\\\" type=\\\"s:long\\\"/>\\n        </s:sequence>\\n    </s:complexType>\\n</s:schema>\\n\"\n    },\n    {\n      \"systemId\": \"http://warehouse.io/mywarehouse/some-other-schema\",\n      \"targetNs\": \"http://warehouse.acme.com/ws\",\n      \"content\": \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n<s:schema elementFormDefault=\\\"qualified\\\"\\n    targetNamespace=\\\"http://warehouse.acme.com/ws\\\"\\n    xmlns:http=\\\"http://schemas.xmlsoap.org/wsdl/http/\\\"\\n    xmlns:mime=\\\"http://schemas.xmlsoap.org/wsdl/mime/\\\"\\n    xmlns:s=\\\"http://www.w3.org/2001/XMLSchema\\\"\\n    xmlns:s0=\\\"http://warehouse.acme.com/ws\\\"\\n    xmlns:soap=\\\"http://schemas.xmlsoap.org/wsdl/soap/\\\"\\n    xmlns:soapenc=\\\"http://schemas.xmlsoap.org/soap/encoding/\\\" xmlns:tm=\\\"http://microsoft.com/wsdl/mime/textMatching/\\\">\\n    <s:element name=\\\"listProducts\\\">\\n        <s:complexType/>\\n    </s:element>\\n    <s:element name=\\\"listProductsResponse\\\">\\n        <s:complexType>\\n            <s:sequence>\\n                <s:element maxOccurs=\\\"1\\\" minOccurs=\\\"0\\\"\\n                    name=\\\"listProductsResult\\\" type=\\\"s0:ArrayOfProductListHeader\\\"/>\\n            </s:sequence>\\n        </s:complexType>\\n    </s:element>\\n    <s:complexType name=\\\"ArrayOfProductListHeader\\\">\\n        <s:sequence>\\n            <s:element maxOccurs=\\\"unbounded\\\" minOccurs=\\\"0\\\"\\n                name=\\\"ProductListHeader\\\" nillable=\\\"true\\\" type=\\\"s0:ProductListHeader\\\"/>\\n        </s:sequence>\\n    </s:complexType>\\n    <s:complexType name=\\\"ProductListHeader\\\">\\n        <s:sequence>\\n            <s:element maxOccurs=\\\"1\\\" minOccurs=\\\"0\\\" name=\\\"productName\\\" type=\\\"s:string\\\"/>\\n            <s:element maxOccurs=\\\"1\\\" minOccurs=\\\"1\\\" name=\\\"productId\\\" type=\\\"s:long\\\"/>\\n        </s:sequence>\\n    </s:complexType>\\n    <s:element name=\\\"getProductDetails\\\">\\n        <s:complexType>\\n            <s:sequence>\\n                <s:element maxOccurs=\\\"1\\\" minOccurs=\\\"1\\\" name=\\\"productid\\\" type=\\\"s:long\\\"/>\\n            </s:sequence>\\n        </s:complexType>\\n    </s:element>\\n    <s:element name=\\\"getProductDetailsResponse\\\">\\n        <s:complexType>\\n            <s:sequence>\\n                <s:element maxOccurs=\\\"1\\\" minOccurs=\\\"0\\\"\\n                    name=\\\"getProductDetailsResult\\\" type=\\\"s0:ProductDetails\\\"/>\\n            </s:sequence>\\n        </s:complexType>\\n    </s:element>\\n    <s:complexType name=\\\"ProductDetails\\\">\\n        <s:complexContent mixed=\\\"false\\\">\\n            <s:extension base=\\\"s0:ProductListHeader\\\">\\n                <s:sequence>\\n                    <s:element maxOccurs=\\\"1\\\" minOccurs=\\\"0\\\"\\n                        name=\\\"description\\\" type=\\\"s:string\\\"/>\\n                    <s:element maxOccurs=\\\"1\\\" minOccurs=\\\"1\\\" name=\\\"price\\\" type=\\\"s:float\\\"/>\\n                    <s:element maxOccurs=\\\"1\\\" minOccurs=\\\"1\\\"\\n                        name=\\\"inStock\\\" type=\\\"s:boolean\\\"/>\\n                </s:sequence>\\n            </s:extension>\\n        </s:complexContent>\\n    </s:complexType>\\n    <s:element name=\\\"placeOrder\\\">\\n        <s:complexType>\\n            <s:sequence>\\n                <s:element maxOccurs=\\\"1\\\" minOccurs=\\\"1\\\" name=\\\"productid\\\" type=\\\"s:long\\\"/>\\n                <s:element maxOccurs=\\\"1\\\" minOccurs=\\\"1\\\" name=\\\"amount\\\" type=\\\"s:long\\\"/>\\n                <s:element maxOccurs=\\\"1\\\" minOccurs=\\\"1\\\" name=\\\"price\\\" type=\\\"s:float\\\"/>\\n                <s:element maxOccurs=\\\"1\\\" minOccurs=\\\"1\\\" name=\\\"accountid\\\" type=\\\"s:long\\\"/>\\n            </s:sequence>\\n        </s:complexType>\\n    </s:element>\\n    <s:element name=\\\"placeOrderResponse\\\">\\n        <s:complexType>\\n            <s:sequence>\\n                <s:element maxOccurs=\\\"1\\\" minOccurs=\\\"1\\\"\\n                    name=\\\"placeOrderResult\\\" type=\\\"s:long\\\"/>\\n            </s:sequence>\\n        </s:complexType>\\n    </s:element>\\n    <s:element name=\\\"currentOrders\\\">\\n        <s:complexType>\\n            <s:sequence>\\n                <s:element maxOccurs=\\\"1\\\" minOccurs=\\\"1\\\" name=\\\"accountid\\\" type=\\\"s:long\\\"/>\\n            </s:sequence>\\n        </s:complexType>\\n    </s:element>\\n    <s:element name=\\\"currentOrdersResponse\\\">\\n        <s:complexType>\\n            <s:sequence>\\n                <s:element maxOccurs=\\\"1\\\" minOccurs=\\\"0\\\"\\n                    name=\\\"currentOrdersResult\\\" type=\\\"s0:ArrayOfOrder\\\"/>\\n            </s:sequence>\\n        </s:complexType>\\n    </s:element>\\n    <s:complexType name=\\\"ArrayOfOrder\\\">\\n        <s:sequence>\\n            <s:element maxOccurs=\\\"unbounded\\\" minOccurs=\\\"0\\\" name=\\\"Order\\\"\\n                nillable=\\\"true\\\" type=\\\"s0:Order\\\"/>\\n        </s:sequence>\\n    </s:complexType>\\n    <s:complexType name=\\\"Order\\\">\\n        <s:sequence>\\n            <s:element maxOccurs=\\\"1\\\" minOccurs=\\\"1\\\" name=\\\"date\\\" type=\\\"s:dateTime\\\"/>\\n            <s:element maxOccurs=\\\"1\\\" minOccurs=\\\"1\\\" name=\\\"accountId\\\" type=\\\"s:long\\\"/>\\n            <s:element maxOccurs=\\\"1\\\" minOccurs=\\\"1\\\" name=\\\"productId\\\" type=\\\"s:long\\\"/>\\n            <s:element maxOccurs=\\\"1\\\" minOccurs=\\\"1\\\" name=\\\"amount\\\" type=\\\"s:long\\\"/>\\n            <s:element maxOccurs=\\\"1\\\" minOccurs=\\\"1\\\" name=\\\"price\\\" type=\\\"s:float\\\"/>\\n            <s:element maxOccurs=\\\"1\\\" minOccurs=\\\"1\\\" name=\\\"confirmationId\\\" type=\\\"s:long\\\"/>\\n        </s:sequence>\\n    </s:complexType>\\n</s:schema>\\n\"\n    }\n  ]\n}"
											}
										},
										"url": {
											"raw": "{{target_gw}}",
											"host": [
												"{{target_gw}}"
											]
										},
										"description": "# Set Schemas"
									},
									"response": []
								},
								{
									"name": "Set Dtds",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation setDtds ($dtds: [DtdInput!]!) {\n    setDtds (input: $dtds) {\n        detailedStatus {\n            action status description \n            source {name value} \n            target {name value}\n        }\n    }\n}",
												"variables": "{\n  \"dtds\": [\n    {\n      \"systemId\": \"http://example.org/some-dtd\",\n      \"publicId\": \"some-dtd\",\n      \"description\": \"some dtd\",\n      \"content\": \"<!DOCTYPE note\\n[\\n<!ELEMENT note (to,from,heading,body)>\\n<!ELEMENT to (#PCDATA)>\\n<!ELEMENT from (#PCDATA)>\\n<!ELEMENT heading (#PCDATA)>\\n<!ELEMENT body (#PCDATA)>\\n]>\"\n    },\n    {\n      \"systemId\": \"http://example.org/some-other-dtd\",\n      \"publicId\": \"some-other-dtd\",\n      \"description\": \"some other dtd\",\n      \"content\": \"<!DOCTYPE note\\n[\\n<!ELEMENT note (to,from,heading,body)>\\n<!ELEMENT to (#PCDATA)>\\n<!ELEMENT from (#PCDATA)>\\n<!ELEMENT heading (#PCDATA)>\\n<!ELEMENT body (#PCDATA)>\\n]>\"\n    }\n  ]\n}"
											}
										},
										"url": {
											"raw": "{{target_gw}}",
											"host": [
												"{{target_gw}}"
											]
										},
										"description": "# Set Dtds"
									},
									"response": []
								},
								{
									"name": "Delete Global Resources",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation deleteResources (\n    $schemas: [String!]!, \n    $dtds: [String!]!) {\n    deleteSchemas (systemIds: $schemas) {\n        detailedStatus {\n            action status description \n            source {name value} \n            target {name value}\n        }\n    }\n    deleteDtds (systemIds: $dtds) {\n        detailedStatus {\n            action status description \n            source {name value} \n            target {name value}\n        }\n    }\n}",
												"variables": "{\n    \"schemas\" : [\n        \"http://warehouse.io/mywarehouse/some-schema\", \n        \"http://warehouse.io/mywarehouse/some-other-schema\"\n    ],\n    \"dtds\" : [\n        \"http://example.org/some-dtd\",\n        \"http://example.org/some-other-dtd\"\n    ]\n}"
											}
										},
										"url": {
											"raw": "{{target_gw}}",
											"host": [
												"{{target_gw}}"
											]
										},
										"description": "# Delete Resource"
									},
									"response": []
								}
							]
						},
						{
							"name": "Queries",
							"item": [
								{
									"name": "All Schemas",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query schemas {\n    schemas {\n        goid \n        systemId \n        checksum \n\n        targetNs \n        description \n        content\n    }\n    internalSchemas {\n        goid \n        systemId \n        checksum \n\n        targetNs \n        description \n        content\n    }\n}",
												"variables": "{}"
											}
										},
										"url": {
											"raw": "{{source_gw}}",
											"host": [
												"{{source_gw}}"
											]
										},
										"description": "# All Schemas"
									},
									"response": []
								},
								{
									"name": "All Dtds",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query dtds {\n    dtds {\n        goid\n        systemId\n        checksum\n\n        publicId\n        description\n        content\n    }\n    internalDtds {\n        goid\n        systemId\n        checksum\n\n        publicId\n        description\n        content\n    }\n}",
												"variables": "{}"
											}
										},
										"url": {
											"raw": "{{source_gw}}",
											"host": [
												"{{source_gw}}"
											]
										},
										"description": "# Get all Dtds"
									},
									"response": []
								},
								{
									"name": "Schema by SystemID",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query schemaBySystemId ($systemId: String!) {\n    schemaBySystemId (systemId: $systemId) {\n        goid \n        systemId \n        checksum \n\n        targetNs \n        description \n        content\n    }\n}",
												"variables": "{\n    \"systemId\" : \"http://warehouse.io/mywarehouse\"\n}"
											}
										},
										"url": {
											"raw": "{{source_gw}}",
											"host": [
												"{{source_gw}}"
											]
										},
										"description": "# Get Schema by Id"
									},
									"response": []
								},
								{
									"name": "Dtd by SystemID",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query dtdBySystemId ($systemId: String!) {\n    dtdBySystemId (systemId: $systemId) {\n        goid\n        systemId\n        checksum\n\n        publicId\n        description\n        content\n    }\n}",
												"variables": "{\n    \"systemId\" : \"http://mydtdid\"\n}"
											}
										},
										"url": {
											"raw": "{{source_gw}}",
											"host": [
												"{{source_gw}}"
											]
										},
										"description": "# Get Dtd by Id"
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "HTTP Configurations",
					"item": [
						{
							"name": "Mutations",
							"item": [
								{
									"name": "Set HTTP Configurations",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation setHttpConfigurations (\n    $secrets: [SecretInput!]!,\n    $httpConfigurations: [HttpConfigurationInput!]!) {\n    # Ensure the availability of listen port dependencies\n    setSecrets (input: $secrets) {\n        detailedStatus {\n            action status description \n            source {name value} \n            target {name value}\n        }\n    }\n    setHttpConfigurations(input: $httpConfigurations) {\n        detailedStatus {\n            action status description \n            source {name value} \n            target {name value}\n        }\n    }\n}",
												"variables": "{\n  \"httpConfigurations\": [\n    {\n        \"goid\": \"fd1ee586f3501534dc2bf9c8ad5f28ee\",\n        \"host\": \"some-http-config\",\n        \"protocol\": \"ANY\",\n        \"checksum\": \"566399fb911bd7df96f2924eab5a9e2aed6cd454\",\n        \"tlsKeyUse\": \"DEFAULT\",\n        \"connectTimeout\": -1,\n        \"readTimeout\": -1,\n        \"followRedirects\": false,\n        \"proxyUse\": \"DEFAULT\"\n    },\n    {\n        \"goid\": \"fd1ee586f3501534dc2bf9c8ad5f28f3\",\n        \"host\": \"some-other-http-config\",\n        \"port\": 1234,\n        \"protocol\": \"ANY\",\n        \"checksum\": \"623808509830a3a2317ea56bc6de2e8f47facd44\",\n        \"username\": \"some-user\",\n        \"securePasswordName\": \"some-pwd\",\n        \"tlsVersion\": \"TLSv1.2\",\n        \"tlsKeyUse\": \"CUSTOM\",\n        \"tlsKeystoreId\": \"00000000000000000000000000000002\",\n        \"tlsKeyAlias\": \"ssl\",\n        \"connectTimeout\": -1,\n        \"readTimeout\": -1,\n        \"followRedirects\": false,\n        \"proxyUse\": \"CUSTOM\",\n        \"proxyConfiguration\": {\n            \"host\": \"some-proxy\",\n            \"port\": 1234\n        }\n    }\n  ],\n  \"secrets\": [\n    {\n      \"name\": \"some-pwd\",\n      \"description\": \"some-description\",\n      \"secret\": \"JEw3RXYwMiRl9P1rkBDjp9tuz1yFuuqjPX7a8TPap3KrLjsO0EsoHw==\",\n      \"secretType\": \"PASSWORD\",\n      \"variableReferencable\": true\n    }\n  ]\n}"
											}
										},
										"url": {
											"raw": "{{target_gw}}",
											"host": [
												"{{target_gw}}"
											]
										},
										"description": "# Set Encass Configs\n\nSet multiple encass configs altogether.\n\nAn encass config with the same name cannot exist on target. Assumes the policy is already present on target but can otherwise be combined in a bundled mutation.\n\nInput: sample input below:\n\n``` json\n{  \"input\": {            \"name\": \"combinevar2\",            \"policyName\": \"combinevar\",                        \"encassArgs\": [                {                    \"name\": \"a\",                    \"type\": \"STRING\",                    \"ordinal\": 1,                    \"guiLabel\": \"a\",                    \"guiPrompt\": true                },                {                    \"name\": \"b\",                    \"type\": \"STRING\",                    \"ordinal\": 2,                    \"guiLabel\": \"b\",                    \"guiPrompt\": true                }            ],            \"encassResults\": [                {                    \"name\": \"combo\",                    \"type\": \"STRING\"                }            ]        }}\n\n```"
									},
									"response": []
								},
								{
									"name": "Delete HTTP Configurations",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation deleteHttpConfigurations (\n    $secrets: [String!]!,\n    $httpConfigurations: [HttpConfigurationPartialInput!]!) {\n    deleteHttpConfigurations (input: $httpConfigurations) {\n        detailedStatus {\n            action status description \n            source {name value} \n            target {name value}\n        }\n    }\n    deleteSecrets (names: $secrets) {\n        detailedStatus {\n            action status description \n            source {name value} \n            target {name value}\n        }\n    }\n}",
												"variables": "{\n    \"httpConfigurations\" : [\n        {\n            \"host\": \"some-http-config\"\n        },\n        {\n            \"host\": \"some-other-http-config\",\n            \"port\": 1234\n        }\n    ],\n\n    \"secrets\": [\"some-pwd\"]\n}"
											}
										},
										"url": {
											"raw": "{{target_gw}}",
											"host": [
												"{{target_gw}}"
											]
										},
										"description": "# Delete Encass Config\n\nDeletes an encass config given its name\n\nInput: name"
									},
									"response": []
								}
							]
						},
						{
							"name": "Queries",
							"item": [
								{
									"name": "All HTTP Configurations",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query httpConfigurations {\n    httpConfigurations {\n        goid \n        host \n        port \n        protocol \n        path \n        checksum \n        \n        username \n        securePasswordName \n        ntlmHost \n        ntlmDomain \n        tlsVersion \n        tlsKeyUse \n        tlsKeystoreId \n        tlsKeyAlias \n        tlsCipherSuites \n        connectTimeout \n        readTimeout \n        followRedirects \n        proxyUse \n        proxyConfiguration {\n            host \n            port \n            username \n            securePasswordName\n        }\n    }\n}",
												"variables": "{}"
											}
										},
										"url": {
											"raw": "{{source_gw}}",
											"host": [
												"{{source_gw}}"
											]
										},
										"description": "# All Encass Configs\n\nGet all encass configs\n\nInput: none"
									},
									"response": []
								},
								{
									"name": "HTTP Configurations by Host",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query httpConfigurationsByHost ($host: String!) {\n    httpConfigurationsByHost (host: $host) {\n        goid \n        host \n        port \n        protocol \n        path \n        checksum \n        \n        username \n        securePasswordName \n        ntlmHost \n        ntlmDomain \n        tlsVersion \n        tlsKeyUse \n        tlsKeystoreId \n        tlsKeyAlias \n        tlsCipherSuites \n        connectTimeout \n        readTimeout \n        followRedirects \n        proxyUse \n        proxyConfiguration {\n            host \n            port \n            username \n            securePasswordName\n        }\n    }\n}",
												"variables": "{\n    \"host\": \"some-http-config\"\n}"
											}
										},
										"url": {
											"raw": "{{source_gw}}",
											"host": [
												"{{source_gw}}"
											]
										},
										"description": "# Encass Config by name\n\nGet the encapsulated assertion configuration by its name.\n\nInput: name"
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Identity Providers (Deprecated)",
					"item": [
						{
							"name": "Mutations",
							"item": [
								{
									"name": "Set Fips",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation setFips (\n    $fips: [FipInput!]!,\n    $trustedCerts: [TrustedCertInput!]!) {\n    # Ensure the availability of fips dependencies\n    setTrustedCerts (input: $trustedCerts) {\n        detailedStatus {status description}\n        trustedCerts {\n            goid\n            name\n            subjectDn\n            thumbprintSha1\n            checksum\n        }\n    }\n\n    setFips (input: $fips) {\n        detailedStatus{status description}\n        fips {\n            goid\n            name\n            checksum\n        }\n    }\n}",
												"variables": "{\n  \"fips\": [\n    {\n        \"name\": \"some-fip\",\n        \"enableCredentialTypeSaml\": true,\n        \"enableCredentialTypeX509\": false,\n        \"certificateReferences\": [\n            {\n                \"thumbprintSha1\": \"8qrXPTJoO3FtKn1htRxtV2SrOJk=\"\n            }\n        ]\n    }\n  ],\n\n  \"trustedCerts\": [\n    {\n      \"name\": \"some-trusted-cert\",\n      \"subjectDn\": \"cn=www.example.org,o=internet corporation for assigned names and numbers,l=los angeles,st=california,c=us\",\n      \"thumbprintSha1\": \"8qrXPTJoO3FtKn1htRxtV2SrOJk=\",\n      \"verifyHostname\": false,\n      \"trustAnchor\": false,\n      \"trustedFor\": [\n        \"SSL\",\n        \"SIGNING_SERVER_CERTS\"\n      ],\n      \"revocationCheckPolicyType\": \"USE_DEFAULT\",\n      \"notBefore\": \"2023-01-13T00:00:00Z\",\n      \"notAfter\": \"2024-02-13T23:59:59Z\",\n      \"certBase64\": \"MIIHSjCCBjKgAwIBAgIQDB/LGEUYx+OGZ0EjbWtz8TANBgkqhkiG9w0BAQsFADBPMQswCQYDVQQG\\r\\nEwJVUzEVMBMGA1UEChMMRGlnaUNlcnQgSW5jMSkwJwYDVQQDEyBEaWdpQ2VydCBUTFMgUlNBIFNI\\r\\nQTI1NiAyMDIwIENBMTAeFw0yMzAxMTMwMDAwMDBaFw0yNDAyMTMyMzU5NTlaMIGWMQswCQYDVQQG\\r\\nEwJVUzETMBEGA1UECBMKQ2FsaWZvcm5pYTEUMBIGA1UEBxMLTG9zIEFuZ2VsZXMxQjBABgNVBAoM\\r\\nOUludGVybmV0wqBDb3Jwb3JhdGlvbsKgZm9ywqBBc3NpZ25lZMKgTmFtZXPCoGFuZMKgTnVtYmVy\\r\\nczEYMBYGA1UEAxMPd3d3LmV4YW1wbGUub3JnMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKC\\r\\nAQEAwoB3iVm4RW+6StkR+nutx1fQevu2+t0Fu6KBcbvhfyHSXy7w0nJOdTT4jWLjStpRkNQBPZwM\\r\\nwHH35i+21gdnJtDe/xfO8IX9McFmyodlBUcqX8CruIzDv9AXf2OjXPBG+4aq+03XKl5/muATl32+\\r\\n+301Vw1dXoGYNeoWQqLTsHT3WS3tOOf+ehuzNuZ+rj+ephaD3lMBToEArrtC9R91KTTN6YSAOK48\\r\\nNxTA8CfOMFK5itxfIqB5+E9OSQTidXyqLyoeA+xxTKMqYfxvypEek1oueAhY9u67NCBdmuavxtfy\\r\\nvwp7+o6Sd+NsewxAhmRKFexw13KOYzDhC+9aMJcuJQIDAQABo4ID2DCCA9QwHwYDVR0jBBgwFoAU\\r\\nt2ui6qiqhIx56rTaD5iyxZV2ufQwHQYDVR0OBBYEFLCTP+gXgv1ssrYXh8vjgP6CmwGeMIGBBgNV\\r\\nHREEejB4gg93d3cuZXhhbXBsZS5vcmeCC2V4YW1wbGUubmV0ggtleGFtcGxlLmVkdYILZXhhbXBs\\r\\nZS5jb22CC2V4YW1wbGUub3Jngg93d3cuZXhhbXBsZS5jb22CD3d3dy5leGFtcGxlLmVkdYIPd3d3\\r\\nLmV4YW1wbGUubmV0MA4GA1UdDwEB/wQEAwIFoDAdBgNVHSUEFjAUBggrBgEFBQcDAQYIKwYBBQUH\\r\\nAwIwgY8GA1UdHwSBhzCBhDBAoD6gPIY6aHR0cDovL2NybDMuZGlnaWNlcnQuY29tL0RpZ2lDZXJ0\\r\\nVExTUlNBU0hBMjU2MjAyMENBMS00LmNybDBAoD6gPIY6aHR0cDovL2NybDQuZGlnaWNlcnQuY29t\\r\\nL0RpZ2lDZXJ0VExTUlNBU0hBMjU2MjAyMENBMS00LmNybDA+BgNVHSAENzA1MDMGBmeBDAECAjAp\\r\\nMCcGCCsGAQUFBwIBFhtodHRwOi8vd3d3LmRpZ2ljZXJ0LmNvbS9DUFMwfwYIKwYBBQUHAQEEczBx\\r\\nMCQGCCsGAQUFBzABhhhodHRwOi8vb2NzcC5kaWdpY2VydC5jb20wSQYIKwYBBQUHMAKGPWh0dHA6\\r\\nLy9jYWNlcnRzLmRpZ2ljZXJ0LmNvbS9EaWdpQ2VydFRMU1JTQVNIQTI1NjIwMjBDQTEtMS5jcnQw\\r\\nCQYDVR0TBAIwADCCAX8GCisGAQQB1nkCBAIEggFvBIIBawFpAHYA7s3QZNXbGs7FXLedtM0TojKH\\r\\nRny87N7DUUhZRnEftZsAAAGFq0gFIwAABAMARzBFAiEAqt+fK6jFdGA6tv0EWt9rax0WYBV4re9j\\r\\ngZgq0zi42QUCIEBh1yKpPvgX1BreE0wBUmriOVUhJS77KgF193fT2877AHcAc9meiRtMlnigIH1H\\r\\nneayxhzQUV5xGSqMa4AQesF3crUAAAGFq0gFnwAABAMASDBGAiEA12SUFK5rgLqRzvgcr7ZzV4nl\\r\\n+Zt9lloAzRLfPc7vSPACIQCXPbwScx1rE+BjFawZlVjLj/1PsM0KQQcsfHDZJUTLwAB2AEiw42va\\r\\npkc0D+VqAvqdMOscUgHLVt0sgdm7v6s52IRzAAABhatIBV4AAAQDAEcwRQIhAN5bhHthoyWMJ3CQ\\r\\nB/1iYFEhMgUVkFhHDM/nlE9ThCwhAiAPvPJXyp7a2kzwJX3P7fqH5Xko3rPhCzRoXYd6W+QkCjAN\\r\\nBgkqhkiG9w0BAQsFAAOCAQEAWeRK2KmCuppK8WMMbXYmdbM8dL7F9z2nkZL4zwYtWBDt87jW/Gz/\\r\\nE5YyzU/phySFC3SiwvYP9afYfXaKrunJWCtuAG+5zSTuxELFTBaFnTRhOSO/xo6VyYSpsuVBD0R4\\r\\n15W5z9l0v1hP5xb/fEAwxGxOIk3Lg2c6k78rxcWcGvJDoSU7hPb3U26oha7eFHSRMAYN8gfUxAi6\\r\\nQ2TF4j/arMVBr6Q36EJ2dPcTu0p9NlmBm8dE34lzuTNC6GDCTWFdEloQ9u//M4kUUOjWn8a5XCs1\\r\\n263t3Ta2JfKViqxpP5r+GvgVKG3qGFrC0mIYr0B4tfpeCY9T+cz4I6GDMSP0xg==\"\n    }\n  ]\n}"
											}
										},
										"url": {
											"raw": "{{target_gw}}",
											"host": [
												"{{target_gw}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Set Ldaps",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation setLdaps ($ldaps: [LdapInput!]!) {\n    setLdaps (input: $ldaps) {\n        detailedStatus {status description}\n        ldaps {\n            goid\n            name\n            checksum\n        }\n    }\n}",
												"variables": "{\n  \"ldaps\": [\n    {\n      \"name\": \"some-ldap\",\n      \"ldapUrls\": [\n        \"ldap://ldap.forumsys.com\"\n      ],\n      \"ldapsClientAuthEnabled\": false,\n      \"searchBase\": \"dc=example,dc=com\",\n      \"writable\": false,\n      \"bindDn\": \"cn=read-only-admin,dc=example,dc=com\",\n      \"bindPassword\": \"JEw3RXYwMiQ8cuJewqLNzu9hRZDqUs0UlBk6nRcOHfaExUCqRsWKTw==\",\n      \"userMappings\": [\n        {\n          \"objClass\": \"inetOrgPerson\",\n          \"nameAttrName\": \"cn\",\n          \"loginAttrName\": \"uid\",\n          \"passwdAttrName\": \"userPassword\",\n          \"firstNameAttrName\": \"givenName\",\n          \"lastNameAttrName\": \"sn\",\n          \"emailNameAttrName\": \"mail\",\n          \"kerberosAttrName\": \"uid\",\n          \"userCertAttrName\": \"userCertificate;binary\",\n          \"passwdType\": {\n            \"val\": 0\n          }\n        }\n      ],\n      \"groupMappings\": [\n        {\n          \"objClass\": \"posixGroup\",\n          \"nameAttrName\": \"cn\",\n          \"memberAttrName\": \"memberUid\",\n          \"memberStrategy\": {\n            \"val\": 1\n          }\n        },\n        {\n          \"objClass\": \"groupOfUniqueNames\",\n          \"nameAttrName\": \"cn\",\n          \"memberAttrName\": \"uniqueMember\",\n          \"memberStrategy\": {\n            \"val\": 2\n          }\n        },\n        {\n          \"objClass\": \"organizationalUnit\",\n          \"nameAttrName\": \"ou\",\n          \"memberAttrName\": \"\",\n          \"memberStrategy\": {\n            \"val\": 3\n          }\n        }\n      ]\n    }\n  ]\n}"
											}
										},
										"url": {
											"raw": "{{target_gw}}",
											"host": [
												"{{target_gw}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete IdPs",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation deleteIdps($fips: [String!]!, $ldaps: [String!]!) {\n    deleteFips(names: $fips) {\n        detailedStatus {status description}\n        fips {\n            goid\n            name\n        }\n    }\n\n    deleteLdaps(names: $ldaps) {\n        detailedStatus {status description}\n        ldaps {\n            goid\n            name\n        }\n    }\n}",
												"variables": "{\n    \"fips\": [\"some-fip\"],\n    \"ldaps\": [\"some-ldap\"]\n}"
											}
										},
										"url": {
											"raw": "{{target_gw}}",
											"host": [
												"{{target_gw}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Set Fip Members",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation setFipMembers (\n    $fipUsers: [FipUserInput!]!, \n    $fipGroups: [FipGroupInput!]!) {\n    setFipGroups (input: $fipGroups) {\n        detailedStatus {status description}\n        fipGroups {\n            goid\n            name\n            providerName\n            checksum\n        }\n    }\n\n    setFipUsers (input: $fipUsers) {\n        detailedStatus {status description}\n        fipUsers {\n            goid\n            name\n            login\n            providerName\n            checksum\n        }\n    }\n}",
												"variables": "{\n  \"fipUsers\": [\n    {\n        \"name\": \"some-fip-user\",\n        \"login\": \"some-fip-user\",\n        \"providerName\": \"some-fip\",\n        \"email\": \"some-fip-user@some.fip\",\n        \"memberOf\": [{\n            \"name\": \"some-fip-group\"\n        }],\n        \"subjectDn\": \"cn=some-fip-user\"\n    }\n  ],\n\n  \"fipGroups\": [\n    {\n        \"name\": \"some-fip-group\",\n        \"providerName\": \"some-fip\",\n        \"description\": \"some fip group\"\n    }\n  ]\n}"
											}
										},
										"url": {
											"raw": "{{target_gw}}",
											"host": [
												"{{target_gw}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Fip Members",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation deleteFipMembers(\n    $providerName: String!, \n    $fipUsers: [String!]!,\n    $fipGroups: [String!]!) {\n\n    deleteFipUsers(providerName: $providerName, names: $fipUsers) {\n        detailedStatus {status description}\n        fipUsers {\n            goid\n            name\n            providerName\n        }\n    }\n\n    deleteFipGroups(providerName: $providerName, names: $fipGroups) {\n        detailedStatus {status description}\n        fipGroups {\n            goid\n            name\n            providerName\n        }\n    }\n}",
												"variables": "{\n    \"providerName\": \"some-fip\",\n    \"fipUsers\": [\"some-fip-user\"],\n    \"fipGroups\": [\"some-fip-group\"]\n}\n"
											}
										},
										"url": {
											"raw": "{{target_gw}}",
											"host": [
												"{{target_gw}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Queries",
							"item": [
								{
									"name": "Fips",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query fips {\n    fips {\n        goid \n        name \n        checksum \n        \n        enableCredentialTypeSaml \n        enableCredentialTypeX509 \n        certificateValidation \n        certificateReferences { \n            goid \n            name \n            subjectDn \n            thumbprintSha1 \n            checksum \n            \n            verifyHostname \n            trustAnchor \n            trustedFor \n            revocationCheckPolicyType \n            revocationCheckPolicy { goid name } \n            notBefore \n            notAfter \n            certBase64 \n        }\n    }\n}",
												"variables": "{}"
											}
										},
										"url": {
											"raw": "{{source_gw}}",
											"host": [
												"{{source_gw}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Fip By Name",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query federatedIdpByName($name: String!) {\n    federatedIdpByName(name : $name) {\n        goid \n        name \n        checksum \n        \n        supportsSAML \n        supportsX509 \n        certValidation \n        trustedCerts { \n            name \n            subjectDn \n            thumbprintSha1 \n        }\n    }\n}",
												"variables": "{\n    \"name\" : \"some-fip\"\n}"
											}
										},
										"url": {
											"raw": "{{source_gw}}",
											"host": [
												"{{source_gw}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Ldaps",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query ldaps {\n    ldaps {\n        goid \n        name \n        checksum \n\n        ldapUrls \n        ldapsClientAuthEnabled \n        ldapsClientKeystoreId \n        ldapsClientKeyAlias \n        searchBase \n        writable \n        bindDn \n        bindPassword \n\n        userMappings { \n            objClass \n            nameAttrName \n            loginAttrName \n            passwdAttrName \n            firstNameAttrName \n            lastNameAttrName \n            emailNameAttrName \n            kerberosAttrName \n            kerberosEnterpriseAttrName \n            userCertAttrName \n            passwdType { val } \n        } \n            \n        groupMappings { \n            objClass \n            nameAttrName \n            memberAttrName \n            memberStrategy { val } \n        }\n    }\n}",
												"variables": "{}"
											}
										},
										"url": {
											"raw": "{{source_gw}}",
											"host": [
												"{{source_gw}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Ldap By Name",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query ldapByName($name : String!) {\n    ldapByName(name : $name) {\n        goid \n        name \n        checksum \n\n        ldapUrls \n        ldapsClientAuthEnabled \n        ldapsClientKeystoreId \n        ldapsClientKeyAlias \n        searchBase \n        writable \n        bindDn \n        bindPassword \n\n        userMappings { \n            objClass \n            nameAttrName \n            loginAttrName \n            passwdAttrName \n            firstNameAttrName \n            lastNameAttrName \n            emailNameAttrName \n            kerberosAttrName \n            kerberosEnterpriseAttrName \n            userCertAttrName \n            passwdType { val } \n        } \n            \n        groupMappings { \n            objClass \n            nameAttrName \n            memberAttrName \n            memberStrategy { val } \n        }\n    }\n}",
												"variables": "{\n    \"name\" : \"some-ldap\"\n}"
											}
										},
										"url": {
											"raw": "{{source_gw}}",
											"host": [
												"{{source_gw}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Search IdP",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query searchIdp ($internalFilter: IdpFilter!, $fipFilter: IdpFilter!) {\n    searchInternal (filter : $internalFilter) {\n        internalUsers {\n            goid\n            name\n            login\n            checksum\n        }\n        \n        internalGroups {\n            goid\n            name\n            checksum\n        }\n    }\n\n    searchFip (filter: $fipFilter) {\n        fipUsers {\n            goid\n            name\n            login\n            providerName\n            checksum\n        }\n\n        fipGroups {\n            goid\n            name\n            providerName\n            checksum\n        }\n    }\n\n}",
												"variables": "{\n    \"internalFilter\": {\n        \"providerName\": \"Internal Identity\",\n        \"namePattern\" : \"some*\"\n    },\n\n    \"fipFilter\" : {\n        \"providerName\": \"some-fip\",\n        \"namePattern\" : \"some*\"\n    }\n}"
											}
										},
										"url": {
											"raw": "{{source_gw}}",
											"host": [
												"{{source_gw}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Fip Members",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query fipUsers {\n    fipUsers {\n        goid\n        name\n        login\n        providerName\n        checksum\n\n        subjectDn \n        certBase64 \n        firstName \n        lastName \n        email\n\n        memberOf {\n            name\n        }\n    }\n\n    fipGroups {\n        goid \n        name \n        providerName \n        checksum \n        \n        description\n        members { name }\n    }\n}",
												"variables": "{}"
											}
										},
										"url": {
											"raw": "{{source_gw}}",
											"host": [
												"{{source_gw}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Fip User By Name",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query fipUserByName($providerName: String!, $name: String!) {\n    fipUserByName (providerName: $providerName, name : $name){\n        goid\n        name\n        login\n        providerName\n        checksum\n\n        subjectDn \n        certBase64 \n        firstName \n        lastName \n        email\n\n        memberOf {\n            name\n        }\n    }\n}",
												"variables": "{\n    \"providerName\" : \"some-fip\",\n    \"name\" : \"some-fip-user\"\n}"
											}
										},
										"url": {
											"raw": "{{source_gw}}",
											"host": [
												"{{source_gw}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Fip Group By Name",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query fipGroupByName($providerName: String!, $name: String!) {\n    fipGroupByName(providerName: $providerName, name : $name) {\n        goid\n        name\n        providerName\n        checksum\n\n        description\n        members { name }\n    }\n}",
												"variables": "{\n    \"providerName\": \"some-fip\",\n    \"name\": \"some-fip-group\"\n    \n}"
											}
										},
										"url": {
											"raw": "{{source_gw}}",
											"host": [
												"{{source_gw}}"
											]
										}
									},
									"response": []
								}
							]
						}
					],
					"description": "This folder has queries and mutations for identity provider-related entity types. The types covered are:\n\n\\*   fips\n\\*   ldap idps\n\\*   fip groups\n\\*   fip users\n\\*   internal groups\n\\*   internal users"
				},
				{
					"name": "Identity Providers",
					"item": [
						{
							"name": "Mutations",
							"item": [
								{
									"name": "Set Federated Idps",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation setFederatedIdps (\n    $federatedIdps: [FederatedIdpInput!]!,\n    $trustedCerts: [TrustedCertInput!]!) {\n    # Ensure the availability of fips dependencies\n    setTrustedCerts (input: $trustedCerts) {\n        detailedStatus {\n            action status description\n            source {name value}\n            target {name value}\n        }\n    }\n\n    setFederatedIdps (input: $federatedIdps) {\n        detailedStatus {\n            action status description\n            source {name value}\n            target {name value}\n        }\n    }\n}",
												"variables": "{\n  \"federatedIdps\": [\n    {\n        \"name\": \"some-fip\",\n        \"supportsSAML\": true,\n        \"supportsX509\": false,\n        \"trustedCerts\": [\n            {\n                \"name\": \"some-trusted-cert\",\n                \"thumbprintSha1\": \"8qrXPTJoO3FtKn1htRxtV2SrOJk=\"\n            }\n        ]\n    }\n  ],\n\n  \"trustedCerts\": [\n    {\n      \"name\": \"some-trusted-cert\",\n      \"subjectDn\": \"cn=www.example.org,o=internet corporation for assigned names and numbers,l=los angeles,st=california,c=us\",\n      \"thumbprintSha1\": \"8qrXPTJoO3FtKn1htRxtV2SrOJk=\",\n      \"verifyHostname\": false,\n      \"trustAnchor\": false,\n      \"trustedFor\": [\n        \"SSL\",\n        \"SIGNING_SERVER_CERTS\"\n      ],\n      \"revocationCheckPolicyType\": \"USE_DEFAULT\",\n      \"notBefore\": \"2023-01-13T00:00:00Z\",\n      \"notAfter\": \"2024-02-13T23:59:59Z\",\n      \"certBase64\": \"MIIHSjCCBjKgAwIBAgIQDB/LGEUYx+OGZ0EjbWtz8TANBgkqhkiG9w0BAQsFADBPMQswCQYDVQQG\\r\\nEwJVUzEVMBMGA1UEChMMRGlnaUNlcnQgSW5jMSkwJwYDVQQDEyBEaWdpQ2VydCBUTFMgUlNBIFNI\\r\\nQTI1NiAyMDIwIENBMTAeFw0yMzAxMTMwMDAwMDBaFw0yNDAyMTMyMzU5NTlaMIGWMQswCQYDVQQG\\r\\nEwJVUzETMBEGA1UECBMKQ2FsaWZvcm5pYTEUMBIGA1UEBxMLTG9zIEFuZ2VsZXMxQjBABgNVBAoM\\r\\nOUludGVybmV0wqBDb3Jwb3JhdGlvbsKgZm9ywqBBc3NpZ25lZMKgTmFtZXPCoGFuZMKgTnVtYmVy\\r\\nczEYMBYGA1UEAxMPd3d3LmV4YW1wbGUub3JnMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKC\\r\\nAQEAwoB3iVm4RW+6StkR+nutx1fQevu2+t0Fu6KBcbvhfyHSXy7w0nJOdTT4jWLjStpRkNQBPZwM\\r\\nwHH35i+21gdnJtDe/xfO8IX9McFmyodlBUcqX8CruIzDv9AXf2OjXPBG+4aq+03XKl5/muATl32+\\r\\n+301Vw1dXoGYNeoWQqLTsHT3WS3tOOf+ehuzNuZ+rj+ephaD3lMBToEArrtC9R91KTTN6YSAOK48\\r\\nNxTA8CfOMFK5itxfIqB5+E9OSQTidXyqLyoeA+xxTKMqYfxvypEek1oueAhY9u67NCBdmuavxtfy\\r\\nvwp7+o6Sd+NsewxAhmRKFexw13KOYzDhC+9aMJcuJQIDAQABo4ID2DCCA9QwHwYDVR0jBBgwFoAU\\r\\nt2ui6qiqhIx56rTaD5iyxZV2ufQwHQYDVR0OBBYEFLCTP+gXgv1ssrYXh8vjgP6CmwGeMIGBBgNV\\r\\nHREEejB4gg93d3cuZXhhbXBsZS5vcmeCC2V4YW1wbGUubmV0ggtleGFtcGxlLmVkdYILZXhhbXBs\\r\\nZS5jb22CC2V4YW1wbGUub3Jngg93d3cuZXhhbXBsZS5jb22CD3d3dy5leGFtcGxlLmVkdYIPd3d3\\r\\nLmV4YW1wbGUubmV0MA4GA1UdDwEB/wQEAwIFoDAdBgNVHSUEFjAUBggrBgEFBQcDAQYIKwYBBQUH\\r\\nAwIwgY8GA1UdHwSBhzCBhDBAoD6gPIY6aHR0cDovL2NybDMuZGlnaWNlcnQuY29tL0RpZ2lDZXJ0\\r\\nVExTUlNBU0hBMjU2MjAyMENBMS00LmNybDBAoD6gPIY6aHR0cDovL2NybDQuZGlnaWNlcnQuY29t\\r\\nL0RpZ2lDZXJ0VExTUlNBU0hBMjU2MjAyMENBMS00LmNybDA+BgNVHSAENzA1MDMGBmeBDAECAjAp\\r\\nMCcGCCsGAQUFBwIBFhtodHRwOi8vd3d3LmRpZ2ljZXJ0LmNvbS9DUFMwfwYIKwYBBQUHAQEEczBx\\r\\nMCQGCCsGAQUFBzABhhhodHRwOi8vb2NzcC5kaWdpY2VydC5jb20wSQYIKwYBBQUHMAKGPWh0dHA6\\r\\nLy9jYWNlcnRzLmRpZ2ljZXJ0LmNvbS9EaWdpQ2VydFRMU1JTQVNIQTI1NjIwMjBDQTEtMS5jcnQw\\r\\nCQYDVR0TBAIwADCCAX8GCisGAQQB1nkCBAIEggFvBIIBawFpAHYA7s3QZNXbGs7FXLedtM0TojKH\\r\\nRny87N7DUUhZRnEftZsAAAGFq0gFIwAABAMARzBFAiEAqt+fK6jFdGA6tv0EWt9rax0WYBV4re9j\\r\\ngZgq0zi42QUCIEBh1yKpPvgX1BreE0wBUmriOVUhJS77KgF193fT2877AHcAc9meiRtMlnigIH1H\\r\\nneayxhzQUV5xGSqMa4AQesF3crUAAAGFq0gFnwAABAMASDBGAiEA12SUFK5rgLqRzvgcr7ZzV4nl\\r\\n+Zt9lloAzRLfPc7vSPACIQCXPbwScx1rE+BjFawZlVjLj/1PsM0KQQcsfHDZJUTLwAB2AEiw42va\\r\\npkc0D+VqAvqdMOscUgHLVt0sgdm7v6s52IRzAAABhatIBV4AAAQDAEcwRQIhAN5bhHthoyWMJ3CQ\\r\\nB/1iYFEhMgUVkFhHDM/nlE9ThCwhAiAPvPJXyp7a2kzwJX3P7fqH5Xko3rPhCzRoXYd6W+QkCjAN\\r\\nBgkqhkiG9w0BAQsFAAOCAQEAWeRK2KmCuppK8WMMbXYmdbM8dL7F9z2nkZL4zwYtWBDt87jW/Gz/\\r\\nE5YyzU/phySFC3SiwvYP9afYfXaKrunJWCtuAG+5zSTuxELFTBaFnTRhOSO/xo6VyYSpsuVBD0R4\\r\\n15W5z9l0v1hP5xb/fEAwxGxOIk3Lg2c6k78rxcWcGvJDoSU7hPb3U26oha7eFHSRMAYN8gfUxAi6\\r\\nQ2TF4j/arMVBr6Q36EJ2dPcTu0p9NlmBm8dE34lzuTNC6GDCTWFdEloQ9u//M4kUUOjWn8a5XCs1\\r\\n263t3Ta2JfKViqxpP5r+GvgVKG3qGFrC0mIYr0B4tfpeCY9T+cz4I6GDMSP0xg==\"\n    }\n  ]\n}"
											}
										},
										"url": {
											"raw": "{{target_gw}}",
											"host": [
												"{{target_gw}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Federated Idps",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation deleteFederatedIdps($federatedIdps: [String!]!) {\n    deleteFederatedIdps(names: $federatedIdps) {\n       detailedStatus {\n            action status description\n            source {name value}\n            target {name value}\n        }\n    }\n}",
												"variables": "{\n    \"federatedIdps\": [\"some-fip\"]\n}"
											}
										},
										"url": {
											"raw": "{{target_gw}}",
											"host": [
												"{{target_gw}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Set Ldap Idps",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation setLdapIdps ($ldapIdps: [LdapIdpInput!]!) {\n    setLdapIdps (input: $ldapIdps) {\n        detailedStatus {\n            action status description\n            source {name value}\n            target {name value}\n        }        \n    }\n}",
												"variables": "{\n  \"ldapIdps\": [\n    {\n      \"name\": \"some-ldap\",\n      \"ldapType\": \"GenericLDAP\",\n      \"serverUrls\": [\n        \"ldap://ldap.forumsys.com\"\n      ],\n      \"useSslClientAuth\": true,\n      \"sslClientKeyAlias\":\"ssl\",\n      \"searchBase\": \"dc=example,dc=com\",\n      \"writable\": true,\n      \"writeBase\": \"dc=example,dc=com\",\n      \"bindDn\": \"cn=read-only-admin,dc=example,dc=com\",\n      \"bindPassword\": \"JEw3RXYwMiQ8cuJewqLNzu9hRZDqUs0UlBk6nRcOHfaExUCqRsWKTw==\",\n      \"specifiedAttributes\" : [\"testAttribute\"\n         ],\n      \"userMappings\": [\n        {\n          \"objClass\": \"inetOrgPerson\",\n          \"nameAttrName\": \"cn\",\n          \"loginAttrName\": \"uid\",\n          \"passwdAttrName\": \"userPassword\",\n          \"firstNameAttrName\": \"givenName\",\n          \"lastNameAttrName\": \"sn\",\n          \"emailNameAttrName\": \"mail\",\n          \"kerberosAttrName\": \"uid\",\n          \"userCertAttrName\": \"userCertificate;binary\",\n          \"passwdType\": {\n            \"val\": 0\n          }\n        }\n      ],\n      \"groupMappings\": [\n        {\n          \"objClass\": \"posixGroup\",\n          \"nameAttrName\": \"cn\",\n          \"memberAttrName\": \"memberUid\",\n          \"memberStrategy\": {\n            \"val\": 1\n          }\n        },\n        {\n          \"objClass\": \"groupOfUniqueNames\",\n          \"nameAttrName\": \"cn\",\n          \"memberAttrName\": \"uniqueMember\",\n          \"memberStrategy\": {\n            \"val\": 2\n          }\n        },\n        {\n          \"objClass\": \"organizationalUnit\",\n          \"nameAttrName\": \"ou\",\n          \"memberAttrName\": \"\",\n          \"memberStrategy\": {\n            \"val\": 3\n          }\n        }\n      ],\n      \"ntlmProperties\": [\n        {\n            \"name\": \"aasdf\",\n            \"value\": \"asdf\"\n        },\n        {\n            \"name\": \"adsf\",\n            \"value\": \"asdfa\"\n        },\n        {\n            \"name\": \"domain.dns.name\",\n            \"value\": \"asdfasf\"\n        },\n        {\n            \"name\": \"domain.netbios.name\",\n            \"value\": \"asdfa\"\n        },\n        {\n            \"name\": \"enabled\",\n            \"value\": \"true\"\n        },\n        {\n            \"name\": \"host.dns.name\",\n            \"value\": \"adsfa\"\n        },\n        {\n            \"name\": \"host.netbios.name\",\n            \"value\": \"adfsa\"\n        },\n        {\n            \"name\": \"server.dns.name\",\n            \"value\": \"asdfa\"\n        },\n        {\n            \"name\": \"service.account\",\n            \"value\": \"asdfa\"\n        },\n        {\n            \"name\": \"service.passwordOid\",\n            \"value\": \"ecdcb5f6c178e3b2961e8a6a24a86cb4\"\n        }\n      ]\n    }\n  ]\n}"
											}
										},
										"url": {
											"raw": "{{target_gw}}",
											"host": [
												"{{target_gw}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Ldap Idps",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation deleteLdapIdps($ldapIdps: [String!]!) {\n    deleteLdapIdps(names: $ldapIdps) {\n      detailedStatus {\n            action status description\n            source {name value}\n            target {name value}\n        }\n    }\n}",
												"variables": "{\n    \"ldapIdps\": [\"some-ldap\"]\n}"
											}
										},
										"url": {
											"raw": "{{target_gw}}",
											"host": [
												"{{target_gw}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Set Policy Backed Idp",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation setPolicyBackedIdps ($policyBackedIdps: [PolicyBackedIdpInput!]!) {\n    setPolicyBackedIdps (input: $policyBackedIdps) {\n        detailedStatus {\n            action status description\n            source {name value}\n            target {name value}\n        }\n    }\n}",
												"variables": "{\n  \"policyBackedIdps\": [\n    {\n      \"name\": \"some-policybacked-idp\",\n      \"authPolicyName\": \"some-identity-provider-policy\",\n      \"defaultRoleName\": \"Administrator\",\n      \"properties\": [\n        {\n            \"name\": \"adminEnabled\",\n            \"value\": true\n        }\n      ]\n\n    }\n  ]\n}"
											}
										},
										"url": {
											"raw": "{{target_gw}}",
											"host": [
												"{{target_gw}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Policy Backed Idp",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation deletePolicyBackedIdps($policyBackedIdps: [String!]!) {\n    deletePolicyBackedIdps(names: $policyBackedIdps) {\n        detailedStatus {\n            action status description\n            source {name value}\n            target {name value}\n        }\n    }\n}",
												"variables": "{\n    \"policyBackedIdps\": [\"some-policybacked-idp\"]\n}"
											}
										},
										"url": {
											"raw": "{{target_gw}}",
											"host": [
												"{{target_gw}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Set Simple Ldaps",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation setSimpleLdapIdps ($simpleLdapIdps: [SimpleLdapIdpInput!]!) {\n    setSimpleLdapIdps (input: $simpleLdapIdps) {\n        detailedStatus {\n            action status description\n            source {name value}\n            target {name value}\n        }\n    }\n}",
												"variables": "{\n  \"simpleLdapIdps\": [\n    {\n      \"name\": \"some-simple-ldap\",\n      \"serverUrls\": [\n        \"ldap://ldap.forumsys.com:389\",\n        \"ldaps://ldap.forumsys.com:636\"\n      ],\n      \"useSslClientAuth\": true,\n      \"sslClientKeyAlias\": \"ssl\",\n      \"bindDnPatternPrefix\": \"cn=\",\n      \"bindDnPatternSuffix\": \"dc=l7tech,dc=com\",\n      \"properties\": [\n        {\n            \"name\": \"reconnectTimeout\",\n            \"value\": 50000\n        }\n      ]\n\n    }\n  ]\n}"
											}
										},
										"url": {
											"raw": "{{target_gw}}",
											"host": [
												"{{target_gw}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Simple Ldap",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation deleteSimpleLdapIdps($simpleLdapIdps: [String!]!) {\n    deleteSimpleLdapIdps(names: $simpleLdapIdps) {\n        detailedStatus {\n            action status description\n            source {name value}\n            target {name value}\n        }\n    }\n}",
												"variables": "{\n    \"simpleLdapIdps\": [\"some-simple-ldap\"]\n}"
											}
										},
										"url": {
											"raw": "{{target_gw}}",
											"host": [
												"{{target_gw}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Set Internal Idps",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation setInternalIdps ($internalIdps: [InternalIdpInput!]!) {\n    setInternalIdps (input: $internalIdps) {\n        detailedStatus {\n            action status description\n            source {name value}\n            target {name value}\n        }\n    }\n}",
												"variables": "{\n  \"internalIdps\": [\n    {\n        \"name\": \"some-internal-idp\",\n        \"certValidation\": \"USE_DEFAULT\"\n        \n    }\n  ]\n}"
											}
										},
										"url": {
											"raw": "{{target_gw}}",
											"host": [
												"{{target_gw}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Set Federated Members",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation setFipMembers (\n    $fipUsers: [FipUserInput!]!, \n    $fipGroups: [FipGroupInput!]!) {\n    setFipGroups (input: $fipGroups) {\n        detailedStatus {\n            action status description\n            source {name value}\n            target {name value}\n        }\n    }\n\n    setFipUsers (input: $fipUsers) {\n        detailedStatus {\n            action status description\n            source {name value}\n            target {name value}\n        }\n    }\n}",
												"variables": "{\n  \"fipUsers\": [\n    {\n        \"name\": \"some-fip-user\",\n        \"login\": \"some-fip-user\",\n        \"providerName\": \"some-fip\",\n        \"email\": \"some-fip-user@some.fip\",\n        \"memberOf\": [{\n            \"name\": \"some-fip-group\"\n        }],\n        \"subjectDn\": \"cn=some-fip-user\"\n    }\n  ],\n\n  \"fipGroups\": [\n    {\n        \"name\": \"some-fip-group\",\n        \"providerName\": \"some-fip\",\n        \"description\": \"some fip group\"\n    }\n  ]\n}"
											}
										},
										"url": {
											"raw": "{{target_gw}}",
											"host": [
												"{{target_gw}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Federated Members",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation deleteFederatedMembers(\n    $providerName: String!, \n    $federatedUsers: [String!]!,\n    $federatedGroups: [String!]!) {\n\n    deleteFederatedUsers(providerName: $providerName, names: $federatedUsers) {\n        detailedStatus {\n            action status description\n            source {name value}\n            target {name value}\n        }\n    }\n\n    deleteFederatedGroups(providerName: $providerName, names: $federatedGroups) {\n        detailedStatus {\n            action status description\n            source {name value}\n            target {name value}\n        }\n    }\n}",
												"variables": "{\n    \"providerName\": \"some-fip\",\n    \"federatedUsers\": [\"some-fip-user\"],\n    \"federatedGroups\": [\"some-fip-group\"]\n}\n"
											}
										},
										"url": {
											"raw": "{{target_gw}}",
											"host": [
												"{{target_gw}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Set Internal Members",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation setInternalMembers (\n    $internalUsers: [InternalUserInput!]!,\n    $internalGroups: [InternalGroupInput!]!) {\n\n    setInternalGroups (input: $internalGroups) {\n       detailedStatus {\n            action status description\n            source {name value}\n            target {name value}\n        }\n    }\n\n    setInternalUsers (input: $internalUsers) {\n        detailedStatus {\n            action status description\n            source {name value}\n            target {name value}\n        }\n    }\n}",
												"variables": "{\n  \"internalUsers\": [\n    {\n        \"name\": \"some-internal-user\",\n        \"memberOf\": [\n            {\n                \"name\": \"some-internal-group\"\n            }\n        ],\n        \"login\": \"some-internal-user\",\n        \"password\": \"$6$cSX9Gxp56f5aLdkL$wJp8Wm5fHkSbCtffsdMtrEnIZxpqdBkUvIfndJkB9teJmsC0ty6scwPELoCaB4UriPShfBxajwadcgEmFDtvL1\",\n        \"certBase64\": \"MIIGjDCCBXSgAwIBAgIJAOfLGfa8uS2BMA0GCSqGSIb3DQEBCwUAMIG0MQswCQYDVQQGEwJVUzEQ\\r\\nMA4GA1UECBMHQXJpem9uYTETMBEGA1UEBxMKU2NvdHRzZGFsZTEaMBgGA1UEChMRR29EYWRkeS5j\\r\\nb20sIEluYy4xLTArBgNVBAsTJGh0dHA6Ly9jZXJ0cy5nb2RhZGR5LmNvbS9yZXBvc2l0b3J5LzEz\\r\\nMDEGA1UEAxMqR28gRGFkZHkgU2VjdXJlIENlcnRpZmljYXRlIEF1dGhvcml0eSAtIEcyMB4XDTIy\\r\\nMDMxNDE3NDkyM1oXDTIzMDQxNTE1Mzg0MVowFzEVMBMGA1UEAwwMKi5rZWxvd25hLmNhMIIBIjAN\\r\\nBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA2QCY48mBJfLCIuyJIQTwF5gikuf5B/FoGZ3LcAtv\\r\\nE9tagkS+0qDsMorwFYT93tnJFusmIVqoGUbVx7IRIWYQIzZsPUBLUEqoBYoyZJwYfsuX2XVP5XxC\\r\\noKuMQdNw/G32e2lbpcnYQ27svQ8jq9Hx+PcCxywgi8ar/jC3Bm/+NSl5IM63iiV2VFdrE74a9fmp\\r\\nN40W9uDl4du4N6PwMxc8cihn8ymiOcwFUC7R/6+4sIBFuddAMZ1J8FrOO+RSdflbOQvJYZDzFK00\\r\\n9VOC6PlxcK0IRKA450Qd3mzdHSJdLuPu38AuW394tvS9/M3ZlWQuZvqLCYIx/xpTWD7qWQ8H8QID\\r\\nAQABo4IDOzCCAzcwDAYDVR0TAQH/BAIwADAdBgNVHSUEFjAUBggrBgEFBQcDAQYIKwYBBQUHAwIw\\r\\nDgYDVR0PAQH/BAQDAgWgMDgGA1UdHwQxMC8wLaAroCmGJ2h0dHA6Ly9jcmwuZ29kYWRkeS5jb20v\\r\\nZ2RpZzJzMS0zOTIxLmNybDBdBgNVHSAEVjBUMEgGC2CGSAGG/W0BBxcBMDkwNwYIKwYBBQUHAgEW\\r\\nK2h0dHA6Ly9jZXJ0aWZpY2F0ZXMuZ29kYWRkeS5jb20vcmVwb3NpdG9yeS8wCAYGZ4EMAQIBMHYG\\r\\nCCsGAQUFBwEBBGowaDAkBggrBgEFBQcwAYYYaHR0cDovL29jc3AuZ29kYWRkeS5jb20vMEAGCCsG\\r\\nAQUFBzAChjRodHRwOi8vY2VydGlmaWNhdGVzLmdvZGFkZHkuY29tL3JlcG9zaXRvcnkvZ2RpZzIu\\r\\nY3J0MB8GA1UdIwQYMBaAFEDCvSeOzDSDMKIz1/tss/C0LIDOMCMGA1UdEQQcMBqCDCoua2Vsb3du\\r\\nYS5jYYIKa2Vsb3duYS5jYTAdBgNVHQ4EFgQUEF5c8gyemT/aYylYsq2gimJumOowggGABgorBgEE\\r\\nAdZ5AgQCBIIBcASCAWwBagB3AOg+0No+9QY1MudXKLyJa8kD08vREWvs62nhd31tBr1uAAABf4mM\\r\\njjMAAAQDAEgwRgIhAN+bVp1Nf4tRQ7QkUNdB3XfvN5+5zA5SeJRJRvgkN1H3AiEAwBToqUD09ySi\\r\\nMKGyNCA+gU4VpeQKEQ71YXgEQowOhdEAdwA1zxkbv7FsV78PrUxtQsu7ticgJlHqP+Eq76gDwzvW\\r\\nTAAAAX+JjI9wAAAEAwBIMEYCIQD6ZBKhSjV2bC9QBcbwdKOEHRv2wX/e61MXvLN3ePBIjgIhAP87\\r\\nK4nObHAQgrZ0RPV6ji61EHzWt0Pwjwh287Ms0zECAHYAejKMVNi3LbYg6jjgUh7phBZwMhOFTTvS\\r\\nK8E6V6NS61IAAAF/iYyP0AAABAMARzBFAiEAtgcQJurJ3g8LdvNv2juOZ3U0tyX11iNPhJ4kPsCR\\r\\niosCIEDQrcucbYu2EIlXjUecYcnrUFO7TyvBEaMh3z4//SOKMA0GCSqGSIb3DQEBCwUAA4IBAQAT\\r\\nINkwgzr+oJJAjtUxNDPn7SUuxFdiOQrmnG7/7ZDMeGQ02SLiA+ukDzXXVqOQSlrX7I306xfqou3m\\r\\nNBSbyob53W46yq9hwqYS7PjFMjinyyG3aDX6mdOPtngtO8xfslkIBaSao5EDJC5HpA0KMPAc2xW7\\r\\nlmA/bluIS7a+U0Tbvv7uaZajTRV7KlT+7N2PpNUuMr0ilvB8wZjhJHZtNU2DTvotCPCdNaxTKLLT\\r\\nZc1at2Vc8Z10VrDvGK4JnHEAS6amNWoFPEdjzpbtVVV8F7xl8bJfKE4SwrBzZn8Aq5BcIxMhL5eq\\r\\nmS1dUj/x/4GUETE7ojJYYTE/4XVNzOxjmJc0\",\n        \"sshPublicKey\": \"-----BEGIN PUBLIC KEY-----MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEApNVd1v3ZYgQoM2dJ4QRJLh6iKFAKrk73XTsjI7FPw6lj81uuvTQI4f6/lIsc1BF59pB1jMcen5NjUtb+QadDbDcUFj7EEYKWKaAYnqTSeAAw53EznQXR3shNXiKpL+gUqXdOPAxsdUMNfvPTVzCxmbrz65dqcTcHJZXcz6Z++ONujxW4a4a52VStSNjRYeDPZpMLWUJboPIxAyTaFJsquwIgFKMoUEGAU8nT6g2Ixmt2J5qrbHIO3VvCmbEIb2BTtQFluUSZGduPRwSHSen5mosnOxsqi/dOdOywT7I6FhaHnbTAqOZGPDdpxdT4iug+a19flPQYBgW0zDiudl6bTwIDAQAB-----END PUBLIC KEY-----\"\n    }\n  ],\n\n  \"internalGroups\": [\n    {\n        \"name\": \"some-internal-group\",\n        \"description\": \"some internal group\"\n    }\n  ]\n}"
											}
										},
										"url": {
											"raw": "{{target_gw}}",
											"host": [
												"{{target_gw}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Internal Members",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation deleteInternalMembers(\n    $internalUsers: [String!]!,\n    $internalGroups: [String!]!) {\n  deleteInternalUsers(logins: $internalUsers) {\n    detailedStatus {\n        action status description\n        source {name value}\n        target {name value}\n    }\n  }\n\n  deleteInternalGroups(names: $internalGroups) {\n    detailedStatus {\n        action status description\n        source {name value}\n        target {name value}\n    }\n  }\n}\n",
												"variables": "{\n    \"internalUsers\": [\"some-internal-user\"],\n    \"internalGroups\": [\"some-internal-group\"]\n}"
											}
										},
										"url": {
											"raw": "{{target_gw}}",
											"host": [
												"{{target_gw}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Queries",
							"item": [
								{
									"name": "Federated Idps",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query federatedIdps {\n    federatedIdps {\n        goid \n        name \n        checksum \n        \n        supportsSAML \n        supportsX509 \n        certValidation \n        trustedCerts { \n            name \n            subjectDn \n            thumbprintSha1 \n        }\n    }\n}",
												"variables": "{}"
											}
										},
										"url": {
											"raw": "{{source_gw}}",
											"host": [
												"{{source_gw}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Federated Idp By Name",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query federatedIdpByName($name: String!) {\n    federatedIdpByName(name : $name) {\n        goid \n        name \n        checksum \n        \n        supportsSAML \n        supportsX509 \n        certValidation \n        trustedCerts { \n            name \n            subjectDn \n            thumbprintSha1 \n        }\n    }\n}",
												"variables": "{\n    \"name\" : \"some-fip\"\n}"
											}
										},
										"url": {
											"raw": "{{source_gw}}",
											"host": [
												"{{source_gw}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Ldap Idps",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query ldapIdps {\n    ldapIdps {\n        goid \n        name \n        checksum \n        \n        ldapType\n        serverUrls \n        useSslClientAuth \n        sslClientKeyAlias  \n        searchBase \n        writable\n        writeBase \n        bindDn \n        bindPassword \n        specifiedAttributes\n\n        userMappings { \n            objClass \n            nameAttrName \n            loginAttrName \n            passwdAttrName \n            firstNameAttrName \n            lastNameAttrName \n            emailNameAttrName \n            kerberosAttrName \n            kerberosEnterpriseAttrName \n            userCertAttrName \n            passwdType { val } \n        } \n            \n        groupMappings { \n            objClass \n            nameAttrName \n            memberAttrName \n            memberStrategy { val } \n        } \n        properties{\n            name\n            value\n        }\n        ntlmProperties{\n            name\n            value\n        }\n    }\n}",
												"variables": "{}"
											}
										},
										"url": {
											"raw": "{{source_gw}}",
											"host": [
												"{{source_gw}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Ldap Idp By Name",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query ldapIdpByName($name : String!) {\n    ldapIdpByName(name : $name) {\n        goid \n        name \n        checksum \n        \n        ldapType\n        serverUrls \n        useSslClientAuth \n        sslClientKeyAlias  \n        searchBase \n        writable\n        writeBase \n        bindDn \n        bindPassword \n        specifiedAttributes\n\n        userMappings { \n            objClass \n            nameAttrName \n            loginAttrName \n            passwdAttrName \n            firstNameAttrName \n            lastNameAttrName \n            emailNameAttrName \n            kerberosAttrName \n            kerberosEnterpriseAttrName \n            userCertAttrName \n            passwdType { val } \n        } \n            \n        groupMappings { \n            objClass \n            nameAttrName \n            memberAttrName \n            memberStrategy { val } \n        }\n        properties{\n            name\n            value\n        }\n        ntlmProperties{\n            name\n            value\n        }\n    }\n}",
												"variables": "{\n    \"name\" : \"Ldap\"\n}"
											}
										},
										"url": {
											"raw": "{{source_gw}}",
											"host": [
												"{{source_gw}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Policy Backed Idps",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query policyBackedIdps {\n    policyBackedIdps {\n        goid \n        name \n        checksum \n\n        authPolicyName \n        defaultRoleName \n        properties { name value }\n        \n    }\n}",
												"variables": "{}"
											}
										},
										"url": {
											"raw": "{{source_gw}}",
											"host": [
												"{{source_gw}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Policy Backed Idp By Name",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query policyBackedIdpByName($name : String!) {\n    policyBackedIdpByName(name : $name) {\n        goid \n        name \n        checksum \n\n        authPolicyName \n        defaultRoleName \n        properties { name value }\n    }\n}",
												"variables": "{\n    \"name\" : \"some-ldap\"\n}"
											}
										},
										"url": {
											"raw": "{{source_gw}}",
											"host": [
												"{{source_gw}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Simple Ldaps",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query simpleLdapIdps {\n    simpleLdapIdps {\n        goid \n        name \n        checksum \n\n        serverUrls \n        useSslClientAuth \n        sslClientKeyAlias \n        bindDnPatternPrefix \n        bindDnPatternSuffix \n        properties { name value }\n        \n    }\n}",
												"variables": "{}"
											}
										},
										"url": {
											"raw": "{{source_gw}}",
											"host": [
												"{{source_gw}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Simple Ldap By Name",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query simpleLdapIdpByName($name : String!) {\n    simpleLdapIdpByName(name : $name) {\n        goid \n        name \n        checksum \n\n        serverUrls \n        useSslClientAuth \n        sslClientKeyAlias \n        bindDnPatternPrefix \n        bindDnPatternSuffix \n        properties { name value }\n    }\n}",
												"variables": "{\n    \"name\" : \"some-ldap\"\n}"
											}
										},
										"url": {
											"raw": "{{source_gw}}",
											"host": [
												"{{source_gw}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Internal Idps",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query InternalIdps {\n    internalIdps {\n        goid \n        name \n        checksum \n        certValidation \n    }\n}",
												"variables": "{}"
											}
										},
										"url": {
											"raw": "{{source_gw}}",
											"host": [
												"{{source_gw}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Federated Members",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query federatedUsers {\n    federatedUsers {\n        goid\n        name\n        login\n        providerName\n        checksum\n\n        subjectDn \n        certBase64 \n        firstName \n        lastName \n        email\n\n        memberOf {\n            name\n        }\n    }\n\n    federatedGroups {\n        goid \n        name \n        providerName \n        checksum \n        \n        description\n        members { name }\n    }\n}",
												"variables": "{}"
											}
										},
										"url": {
											"raw": "{{source_gw}}",
											"host": [
												"{{source_gw}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Federated User By Name",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query federatedUserByName($providerName: String!, $name: String!) {\n    federatedUserByName (providerName: $providerName, name : $name){\n        goid\n        name\n        login\n        providerName\n        checksum\n\n        subjectDn \n        certBase64 \n        firstName \n        lastName \n        email\n\n        memberOf {\n            name\n        }\n    }\n}",
												"variables": "{\n    \"providerName\" : \"some-fip\",\n    \"name\" : \"some-fip-user\"\n}"
											}
										},
										"url": {
											"raw": "{{source_gw}}",
											"host": [
												"{{source_gw}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Federated Group By Name",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query federatedGroupByName($providerName: String!, $name: String!) {\n    federatedGroupByName(providerName: $providerName, name : $name) {\n        goid\n        name\n        providerName\n        checksum\n\n        description\n        members { name }\n    }\n}",
												"variables": "{\n    \"providerName\": \"some-fip\",\n    \"name\": \"some-fip-group\"\n    \n}"
											}
										},
										"url": {
											"raw": "{{source_gw}}",
											"host": [
												"{{source_gw}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Internal Members",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query internalUsers {\n    internalUsers {\n        goid \n        name \n        login \n        checksum \n        \n        enabled \n        password \n        certBase64 \n        sshPublicKey\n        firstName \n        lastName \n        email\n\n        memberOf {\n            name\n        }\n    }\n\n    internalGroups {\n        goid \n        name \n        checksum \n        description\n\n        members {\n            name\n        }\n    }\n}",
												"variables": "{}"
											}
										},
										"url": {
											"raw": "{{source_gw}}",
											"host": [
												"{{source_gw}}"
											]
										},
										"description": "# Get Internal Users"
									},
									"response": []
								},
								{
									"name": "Internal User By Login",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query internalUserByLogin ($login: String!) {\n    internalUserByLogin(login : $login) {\n        goid \n        name \n        login \n        checksum \n        \n        enabled \n        password \n        certBase64 \n        firstName \n        lastName \n        email\n\n        memberOf {\n            name\n        }\n    }\n}",
												"variables": "{\n    \"login\" : \"some-internal-user\"\n}"
											}
										},
										"url": {
											"raw": "{{source_gw}}",
											"host": [
												"{{source_gw}}"
											]
										},
										"description": "# Get Internal User by Login"
									},
									"response": []
								},
								{
									"name": "Internal Group By Name",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query internalGroupByName($name: String!) {\n    internalGroupByName(name : $name) {\n        goid\n        name\n        checksum\n        description\n\n        members {name}\n    }\n}",
												"variables": "{\n    \"name\" : \"some-internal-group\"\n}"
											}
										},
										"url": {
											"raw": "{{source_gw}}",
											"host": [
												"{{source_gw}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Search Internal IdP",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query searchIdp ($internalFilter: IdpFilter!, $fipFilter: IdpFilter!) {\n\n    searchInternalIdp (filter : $internalFilter) {\n        internalUsers {\n            goid\n            name\n            login\n            checksum\n        }\n        \n        internalGroups {\n            goid\n            name\n            checksum\n        }\n    }\n\n    searchFederatedIdp (filter: $fipFilter) {\n        federatedUsers {\n            goid\n            name\n            login\n            providerName\n            checksum\n        }\n\n        federatedGroups {\n            goid\n            name\n            providerName\n            checksum\n        }\n    }\n}",
												"variables": "{\n    \"internalFilter\": {\n        \"providerName\": \"Internal Identity\",\n        \"namePattern\" : \"some*\"\n    },\n\n    \"fipFilter\" : {\n        \"providerName\": \"some-fip\",\n        \"namePattern\" : \"some*\"\n    }\n}"
											}
										},
										"url": {
											"raw": "{{source_gw}}",
											"host": [
												"{{source_gw}}"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Internal Services",
					"item": [
						{
							"name": "Mutation",
							"item": [
								{
									"name": "Set Internal Services",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation setInternalServices (\n    $internalWebApiServices: [WebApiServiceInput!]!,\n    $internalSoapServices: [SoapServiceInput!]!) {\n    setInternalWebApiServices (input: $internalWebApiServices) {\n        detailedStatus {\n            action status description\n            source {name value}\n            target {name value}\n        }\n    }\n\n    setInternalSoapServices (input: $internalSoapServices) {\n        detailedStatus {\n            action status description\n            source {name value}\n            target {name value}\n        }\n    }\n}",
												"variables": "{\n  \"internalWebApiServices\": [{\n    \"name\" : \"some-internal-webapi-service\",\n    \"folderPath\" : \"/graphman-tests/internalWebApiServices\",\n    \"resolutionPath\": \"/some-internal-webapi\",\n    \"methodsAllowed\": [\n        \"GET\",\n        \"POST\",\n        \"PUT\",\n        \"DELETE\"\n    ],\n    \"enabled\": true,\n    \"policy\": {\n        \"xml\": \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n<wsp:Policy xmlns:L7p=\\\"http://www.layer7tech.com/ws/policy\\\" xmlns:wsp=\\\"http://schemas.xmlsoap.org/ws/2002/12/policy\\\">\\n    <wsp:All wsp:Usage=\\\"Required\\\">\\n        <L7p:Include>\\n            <L7p:Enabled booleanValue=\\\"false\\\"/>\\n            <L7p:PolicyGuid stringValue=\\\"1871928d-c4a3-4456-ab50-b86d3230c908\\\"/>\\n        </L7p:Include>\\n        <L7p:Include>\\n            <L7p:PolicyGuid stringValue=\\\"553fcf5f-d0a8-4cde-8b6a-a24644d241d0\\\"/>\\n        </L7p:Include>\\n        <L7p:HardcodedResponse>\\n            <L7p:Base64ResponseBody stringValue=\\\"ewogInJvbGVzIiA6ICIke3JvbGVzfSIKfQ==\\\"/>\\n            <L7p:ResponseContentType stringValue=\\\"application/json; charset=UTF-8\\\"/>\\n        </L7p:HardcodedResponse>\\n    </wsp:All>\\n</wsp:Policy>\\n\"\n    }\n  }],\n\n  \"internalSoapServices\": [{\n    \"name\": \"some-internal-soap-service\",\n    \"folderPath\": \"/graphman-tests/internalSoapServices\",\n    \"resolutionPath\" : \"/some-internal-soap\",\n    \"wsdl\": \"<definitions targetNamespace=\\\"http://warehouse.acme.com/ws\\\" xmlns=\\\"http://schemas.xmlsoap.org/wsdl/\\\" xmlns:http=\\\"http://schemas.xmlsoap.org/wsdl/http/\\\" xmlns:mime=\\\"http://schemas.xmlsoap.org/wsdl/mime/\\\" xmlns:s=\\\"http://www.w3.org/2001/XMLSchema\\\" xmlns:s0=\\\"http://warehouse.acme.com/ws\\\" xmlns:soap=\\\"http://schemas.xmlsoap.org/wsdl/soap/\\\" xmlns:soapenc=\\\"http://schemas.xmlsoap.org/soap/encoding/\\\" xmlns:tm=\\\"http://microsoft.com/wsdl/mime/textMatching/\\\">\\n  <types>\\n    <s:schema elementFormDefault=\\\"qualified\\\" targetNamespace=\\\"http://warehouse.acme.com/ws\\\">\\n      <s:element name=\\\"listProducts\\\">\\n        <s:complexType/>\\n      </s:element>\\n      <s:element name=\\\"listProductsResponse\\\">\\n        <s:complexType>\\n          <s:sequence>\\n            <s:element maxOccurs=\\\"1\\\" minOccurs=\\\"0\\\" name=\\\"listProductsResult\\\" type=\\\"s0:ArrayOfProductListHeader\\\"/>\\n          </s:sequence>\\n        </s:complexType>\\n      </s:element>\\n      <s:complexType name=\\\"ArrayOfProductListHeader\\\">\\n        <s:sequence>\\n          <s:element maxOccurs=\\\"unbounded\\\" minOccurs=\\\"0\\\" name=\\\"ProductListHeader\\\" nillable=\\\"true\\\" type=\\\"s0:ProductListHeader\\\"/>\\n        </s:sequence>\\n      </s:complexType>\\n      <s:complexType name=\\\"ProductListHeader\\\">\\n        <s:sequence>\\n          <s:element maxOccurs=\\\"1\\\" minOccurs=\\\"0\\\" name=\\\"productName\\\" type=\\\"s:string\\\"/>\\n          <s:element maxOccurs=\\\"1\\\" minOccurs=\\\"1\\\" name=\\\"productId\\\" type=\\\"s:long\\\"/>\\n        </s:sequence>\\n      </s:complexType>\\n      <s:element name=\\\"getProductDetails\\\">\\n        <s:complexType>\\n          <s:sequence>\\n            <s:element maxOccurs=\\\"1\\\" minOccurs=\\\"1\\\" name=\\\"productid\\\" type=\\\"s:long\\\"/>\\n          </s:sequence>\\n        </s:complexType>\\n      </s:element>\\n      <s:element name=\\\"getProductDetailsResponse\\\">\\n        <s:complexType>\\n          <s:sequence>\\n            <s:element maxOccurs=\\\"1\\\" minOccurs=\\\"0\\\" name=\\\"getProductDetailsResult\\\" type=\\\"s0:ProductDetails\\\"/>\\n          </s:sequence>\\n        </s:complexType>\\n      </s:element>\\n      <s:complexType name=\\\"ProductDetails\\\">\\n        <s:complexContent mixed=\\\"false\\\">\\n          <s:extension base=\\\"s0:ProductListHeader\\\">\\n            <s:sequence>\\n              <s:element maxOccurs=\\\"1\\\" minOccurs=\\\"0\\\" name=\\\"description\\\" type=\\\"s:string\\\"/>\\n              <s:element maxOccurs=\\\"1\\\" minOccurs=\\\"1\\\" name=\\\"price\\\" type=\\\"s:float\\\"/>\\n              <s:element maxOccurs=\\\"1\\\" minOccurs=\\\"1\\\" name=\\\"inStock\\\" type=\\\"s:boolean\\\"/>\\n            </s:sequence>\\n          </s:extension>\\n        </s:complexContent>\\n      </s:complexType>\\n      <s:element name=\\\"placeOrder\\\">\\n        <s:complexType>\\n          <s:sequence>\\n            <s:element maxOccurs=\\\"1\\\" minOccurs=\\\"1\\\" name=\\\"productid\\\" type=\\\"s:long\\\"/>\\n            <s:element maxOccurs=\\\"1\\\" minOccurs=\\\"1\\\" name=\\\"amount\\\" type=\\\"s:long\\\"/>\\n            <s:element maxOccurs=\\\"1\\\" minOccurs=\\\"1\\\" name=\\\"price\\\" type=\\\"s:float\\\"/>\\n            <s:element maxOccurs=\\\"1\\\" minOccurs=\\\"1\\\" name=\\\"accountid\\\" type=\\\"s:long\\\"/>\\n          </s:sequence>\\n        </s:complexType>\\n      </s:element>\\n      <s:element name=\\\"placeOrderResponse\\\">\\n        <s:complexType>\\n          <s:sequence>\\n            <s:element maxOccurs=\\\"1\\\" minOccurs=\\\"1\\\" name=\\\"placeOrderResult\\\" type=\\\"s:long\\\"/>\\n          </s:sequence>\\n        </s:complexType>\\n      </s:element>\\n      <s:element name=\\\"currentOrders\\\">\\n        <s:complexType>\\n          <s:sequence>\\n            <s:element maxOccurs=\\\"1\\\" minOccurs=\\\"1\\\" name=\\\"accountid\\\" type=\\\"s:long\\\"/>\\n          </s:sequence>\\n        </s:complexType>\\n      </s:element>\\n      <s:element name=\\\"currentOrdersResponse\\\">\\n        <s:complexType>\\n          <s:sequence>\\n            <s:element maxOccurs=\\\"1\\\" minOccurs=\\\"0\\\" name=\\\"currentOrdersResult\\\" type=\\\"s0:ArrayOfOrder\\\"/>\\n          </s:sequence>\\n        </s:complexType>\\n      </s:element>\\n      <s:complexType name=\\\"ArrayOfOrder\\\">\\n        <s:sequence>\\n          <s:element maxOccurs=\\\"unbounded\\\" minOccurs=\\\"0\\\" name=\\\"Order\\\" nillable=\\\"true\\\" type=\\\"s0:Order\\\"/>\\n        </s:sequence>\\n      </s:complexType>\\n      <s:complexType name=\\\"Order\\\">\\n        <s:sequence>\\n          <s:element maxOccurs=\\\"1\\\" minOccurs=\\\"1\\\" name=\\\"date\\\" type=\\\"s:dateTime\\\"/>\\n          <s:element maxOccurs=\\\"1\\\" minOccurs=\\\"1\\\" name=\\\"accountId\\\" type=\\\"s:long\\\"/>\\n          <s:element maxOccurs=\\\"1\\\" minOccurs=\\\"1\\\" name=\\\"productId\\\" type=\\\"s:long\\\"/>\\n          <s:element maxOccurs=\\\"1\\\" minOccurs=\\\"1\\\" name=\\\"amount\\\" type=\\\"s:long\\\"/>\\n          <s:element maxOccurs=\\\"1\\\" minOccurs=\\\"1\\\" name=\\\"price\\\" type=\\\"s:float\\\"/>\\n          <s:element maxOccurs=\\\"1\\\" minOccurs=\\\"1\\\" name=\\\"confirmationId\\\" type=\\\"s:long\\\"/>\\n        </s:sequence>\\n      </s:complexType>\\n    </s:schema>\\n  </types>\\n  <message name=\\\"listProductsSoapIn\\\">\\n    <part element=\\\"s0:listProducts\\\" name=\\\"parameters\\\"/>\\n  </message>\\n  <message name=\\\"listProductsSoapOut\\\">\\n    <part element=\\\"s0:listProductsResponse\\\" name=\\\"parameters\\\"/>\\n  </message>\\n  <message name=\\\"getProductDetailsSoapIn\\\">\\n    <part element=\\\"s0:getProductDetails\\\" name=\\\"parameters\\\"/>\\n  </message>\\n  <message name=\\\"getProductDetailsSoapOut\\\">\\n    <part element=\\\"s0:getProductDetailsResponse\\\" name=\\\"parameters\\\"/>\\n  </message>\\n  <message name=\\\"placeOrderSoapIn\\\">\\n    <part element=\\\"s0:placeOrder\\\" name=\\\"parameters\\\"/>\\n  </message>\\n  <message name=\\\"placeOrderSoapOut\\\">\\n    <part element=\\\"s0:placeOrderResponse\\\" name=\\\"parameters\\\"/>\\n  </message>\\n  <message name=\\\"currentOrdersSoapIn\\\">\\n    <part element=\\\"s0:currentOrders\\\" name=\\\"parameters\\\"/>\\n  </message>\\n  <message name=\\\"currentOrdersSoapOut\\\">\\n    <part element=\\\"s0:currentOrdersResponse\\\" name=\\\"parameters\\\"/>\\n  </message>\\n  <portType name=\\\"WarehouseSoap\\\">\\n    <operation name=\\\"listProducts\\\">\\n      <input message=\\\"s0:listProductsSoapIn\\\"/>\\n      <output message=\\\"s0:listProductsSoapOut\\\"/>\\n    </operation>\\n    <operation name=\\\"getProductDetails\\\">\\n      <input message=\\\"s0:getProductDetailsSoapIn\\\"/>\\n      <output message=\\\"s0:getProductDetailsSoapOut\\\"/>\\n    </operation>\\n    <operation name=\\\"placeOrder\\\">\\n      <input message=\\\"s0:placeOrderSoapIn\\\"/>\\n      <output message=\\\"s0:placeOrderSoapOut\\\"/>\\n    </operation>\\n    <operation name=\\\"currentOrders\\\">\\n      <input message=\\\"s0:currentOrdersSoapIn\\\"/>\\n      <output message=\\\"s0:currentOrdersSoapOut\\\"/>\\n    </operation>\\n  </portType>\\n  <binding name=\\\"WarehouseSoap\\\" type=\\\"s0:WarehouseSoap\\\">\\n    <soap:binding style=\\\"document\\\" transport=\\\"http://schemas.xmlsoap.org/soap/http\\\"/>\\n    <operation name=\\\"listProducts\\\">\\n      <soap:operation soapAction=\\\"http://warehouse.acme.com/ws/listProducts\\\" style=\\\"document\\\"/>\\n      <input>\\n        <soap:body use=\\\"literal\\\"/>\\n      </input>\\n      <output>\\n        <soap:body use=\\\"literal\\\"/>\\n      </output>\\n    </operation>\\n    <operation name=\\\"getProductDetails\\\">\\n      <soap:operation soapAction=\\\"http://warehouse.acme.com/ws/getProductDetails\\\" style=\\\"document\\\"/>\\n      <input>\\n        <soap:body use=\\\"literal\\\"/>\\n      </input>\\n      <output>\\n        <soap:body use=\\\"literal\\\"/>\\n      </output>\\n    </operation>\\n    <operation name=\\\"placeOrder\\\">\\n      <soap:operation soapAction=\\\"http://warehouse.acme.com/ws/placeOrder\\\" style=\\\"document\\\"/>\\n      <input>\\n        <soap:body use=\\\"literal\\\"/>\\n      </input>\\n      <output>\\n        <soap:body use=\\\"literal\\\"/>\\n      </output>\\n    </operation>\\n    <operation name=\\\"currentOrders\\\">\\n      <soap:operation soapAction=\\\"http://warehouse.acme.com/ws/currentOrders\\\" style=\\\"document\\\"/>\\n      <input>\\n        <soap:body use=\\\"literal\\\"/>\\n      </input>\\n      <output>\\n        <soap:body use=\\\"literal\\\"/>\\n      </output>\\n    </operation>\\n  </binding>\\n  <service name=\\\"Warehouse\\\">\\n    <port binding=\\\"s0:WarehouseSoap\\\" name=\\\"WarehouseSoap\\\">\\n      <soap:address location=\\\"http://hugh/ACMEWarehouseWS/Service1.asmx\\\"/>\\n    </port>\\n  </service>\\n</definitions>\",\n    \n    \"wssProcessingEnabled\": true,\n    \"enabled\": true,\n    \"methodsAllowed\": [\n        \"POST\"\n    ],\n    \"policy\": {\n        \"xml\": \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n<wsp:Policy xmlns:L7p=\\\"http://www.layer7tech.com/ws/policy\\\" xmlns:wsp=\\\"http://schemas.xmlsoap.org/ws/2002/12/policy\\\">\\n    <wsp:All wsp:Usage=\\\"Required\\\">\\n        <L7p:SchemaValidation>\\n            <L7p:ResourceInfo staticResourceInfo=\\\"included\\\">\\n                <L7p:Document stringValueReference=\\\"inline\\\"><![CDATA[<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n<s:schema elementFormDefault=\\\"qualified\\\"\\n    targetNamespace=\\\"http://warehouse.acme.com/ws\\\"\\n    xmlns:http=\\\"http://schemas.xmlsoap.org/wsdl/http/\\\"\\n    xmlns:mime=\\\"http://schemas.xmlsoap.org/wsdl/mime/\\\"\\n    xmlns:s=\\\"http://www.w3.org/2001/XMLSchema\\\"\\n    xmlns:s0=\\\"http://warehouse.acme.com/ws\\\"\\n    xmlns:soap=\\\"http://schemas.xmlsoap.org/wsdl/soap/\\\"\\n    xmlns:soapenc=\\\"http://schemas.xmlsoap.org/soap/encoding/\\\" xmlns:tm=\\\"http://microsoft.com/wsdl/mime/textMatching/\\\">\\n    <s:element name=\\\"listProducts\\\">\\n        <s:complexType/>\\n    </s:element>\\n    <s:element name=\\\"listProductsResponse\\\">\\n        <s:complexType>\\n            <s:sequence>\\n                <s:element maxOccurs=\\\"1\\\" minOccurs=\\\"0\\\"\\n                    name=\\\"listProductsResult\\\" type=\\\"s0:ArrayOfProductListHeader\\\"/>\\n            </s:sequence>\\n        </s:complexType>\\n    </s:element>\\n    <s:complexType name=\\\"ArrayOfProductListHeader\\\">\\n        <s:sequence>\\n            <s:element maxOccurs=\\\"unbounded\\\" minOccurs=\\\"0\\\"\\n                name=\\\"ProductListHeader\\\" nillable=\\\"true\\\" type=\\\"s0:ProductListHeader\\\"/>\\n        </s:sequence>\\n    </s:complexType>\\n    <s:complexType name=\\\"ProductListHeader\\\">\\n        <s:sequence>\\n            <s:element maxOccurs=\\\"1\\\" minOccurs=\\\"0\\\" name=\\\"productName\\\" type=\\\"s:string\\\"/>\\n            <s:element maxOccurs=\\\"1\\\" minOccurs=\\\"1\\\" name=\\\"productId\\\" type=\\\"s:long\\\"/>\\n        </s:sequence>\\n    </s:complexType>\\n    <s:element name=\\\"getProductDetails\\\">\\n        <s:complexType>\\n            <s:sequence>\\n                <s:element maxOccurs=\\\"1\\\" minOccurs=\\\"1\\\" name=\\\"productid\\\" type=\\\"s:long\\\"/>\\n            </s:sequence>\\n        </s:complexType>\\n    </s:element>\\n    <s:element name=\\\"getProductDetailsResponse\\\">\\n        <s:complexType>\\n            <s:sequence>\\n                <s:element maxOccurs=\\\"1\\\" minOccurs=\\\"0\\\"\\n                    name=\\\"getProductDetailsResult\\\" type=\\\"s0:ProductDetails\\\"/>\\n            </s:sequence>\\n        </s:complexType>\\n    </s:element>\\n    <s:complexType name=\\\"ProductDetails\\\">\\n        <s:complexContent mixed=\\\"false\\\">\\n            <s:extension base=\\\"s0:ProductListHeader\\\">\\n                <s:sequence>\\n                    <s:element maxOccurs=\\\"1\\\" minOccurs=\\\"0\\\"\\n                        name=\\\"description\\\" type=\\\"s:string\\\"/>\\n                    <s:element maxOccurs=\\\"1\\\" minOccurs=\\\"1\\\" name=\\\"price\\\" type=\\\"s:float\\\"/>\\n                    <s:element maxOccurs=\\\"1\\\" minOccurs=\\\"1\\\"\\n                        name=\\\"inStock\\\" type=\\\"s:boolean\\\"/>\\n                </s:sequence>\\n            </s:extension>\\n        </s:complexContent>\\n    </s:complexType>\\n    <s:element name=\\\"placeOrder\\\">\\n        <s:complexType>\\n            <s:sequence>\\n                <s:element maxOccurs=\\\"1\\\" minOccurs=\\\"1\\\" name=\\\"productid\\\" type=\\\"s:long\\\"/>\\n                <s:element maxOccurs=\\\"1\\\" minOccurs=\\\"1\\\" name=\\\"amount\\\" type=\\\"s:long\\\"/>\\n                <s:element maxOccurs=\\\"1\\\" minOccurs=\\\"1\\\" name=\\\"price\\\" type=\\\"s:float\\\"/>\\n                <s:element maxOccurs=\\\"1\\\" minOccurs=\\\"1\\\" name=\\\"accountid\\\" type=\\\"s:long\\\"/>\\n            </s:sequence>\\n        </s:complexType>\\n    </s:element>\\n    <s:element name=\\\"placeOrderResponse\\\">\\n        <s:complexType>\\n            <s:sequence>\\n                <s:element maxOccurs=\\\"1\\\" minOccurs=\\\"1\\\"\\n                    name=\\\"placeOrderResult\\\" type=\\\"s:long\\\"/>\\n            </s:sequence>\\n        </s:complexType>\\n    </s:element>\\n    <s:element name=\\\"currentOrders\\\">\\n        <s:complexType>\\n            <s:sequence>\\n                <s:element maxOccurs=\\\"1\\\" minOccurs=\\\"1\\\" name=\\\"accountid\\\" type=\\\"s:long\\\"/>\\n            </s:sequence>\\n        </s:complexType>\\n    </s:element>\\n    <s:element name=\\\"currentOrdersResponse\\\">\\n        <s:complexType>\\n            <s:sequence>\\n                <s:element maxOccurs=\\\"1\\\" minOccurs=\\\"0\\\"\\n                    name=\\\"currentOrdersResult\\\" type=\\\"s0:ArrayOfOrder\\\"/>\\n            </s:sequence>\\n        </s:complexType>\\n    </s:element>\\n    <s:complexType name=\\\"ArrayOfOrder\\\">\\n        <s:sequence>\\n            <s:element maxOccurs=\\\"unbounded\\\" minOccurs=\\\"0\\\" name=\\\"Order\\\"\\n                nillable=\\\"true\\\" type=\\\"s0:Order\\\"/>\\n        </s:sequence>\\n    </s:complexType>\\n    <s:complexType name=\\\"Order\\\">\\n        <s:sequence>\\n            <s:element maxOccurs=\\\"1\\\" minOccurs=\\\"1\\\" name=\\\"date\\\" type=\\\"s:dateTime\\\"/>\\n            <s:element maxOccurs=\\\"1\\\" minOccurs=\\\"1\\\" name=\\\"accountId\\\" type=\\\"s:long\\\"/>\\n            <s:element maxOccurs=\\\"1\\\" minOccurs=\\\"1\\\" name=\\\"productId\\\" type=\\\"s:long\\\"/>\\n            <s:element maxOccurs=\\\"1\\\" minOccurs=\\\"1\\\" name=\\\"amount\\\" type=\\\"s:long\\\"/>\\n            <s:element maxOccurs=\\\"1\\\" minOccurs=\\\"1\\\" name=\\\"price\\\" type=\\\"s:float\\\"/>\\n            <s:element maxOccurs=\\\"1\\\" minOccurs=\\\"1\\\" name=\\\"confirmationId\\\" type=\\\"s:long\\\"/>\\n        </s:sequence>\\n    </s:complexType>\\n</s:schema>\\n]]></L7p:Document>\\n                <L7p:OriginalUrl stringValue=\\\"file:/Users/flascelles/Documents/soap/Warehouse_WSDL.wsdl#.xsd1\\\"/>\\n            </L7p:ResourceInfo>\\n            <L7p:Target target=\\\"REQUEST\\\"/>\\n        </L7p:SchemaValidation>\\n        <L7p:SchemaValidation>\\n            <L7p:ResourceInfo globalResourceInfo=\\\"included\\\">\\n                <L7p:Id stringValue=\\\"http://warehouse.io/mywarehouse\\\"/>\\n            </L7p:ResourceInfo>\\n            <L7p:Target target=\\\"REQUEST\\\"/>\\n        </L7p:SchemaValidation>\\n        <L7p:HttpRoutingAssertion>\\n            <L7p:ProtectedServiceUrl stringValue=\\\"http://hugh/ACMEWarehouseWS/Service1.asmx\\\"/>\\n            <L7p:RequestHeaderRules httpPassthroughRuleSet=\\\"included\\\">\\n                <L7p:Rules httpPassthroughRules=\\\"included\\\">\\n                    <L7p:item httpPassthroughRule=\\\"included\\\">\\n                        <L7p:Name stringValue=\\\"Cookie\\\"/>\\n                    </L7p:item>\\n                    <L7p:item httpPassthroughRule=\\\"included\\\">\\n                        <L7p:Name stringValue=\\\"SOAPAction\\\"/>\\n                    </L7p:item>\\n                </L7p:Rules>\\n            </L7p:RequestHeaderRules>\\n            <L7p:RequestParamRules httpPassthroughRuleSet=\\\"included\\\">\\n                <L7p:ForwardAll booleanValue=\\\"true\\\"/>\\n                <L7p:Rules httpPassthroughRules=\\\"included\\\"/>\\n            </L7p:RequestParamRules>\\n            <L7p:ResponseHeaderRules httpPassthroughRuleSet=\\\"included\\\">\\n                <L7p:Rules httpPassthroughRules=\\\"included\\\">\\n                    <L7p:item httpPassthroughRule=\\\"included\\\">\\n                        <L7p:Name stringValue=\\\"Set-Cookie\\\"/>\\n                    </L7p:item>\\n                </L7p:Rules>\\n            </L7p:ResponseHeaderRules>\\n        </L7p:HttpRoutingAssertion>\\n    </wsp:All>\\n</wsp:Policy>\\n\"\n    }\n  }]\n}"
											}
										},
										"url": {
											"raw": "{{target_gw}}",
											"host": [
												"{{target_gw}}"
											]
										},
										"description": "# Create Web Api Service\n\nCreate a new service on the target gateway.\n\nInput: See sample for input. Here is a sample:\n\n``` json\n{  \"input\": {    \"name\" : \"New service created\",    \"folderPath\" : \"/migrationTest\",    \"resolutionPath\": \"/testNewService17\",            \"methodsAllowed\": [                \"GET\",                \"POST\",                \"PUT\",                \"DELETE\"            ],            \"enabled\": true,            \"policy\": {                \"xml\": \"wsp:Policy...\"            }  }}\n\n```"
									},
									"response": []
								},
								{
									"name": "Delete Internal Services",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation deleteInternalServices (\n    $internalWebApiServices: [String!]!,\n    $internalSoapServices: [SoapServiceResolverInput!]!) {\n    deleteInternalWebApiServices (resolutionPaths: $internalWebApiServices) {\n        detailedStatus {\n            action status description\n            source {name value}\n            target {name value}\n        }\n    }\n\n    deleteInternalSoapServices (resolvers: $internalSoapServices) {\n        detailedStatus {\n            action status description\n            source {name value}\n            target {name value}\n        }\n    }\n}",
												"variables": "{\n    \"internalWebApiServices\" : [\n        \"/some-internal-webapi\"\n    ],\n    \"internalSoapServices\": \n      [{\n        \"soapAction\": [\n            \"http://warehouse.acme.com/ws/listProducts\",\n            \"http://warehouse.acme.com/ws/getProductDetails\",\n            \"http://warehouse.acme.com/ws/placeOrder\",\n            \"http://warehouse.acme.com/ws/currentOrders\"\n        ],\n        \"baseUri\": \"http://warehouse.acme.com/ws\",\n        \"resolutionPath\": \"/some-internal-soap\"\n      }]\n}"
											}
										},
										"url": {
											"raw": "{{target_gw}}",
											"host": [
												"{{target_gw}}"
											]
										},
										"description": "# Delete Web Api Service\n\nDeletes a Web Api Service given its resolution path.\n\nInput: resolutionPath"
									},
									"response": []
								}
							]
						},
						{
							"name": "Query",
							"item": [
								{
									"name": "All Internal Web API Services",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query internalWebApiServices {\n    internalWebApiServices {\n        goid \n        name \n        resolutionPath \n        checksum \n        \n        enabled \n        folderPath \n        methodsAllowed \n        tracingEnabled \n        wssProcessingEnabled \n        properties { name value } \n        policy { xml }\n    }\n}",
												"variables": ""
											}
										},
										"url": {
											"raw": "{{local_gw}}",
											"host": [
												"{{local_gw}}"
											]
										},
										"description": "# List all Web Api Services\n\nList all of the services\n\nInput: no input"
									},
									"response": []
								},
								{
									"name": "All Internal Soap Services",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query internalSoapServices {\n    internalSoapServices {\n        goid \n        name \n        resolutionPath \n        resolvers { soapActions baseUri resolutionPath } \n        checksum \n        \n        enabled \n        folderPath \n        soapVersion \n        methodsAllowed \n        tracingEnabled \n        wssProcessingEnabled \n        laxResolution \n        properties { name value } \n        wsdl \n        policy { xml }\n    }\n}\n",
												"variables": ""
											}
										},
										"url": {
											"raw": "{{source_gw}}",
											"host": [
												"{{source_gw}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Internal Web API Service by Name",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query internalWebApiServiceByName ($name: String!) {\n    internalWebApiServiceByName (name: $name) {\n        goid \n        name \n        resolutionPath \n        checksum \n        \n        enabled \n        folderPath \n        methodsAllowed \n        tracingEnabled \n        wssProcessingEnabled \n        properties { name value } \n        policy { xml }\n    }\n}",
												"variables": "{\n    \"name\": \"some-internal-webapi-service\"\n}"
											}
										},
										"url": {
											"raw": "{{source_gw}}",
											"host": [
												"{{source_gw}}"
											]
										},
										"description": "# List all Web Api Services\n\nList all of the services\n\nInput: no input"
									},
									"response": []
								},
								{
									"name": "Internal Soap Service by Name",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query internalSoapServiceByName($name: String!) {\n    internalSoapServiceByName(name : $name) {\n        goid \n        name \n        resolutionPath \n        resolvers { soapActions baseUri resolutionPath } \n        checksum \n        \n        enabled \n        folderPath \n        soapVersion \n        methodsAllowed \n        tracingEnabled \n        wssProcessingEnabled \n        laxResolution \n        properties { name value } \n        wsdl \n        policy { xml }\n    }\n}",
												"variables": "{\n    \"name\": \"some-internal-soap-service\"\n}"
											}
										},
										"url": {
											"raw": "{{source_gw}}",
											"host": [
												"{{source_gw}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Internal Web API Service by ResolutionPath",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query internalWebApiServiceByResolutionPath ($resolutionPath: String!) {\n    internalWebApiServiceByResolutionPath (resolutionPath: $resolutionPath) {\n        goid \n        name \n        resolutionPath \n        checksum \n        \n        enabled \n        folderPath \n        methodsAllowed \n        tracingEnabled \n        wssProcessingEnabled \n        properties { name value } \n        policy { xml }\n    }\n}",
												"variables": "{\n    \"resolutionPath\": \"/some-internal-webapi\"\n}"
											}
										},
										"url": {
											"raw": "{{source_gw}}",
											"host": [
												"{{source_gw}}"
											]
										},
										"description": "# List all Web Api Services\n\nList all of the services\n\nInput: no input"
									},
									"response": []
								},
								{
									"name": "Internal Services by FolderPath",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query internalServicesByFolderPath($folderPath: String!) {\n    internalWebApiServicesByFolderPath(folderPath: $folderPath) {\n        goid \n        name \n        resolutionPath \n        checksum \n        \n        enabled \n        folderPath \n        methodsAllowed \n        tracingEnabled \n        wssProcessingEnabled \n        properties { name value } \n        policy { xml }\n    }\n\n    internalSoapServicesByFolderPath(folderPath: $folderPath) {\n        goid \n        name \n        resolutionPath \n        resolvers { soapActions baseUri resolutionPath } \n        checksum \n        \n        enabled \n        folderPath \n        soapVersion \n        methodsAllowed \n        tracingEnabled \n        wssProcessingEnabled \n        laxResolution \n        properties { name value } \n        wsdl \n        policy { xml }\n    }\n}",
												"variables": "{\n    \"folderPath\": \"/graphman-tests\"\n}"
											}
										},
										"url": {
											"raw": "{{source_gw}}",
											"host": [
												"{{source_gw}}"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "JDBC Connections",
					"item": [
						{
							"name": "Mutations",
							"item": [
								{
									"name": "Set JDBC Connections",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation setJdbcConnections($jdbcConnections: [JdbcConnectionInput!]!) {\n    setJdbcConnections(input: $jdbcConnections) {\n        detailedStatus {\n            action status description\n            source {name value}\n            target {name value}\n        }\n    }\n}",
												"variables": "{  \n  \"jdbcConnections\": [\n    {\n      \"name\": \"some-jdbc-connection\",\n      \"enabled\": true,\n      \"driverClass\": \"com.mysql.jdbc.Driver\",\n      \"jdbcUrl\": \"jdbc:mysql://some-host:3306/some-db\",\n      \"username\": \"\",\n      \"password\": \"\",\n      \"minPoolSize\": 3,\n      \"maxPoolSize\": 15,\n      \"properties\": [\n        {\n          \"name\": \"EnableCancelTimeout\",\n          \"value\": \"true\"\n        }\n      ]\n    },\n    {\n      \"name\": \"some-other-jdbc-connection\",\n      \"enabled\": true,\n      \"driverClass\": \"com.mysql.jdbc.Driver\",\n      \"jdbcUrl\": \"jdbc:mysql://some-host:3306/some-db\",\n      \"username\": \"some-user\",\n      \"password\": \"JEw3RXYwMiSYdiDXf0GfXyx7xuyVqWlE8yY/G1juFZr9NQTNL2WkYg==\",\n      \"minPoolSize\": 3,\n      \"maxPoolSize\": 15,\n      \"properties\": [\n        {\n          \"name\": \"EnableCancelTimeout\",\n          \"value\": \"true\"\n        }\n      ]\n    }\n  ]\n}"
											}
										},
										"url": {
											"raw": "{{target_gw}}",
											"host": [
												"{{target_gw}}"
											]
										},
										"description": "# Set JDBC Connections\n\nSet multiple JDBC Connections altogether"
									},
									"response": []
								},
								{
									"name": "Update JDBC Connection (experimental)",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation updateJdbcConnection($jdbcConnection: JdbcConnectionPartialInput!) {\n    updateJdbcConnection (input: $jdbcConnection) {\n        detailedStatus {\n            action status description\n            source {name value}\n            target {name value}\n        }\n        jdbcConnection {\n            goid\n            name\n            checksum\n\n            # modified field\n            username \n            password\n            minPoolSize\n        }\n    }\n}",
												"variables": "{\n  \"jdbcConnection\": {\n    \"name\": \"some-other-jdbc-connection\",\n\n    \"username\": \"some-other-user\",\n    \"password\": \"changeit\",\n    \"minPoolSize\": 3\n  }\n}"
											}
										},
										"url": {
											"raw": "{{target_gw}}",
											"host": [
												"{{target_gw}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete JDBC Connections",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation deleteJdbcConnections($jdbcConnections: [String!]!) {\n    deleteJdbcConnections(names: $jdbcConnections) {\n        detailedStatus {\n            action status description\n            source {name value}\n            target {name value}\n        }\n    }\n}",
												"variables": "{\n    \"jdbcConnections\": [\n        \"some-jdbc-connection\",\n        \"some-other-jdbc-connection\"\n    ]\n}"
											}
										},
										"url": {
											"raw": "{{target_gw}}",
											"host": [
												"{{target_gw}}"
											]
										},
										"description": "# Delete JDBC Connection"
									},
									"response": []
								}
							]
						},
						{
							"name": "Queries",
							"item": [
								{
									"name": "All JDBC Connections",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "{\n    jdbcConnections {\n        goid \n        name \n        checksum \n        \n        enabled \n        driverClass \n        jdbcUrl \n        username \n        password \n        minPoolSize \n        maxPoolSize \n        properties { name value }\n  }\n}",
												"variables": "{}"
											}
										},
										"url": {
											"raw": "{{source_gw}}",
											"host": [
												"{{source_gw}}"
											]
										},
										"description": "# All JDBC Connections\n\nGet the list of JDBC Connections.\n\nInput: no input"
									},
									"response": []
								},
								{
									"name": "JDBC Connection By Name",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query jdbcConnectionByName($name: String!) {\n    jdbcConnectionByName(name: $name) {\n        goid \n        name \n        checksum \n        \n        enabled \n        driverClass \n        jdbcUrl \n        username \n        password \n        minPoolSize \n        maxPoolSize \n        properties { name value }\n    }\n}",
												"variables": "{\n    \"name\": \"some-jdbc-connection\"\n}"
											}
										},
										"url": {
											"raw": "{{source_gw}}",
											"host": [
												"{{source_gw}}"
											]
										},
										"description": "# JDBC Connections by Name\n\nGet the list of JDBC Connections by Name."
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "JMS Destinations",
					"item": [
						{
							"name": "Mutation",
							"item": [
								{
									"name": "Set JMS Destinations",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation createMultipleJmsDestination(\n    $jmsDestinations: [JmsDestinationInput!]!) {\n    setJmsDestinations (input: $jmsDestinations) {\n        detailedStatus {\n            action status description\n            source {name value}\n            target {name value}\n        }\n    }\n}",
												"variables": "{\n  \"jmsDestinations\": [\n    {\n      \"name\": \"jms-in\",\n      \"direction\": \"INBOUND\",\n      \"providerType\": \"GENERIC JMS\",\n      \"enabled\": true,\n      \"template\": false,\n      \"initialContextFactoryClassname\": \"initial-context-factory\",\n      \"connectionFactoryName\": \"connection-factory\",\n      \"jndiUrl\": \"jndi://url\",\n      \"jndiSslDetails\": {\n        \"sslEnabled\": false,\n        \"sslForAuthenticationOnly\": false,\n        \"sslVerifyServerCertificate\": false,\n        \"sslVerifyServerHostname\": false\n      },\n      \"destinationType\": \"QUEUE\",\n      \"destinationName\": \"queue-destination\",\n      \"destinationSslDetails\": {\n        \"sslEnabled\": false,\n        \"sslForAuthenticationOnly\": false,\n        \"sslVerifyServerCertificate\": false,\n        \"sslVerifyServerHostname\": false\n      },\n      \"properties\": [\n        {\n          \"name\": \"inbound.acknowledgementType\",\n          \"value\": \"AUTOMATIC\"\n        },\n        {\n          \"name\": \"inbound.replyType\",\n          \"value\": \"AUTOMATIC\"\n        },\n        {\n          \"name\": \"inbound.dedicatedConsumerSize\",\n          \"value\": \"1\"\n        },\n        {\n          \"name\": \"inbound.requestMaxSize\",\n          \"value\": \"-1\"\n        },\n        {\n          \"name\": \"inbound.useMessageIdForCorrelation\",\n          \"value\": \"false\"\n        },\n        {\n          \"name\": \"inbound.acknowledgmentType\",\n          \"value\": \"AUTOMATIC\"\n        }\n      ]\n    },\n    {\n      \"name\": \"jms-in-mq-customized\",\n      \"direction\": \"INBOUND\",\n      \"providerType\": \"WEBSPHERE MQ OVER LDAP\",\n      \"enabled\": true,\n      \"template\": false,\n      \"initialContextFactoryClassname\": \"initial-context-factory\",\n      \"connectionFactoryName\": \"connection-factory\",\n      \"jndiUrl\": \"jndi://url\",\n      \"jndiSslDetails\": {\n        \"sslEnabled\": false,\n        \"sslForAuthenticationOnly\": false,\n        \"sslVerifyServerCertificate\": false,\n        \"sslVerifyServerHostname\": false\n      },\n      \"destinationType\": \"TOPIC\",\n      \"destinationName\": \"topic-destination\",\n      \"destinationSslDetails\": {\n        \"sslEnabled\": true,\n        \"sslForAuthenticationOnly\": false,\n        \"sslVerifyServerCertificate\": false,\n        \"sslVerifyServerHostname\": false,\n        \"sslClientKeyAlias\": \"<DEFAULT>\"\n      },\n      \"properties\": [\n        {\n          \"name\": \"inbound.contentTypeSource\",\n          \"value\": \"FREEFORM\"\n        },\n        {\n          \"name\": \"inbound.failureDestination\",\n          \"value\": \"failed-requests-queue\"\n        },\n        {\n          \"name\": \"inbound.acknowledgementType\",\n          \"value\": \"AUTOMATIC\"\n        },\n        {\n          \"name\": \"inbound.replyType\",\n          \"value\": \"REPLY_TO_OTHER\"\n        },\n        {\n          \"name\": \"inbound.contentTypeValueOrProperty\",\n          \"value\": \"application/json\"\n        },\n        {\n          \"name\": \"inbound.soapActionMessageProperty\",\n          \"value\": \"soap-action-property\"\n        },\n        {\n          \"name\": \"inbound.replyTo\",\n          \"value\": \"reply-queue\"\n        },\n        {\n          \"name\": \"inbound.requestMaxSize\",\n          \"value\": \"12345\"\n        },\n        {\n          \"name\": \"inbound.useMessageIdForCorrelation\",\n          \"value\": \"true\"\n        },\n        {\n          \"name\": \"inbound.acknowledgmentType\",\n          \"value\": \"ON_COMPLETION\"\n        },\n        {\n          \"name\": \"hello\",\n          \"value\": \"world\"\n        },\n        {\n          \"name\": \"who\",\n          \"value\": \"am I?\"\n        }\n      ]\n    },\n    {\n      \"name\": \"jms-out\",\n      \"direction\": \"OUTBOUND\",\n      \"providerType\": \"GENERIC JMS\",\n      \"enabled\": true,\n      \"template\": false,\n      \"initialContextFactoryClassname\": \"initial-context-factory\",\n      \"connectionFactoryName\": \"connection-factory\",\n      \"jndiUrl\": \"jndi://url\",\n      \"jndiSslDetails\": {\n        \"sslEnabled\": false,\n        \"sslForAuthenticationOnly\": false,\n        \"sslVerifyServerCertificate\": false,\n        \"sslVerifyServerHostname\": false\n      },\n      \"destinationType\": \"QUEUE\",\n      \"destinationName\": \"queue-destination\",\n      \"destinationSslDetails\": {\n        \"sslEnabled\": false,\n        \"sslForAuthenticationOnly\": false,\n        \"sslVerifyServerCertificate\": false,\n        \"sslVerifyServerHostname\": false\n      },\n      \"properties\": [\n        {\n          \"name\": \"outbound.poolType\",\n          \"value\": \"SESSION\"\n        },\n        {\n          \"name\": \"outbound.replyType\",\n          \"value\": \"AUTOMATIC\"\n        },\n        {\n          \"name\": \"outbound.messageFormat\",\n          \"value\": \"AUTOMATIC\"\n        },\n        {\n          \"name\": \"outbound.useMessageIdForCorrelation\",\n          \"value\": \"false\"\n        }\n      ]\n    },\n    {\n      \"name\": \"jms-out-tibco-customized\",\n      \"direction\": \"OUTBOUND\",\n      \"providerType\": \"TIBCO EMS\",\n      \"enabled\": true,\n      \"template\": false,\n      \"initialContextFactoryClassname\": \"initial-context-factory\",\n      \"connectionFactoryName\": \"connection-factory\",\n      \"jndiUrl\": \"jndi://url\",\n      \"jndiUsername\": \"jndi-user\",\n      \"jndiPassword\": \"JEw3RXYwMiQfcws5nHaVONkmxL7vysdPauDUm8QyXPnocowf0T4WRg==\",\n      \"jndiSslDetails\": {\n        \"sslEnabled\": true,\n        \"sslForAuthenticationOnly\": true,\n        \"sslVerifyServerCertificate\": true,\n        \"sslVerifyServerHostname\": false,\n        \"sslClientKeyAlias\": \"00000000000000000000000000000002:ssl\"\n      },\n      \"destinationType\": \"TOPIC\",\n      \"destinationName\": \"topic-destination\",\n      \"destinationUsername\": \"dest-user\",\n      \"destinationPassword\": \"JEw3RXYwMiRAL0dFRODuVpoUrJNMDHXRzwx1yAG2IPcBWqIlAo0ASQ==\",\n      \"destinationSslDetails\": {\n        \"sslEnabled\": true,\n        \"sslForAuthenticationOnly\": false,\n        \"sslVerifyServerCertificate\": true,\n        \"sslVerifyServerHostname\": true,\n        \"sslClientKeyAlias\": \"00000000000000000000000000000002:ssl\"\n      },\n      \"properties\": [\n        {\n          \"name\": \"outbound.poolType\",\n          \"value\": \"CONNECTION\"\n        },\n        {\n          \"name\": \"outbound.poolMinIdleItems\",\n          \"value\": \"12\"\n        },\n        {\n          \"name\": \"outbound.poolMaxSize\",\n          \"value\": \"123\"\n        },\n        {\n          \"name\": \"outbound.poolItemWaitingTime\",\n          \"value\": \"12345\"\n        },\n        {\n          \"name\": \"outbound.replyType\",\n          \"value\": \"REPLY_TO_OTHER\"\n        },\n        {\n          \"name\": \"outbound.messageFormat\",\n          \"value\": \"ALWAYS_TEXT\"\n        },\n        {\n          \"name\": \"outbound.replyTo\",\n          \"value\": \"reply-queue\"\n        },\n        {\n          \"name\": \"outbound.useMessageIdForCorrelation\",\n          \"value\": \"true\"\n        },\n        {\n          \"name\": \"hello\",\n          \"value\": \"world\"\n        },\n        {\n          \"name\": \"who\",\n          \"value\": \"am I?\"\n        }\n      ]\n    },\n    {\n      \"name\": \"jms-out-weblogic-customized\",\n      \"direction\": \"OUTBOUND\",\n      \"providerType\": \"WEBLOGIC JMS\",\n      \"enabled\": true,\n      \"template\": false,\n      \"initialContextFactoryClassname\": \"initial-context-factory\",\n      \"connectionFactoryName\": \"connection-factory\",\n      \"jndiUrl\": \"jndi://url\",\n      \"jndiUsername\": \"jndi-user\",\n      \"jndiPassword\": \"JEw3RXYwMiTNMWnn7l/KzfEccfn1a0xj7tD2agJH3vshclc7RCc/LA==\",\n      \"jndiSslDetails\": {\n        \"sslEnabled\": false,\n        \"sslForAuthenticationOnly\": false,\n        \"sslVerifyServerCertificate\": false,\n        \"sslVerifyServerHostname\": false\n      },\n      \"destinationType\": \"QUEUE\",\n      \"destinationName\": \"queue-destination\",\n      \"destinationUsername\": \"dest-user\",\n      \"destinationPassword\": \"JEw3RXYwMiRj9Knqi0IpVBsF6TcoFGOfwiKD0kDhNGfRGDxjjAc06Q==\",\n      \"destinationSslDetails\": {\n        \"sslEnabled\": false,\n        \"sslForAuthenticationOnly\": false,\n        \"sslVerifyServerCertificate\": false,\n        \"sslVerifyServerHostname\": false\n      },\n      \"properties\": [\n        {\n          \"name\": \"outbound.poolType\",\n          \"value\": \"SESSION\"\n        },\n        {\n          \"name\": \"outbound.poolMaxSize\",\n          \"value\": \"123\"\n        },\n        {\n          \"name\": \"outbound.poolMaxIdleItems\",\n          \"value\": \"12\"\n        },\n        {\n          \"name\": \"outbound.poolItemWaitingTime\",\n          \"value\": \"12345\"\n        },\n        {\n          \"name\": \"outbound.replyType\",\n          \"value\": \"NO_REPLY\"\n        },\n        {\n          \"name\": \"outbound.messageFormat\",\n          \"value\": \"ALWAYS_BINARY\"\n        },\n        {\n          \"name\": \"outbound.useMessageIdForCorrelation\",\n          \"value\": \"false\"\n        }\n      ]\n    },\n        {\n      \"name\": \"jms-mq\",\n      \"direction\": \"INBOUND\",\n      \"providerType\": \"WEBSPHERE MQ OVER LDAP\",\n      \"enabled\": true,\n      \"template\": false,\n      \"initialContextFactoryClassname\": \"initial-context-factory\",\n      \"connectionFactoryName\": \"connection-factory\",\n      \"jndiUrl\": \"jndi://url\",\n      \"jndiSslDetails\": {\n        \"sslEnabled\": false,\n        \"sslForAuthenticationOnly\": false,\n        \"sslVerifyServerCertificate\": false,\n        \"sslVerifyServerHostname\": false\n      },\n      \"destinationType\": \"TOPIC\",\n      \"destinationName\": \"topic-destination\",\n      \"destinationSslDetails\": {\n        \"sslEnabled\": true,\n        \"sslForAuthenticationOnly\": false,\n        \"sslVerifyServerCertificate\": false,\n        \"sslVerifyServerHostname\": false,\n        \"sslClientKeyAlias\": \"<DEFAULT>\"\n      },\n      \"properties\": [\n        {\n          \"name\": \"inbound.contentTypeSource\",\n          \"value\": \"FREEFORM\"\n        },\n        {\n          \"name\": \"inbound.acknowledgementType\",\n          \"value\": \"AUTOMATIC\"\n        },\n        {\n          \"name\": \"inbound.replyType\",\n          \"value\": \"REPLY_TO_OTHER\"\n        },\n        {\n          \"name\": \"inbound.contentTypeValueOrProperty\",\n          \"value\": \"application/json\"\n        },\n        {\n          \"name\": \"inbound.soapActionMessageProperty\",\n          \"value\": \"soap-action-property\"\n        },\n        {\n          \"name\": \"inbound.replyTo\",\n          \"value\": \"reply-queue\"\n        },\n        {\n          \"name\": \"inbound.requestMaxSize\",\n          \"value\": \"12345\"\n        },\n        {\n          \"name\": \"inbound.useMessageIdForCorrelation\",\n          \"value\": \"true\"\n        },\n        {\n          \"name\": \"inbound.acknowledgmentType\",\n          \"value\": \"ON_COMPLETION\"\n        },\n        {\n          \"name\": \"hello\",\n          \"value\": \"world\"\n        },\n        {\n          \"name\": \"who\",\n          \"value\": \"am I?\"\n        }\n      ]\n    },\n    {\n      \"name\": \"jms-mq\",\n      \"direction\": \"OUTBOUND\",\n      \"providerType\": \"WEBSPHERE MQ OVER LDAP\",\n      \"enabled\": true,\n      \"template\": false,\n      \"initialContextFactoryClassname\": \"initial-context-factory\",\n      \"connectionFactoryName\": \"connection-factory\",\n      \"jndiUrl\": \"jndi://url\",\n      \"jndiSslDetails\": {\n        \"sslEnabled\": false,\n        \"sslForAuthenticationOnly\": false,\n        \"sslVerifyServerCertificate\": false,\n        \"sslVerifyServerHostname\": false\n      },\n      \"destinationType\": \"TOPIC\",\n      \"destinationName\": \"topic-destination\",\n      \"destinationSslDetails\": {\n        \"sslEnabled\": true,\n        \"sslForAuthenticationOnly\": false,\n        \"sslVerifyServerCertificate\": false,\n        \"sslVerifyServerHostname\": false,\n        \"sslClientKeyAlias\": \"<DEFAULT>\"\n      },\n      \"properties\": [\n        {\n          \"name\": \"outbound.poolType\",\n          \"value\": \"SESSION\"\n        },\n        {\n          \"name\": \"outbound.replyType\",\n          \"value\": \"AUTOMATIC\"\n        },\n        {\n          \"name\": \"outbound.messageFormat\",\n          \"value\": \"AUTOMATIC\"\n        },\n        {\n          \"name\": \"outbound.useMessageIdForCorrelation\",\n          \"value\": \"false\"\n        },\n        {\n          \"name\": \"inbound.acknowledgmentType\",\n          \"value\": \"ON_COMPLETION\"\n        },\n        {\n          \"name\": \"hello\",\n          \"value\": \"world\"\n        },\n        {\n          \"name\": \"who\",\n          \"value\": \"am I?\"\n        }\n      ]\n    }\n  ]\n}"
											}
										},
										"url": {
											"raw": "{{target_gw}}",
											"host": [
												"{{target_gw}}"
											]
										},
										"description": "# Set JMS Destinations"
									},
									"response": []
								},
								{
									"name": "Delete JMS Destinations",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation deleteJmsDestinations($names: [String!]!) {\n    deleteJmsDestinations(names: $names) {\n        detailedStatus {\n            action status description\n            source {name value}\n            target {name value}\n        }\n    }\n}",
												"variables": "{\n    \"names\": [\n        \"jms-out\", \n        \"jms-out-tibco-customized\",\n        \"jms-out-weblogic-customized\",\n        \"jms-in\", \n        \"jms-in-mq-customized\",\n        \"INBOUND.WEBSPHERE MQ OVER LDAP.jms-mq\",\n        \"OUTBOUND.WEBSPHERE MQ OVER LDAP.jms-mq\"\n    ]\n}"
											}
										},
										"url": {
											"raw": "{{target_gw}}",
											"host": [
												"{{target_gw}}"
											]
										},
										"description": "# Delete JMS Destinations"
									},
									"response": []
								}
							]
						},
						{
							"name": "Queries",
							"item": [
								{
									"name": "All JMS Destinations",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query jmsDestinations {\n    jmsDestinations {\n        goid \n        connectionGoid \n        name \n        direction \n        providerType \n        checksum \n        \n        enabled \n        template \n        initialContextFactoryClassname \n        connectionFactoryName \n        jndiUrl \n        jndiUsername \n        jndiPassword\n\n        jndiSslDetails { \n            sslEnabled \n            sslForAuthenticationOnly \n            sslVerifyServerCertificate \n            sslVerifyServerHostname \n            sslClientKeyAlias \n        } \n\n        destinationType \n        destinationName \n        destinationUsername \n        destinationPassword \n\n        destinationSslDetails { \n            sslEnabled \n            sslForAuthenticationOnly \n            sslVerifyServerCertificate \n            sslVerifyServerHostname \n            sslClientKeyAlias \n        }\n\n        properties{  name value }\n    }\n}",
												"variables": "{}"
											}
										},
										"url": {
											"raw": "{{source_gw}}",
											"host": [
												"{{source_gw}}"
											]
										},
										"description": "# All JMS Destinations"
									},
									"response": []
								},
								{
									"name": "JMS Destination By Name",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query jmsDestinationByName($name: String!) {\n    # If there are multiple JMS destinations with the same name, use fully qualified name like below\n    # <DIRECTION>.<PROVIDER_TYPE>.<NAME>\n    # Ex: INBOUND.WEBSPHERE MQ OVER LDAP.jms-in-mq-customized\n    jmsDestinationByName(name: $name) {\n        goid \n        connectionGoid \n        name \n        direction \n        providerType \n        checksum \n        \n        enabled \n        template \n        initialContextFactoryClassname \n        connectionFactoryName \n        jndiUrl \n        jndiUsername \n        jndiPassword\n\n        jndiSslDetails { \n            sslEnabled \n            sslForAuthenticationOnly \n            sslVerifyServerCertificate \n            sslVerifyServerHostname \n            sslClientKeyAlias \n        } \n\n        destinationType \n        destinationName \n        destinationUsername \n        destinationPassword \n\n        destinationSslDetails { \n            sslEnabled \n            sslForAuthenticationOnly \n            sslVerifyServerCertificate \n            sslVerifyServerHostname \n            sslClientKeyAlias \n        }\n\n        properties{  name value }\n    }\n}",
												"variables": "{\n    \"name\": \"INBOUND.WEBSPHERE MQ OVER LDAP.jms-in-mq-customized\"\n}"
											}
										},
										"url": {
											"raw": "{{source_gw}}",
											"host": [
												"{{source_gw}}"
											]
										},
										"description": "# JMS Destination By Name"
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Listen Ports",
					"item": [
						{
							"name": "Query",
							"item": [
								{
									"name": "All Listen Ports",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query listenPorts {\n    listenPorts {\n        goid \n        name \n        checksum \n        \n        enabled \n        protocol \n        port \n        hardwiredServiceName \n        enabledFeatures \n        tlsSettings { \n            clientAuthentication \n            keystoreId \n            keyAlias \n            tlsVersions \n            cipherSuites \n            useCipherSuitesOrder \n        } \n        properties { name value }\n\n        hardwiredService {\n            ... on PublishedService {\n                name \n                resolutionPath \n                folderPath \n                methodsAllowed \n                enabled\n            }\n        }\n    }\n}",
												"variables": ""
											}
										},
										"url": {
											"raw": "{{source_gw}}",
											"host": [
												"{{source_gw}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Listen Ports by Name",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query listenPortByName ($name : String!) {\n    listenPortByName (name : $name) {\n        goid \n        name \n        checksum \n        \n        enabled \n        protocol \n        port \n        hardwiredServiceName \n        enabledFeatures \n        tlsSettings { \n            clientAuthentication \n            keystoreId \n            keyAlias \n            tlsVersions \n            cipherSuites \n            useCipherSuitesOrder \n        } \n        properties { name value }\n\n        hardwiredService {\n            ... on PublishedService {\n                name \n                resolutionPath \n                folderPath \n                methodsAllowed \n                enabled\n            }\n        }\n    }\n}",
												"variables": "{\n    \"name\" : \"some-listen-port\"\n}"
											}
										},
										"url": {
											"raw": "{{source_gw}}",
											"host": [
												"{{source_gw}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Listen Ports by Protocol",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query listenPortsByProtocol ($protocol : String!) {\n    listenPortsByProtocol (protocol : $protocol) {\n        goid \n        name \n        checksum \n        \n        enabled \n        protocol \n        port \n        hardwiredServiceName \n        enabledFeatures \n        tlsSettings { \n            clientAuthentication \n            keystoreId \n            keyAlias \n            tlsVersions \n            cipherSuites \n            useCipherSuitesOrder \n        } \n        properties { name value }\n\n        hardwiredService {\n            ... on PublishedService {\n                name \n                resolutionPath \n                folderPath \n                methodsAllowed \n                enabled\n            }\n        }\n    }\n}",
												"variables": "{\n    \"protocol\" : \"HTTPS\"\n}"
											}
										},
										"url": {
											"raw": "{{source_gw}}",
											"host": [
												"{{source_gw}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Mutation",
							"item": [
								{
									"name": "Set Listen Ports",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation setListenPorts (\n    $listenPorts: [ListenPortInput!]!, \n    $webApiServices: [WebApiServiceInput!]!) {\n    # Ensure the availability of listen port dependencies\n    setWebApiServices(input: $webApiServices) {\n        detailedStatus {\n            action status description\n            source {name value}\n            target {name value}\n        }\n    }\n    setListenPorts (input: $listenPorts) {\n        detailedStatus {\n            action status description\n            source {name value}\n            target {name value}\n        }\n    }\n}",
												"variables": "{\n  \"listenPorts\": [\n    {\n      \"name\": \"some-listen-port (18443)\",\n      \"enabled\": true,\n      \"protocol\": \"HTTPS\",\n      \"port\": 18443,\n      \"enabledFeatures\": [\n        \"PUBLISHED_SERVICE_MESSAGE_INPUT\",\n        \"POLICY_MANAGER_ACCESS\",\n        \"POLICY_DOWNLOAD_SERVICE\",\n        \"PING_SERVICE\",\n        \"WS_TRUST_SECURITY_TOKEN_SERVICE\",\n        \"CERTIFICATE_SIGNING_SERVICE\",\n        \"PASSWORD_CHANGING_SERVICE\",\n        \"WSDL_DOWNLOAD_SERVICE\",\n        \"SNMP_QUERY_SERVICE\",\n        \"BUILT_IN_SERVICES\"\n      ],\n      \"tlsSettings\": {\n        \"clientAuthentication\": \"OPTIONAL\",\n        \"tlsVersions\": [\n          \"TLSv1.2\",\n          \"TLSv1.3\"\n        ],\n        \"useCipherSuitesOrder\": true\n      },\n      \"properties\": [\n        {\n          \"name\": \"enableWebSocket\",\n          \"value\": \"false\"\n        },\n        {\n          \"name\": \"useExtendedFtpCommandSet\",\n          \"value\": \"false\"\n        }\n      ]\n    },\n    {\n      \"name\": \"some-other-listen-port (28443)\",\n      \"enabled\": true,\n      \"protocol\": \"HTTPS\",\n      \"port\": 28443,\n      \"hardwiredServiceName\": \"some-backend\",\n      \"enabledFeatures\": [\n        \"PUBLISHED_SERVICE_MESSAGE_INPUT\",\n        \"POLICY_MANAGER_ACCESS\",\n        \"POLICY_DOWNLOAD_SERVICE\",\n        \"PING_SERVICE\",\n        \"WS_TRUST_SECURITY_TOKEN_SERVICE\",\n        \"CERTIFICATE_SIGNING_SERVICE\",\n        \"PASSWORD_CHANGING_SERVICE\",\n        \"WSDL_DOWNLOAD_SERVICE\",\n        \"SNMP_QUERY_SERVICE\",\n        \"BUILT_IN_SERVICES\"\n      ],\n      \"tlsSettings\": {\n        \"clientAuthentication\": \"REQUIRED\",\n        \"keystoreId\": \"00000000000000000000000000000002\",\n        \"keyAlias\": \"some-host\",\n        \"tlsVersions\": [\n          \"TLSv1.2\",\n          \"TLSv1.3\"\n        ],\n        \"useCipherSuitesOrder\": true\n      },\n      \"properties\": [\n        {\n          \"name\": \"threadPoolSize\",\n          \"value\": \"32\"\n        },\n        {\n          \"name\": \"enableWebSocket\",\n          \"value\": \"true\"\n        },\n        {\n          \"name\": \"overrideContentType\",\n          \"value\": \"application/json; charset=utf-8\"\n        },\n        {\n          \"name\": \"useExtendedFtpCommandSet\",\n          \"value\": \"false\"\n        },\n        {\n          \"name\": \"requestSizeLimit\",\n          \"value\": \"2048\"\n        }\n      ]\n    }\n  ],\n  \"webApiServices\": [\n    {\n      \"name\": \"some-backend\",\n      \"resolutionPath\": \"/some-backend\",\n      \"enabled\": true,\n      \"folderPath\": \"/\",\n      \"methodsAllowed\": [\n        \"GET\",\n        \"POST\",\n        \"PUT\",\n        \"DELETE\"\n      ],\n      \"tracingEnabled\": false,\n      \"wssProcessingEnabled\": false,\n      \"policy\": {\n        \"xml\": \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?><wsp:Policy xmlns:L7p=\\\"http://www.layer7tech.com/ws/policy\\\" xmlns:wsp=\\\"http://schemas.xmlsoap.org/ws/2002/12/policy\\\"><wsp:All wsp:Usage=\\\"Required\\\"><L7p:HardcodedResponse>\\t<L7p:Base64ResponseBody stringValue=\\\"WyJoZWxsbyBmcm9tICR7c2VydmljZS5uYW1lfSJd\\\"/>\\t<L7p:ResponseContentType stringValue=\\\"application/json; charset=UTF-8\\\"/></L7p:HardcodedResponse></wsp:All></wsp:Policy>\"\n      }\n    }\n  ]\n}"
											}
										},
										"url": {
											"raw": "{{target_gw}}",
											"host": [
												"{{target_gw}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Listen Ports",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation deleteListenPorts (\n    $listenPorts: [String!]!,\n    $webApiServices: [String!]!) {\n    deleteListenPorts (names: $listenPorts) {\n        detailedStatus {\n            action status description\n            source {name value}\n            target {name value}\n        }\n    }\n\n    deleteWebApiServices(resolutionPaths: $webApiServices) {\n        detailedStatus {\n            action status description\n            source {name value}\n            target {name value}\n        }\n    }\n}",
												"variables": "{\n    \"listenPorts\": [\n        \"some-listen-port (18443)\",\n        \"some-other-listen-port (28443)\"\n    ],\n\n    \"webApiServices\": [\"/some-backend\"]\n}"
											}
										},
										"url": {
											"raw": "{{target_gw}}",
											"host": [
												"{{target_gw}}"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Log Sinks",
					"item": [
						{
							"name": "Query",
							"item": [
								{
									"name": "All Log Sinks",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query logSinks {\n    logSinks {\n        goid \n        name \n        checksum \n\n        description \n        type \n        enabled \n        severity \n        categories \n        syslogHosts \n        filters{type values} \n        properties{name value}\n    }\n}",
												"variables": ""
											}
										},
										"url": {
											"raw": "{{source_gw}}",
											"host": [
												"{{source_gw}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Log Sink by Name",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query logSinkByName ($name : String!) {\n    logSinkByName (name : $name) {\n        goid \n        name \n        checksum \n\n        description \n        type \n        enabled \n        severity \n        categories \n        syslogHosts \n        filters{type values} \n        properties{name value}\n    }\n}",
												"variables": "{\n    \"name\" : \"ssg\"\n}"
											}
										},
										"url": {
											"raw": "{{source_gw}}",
											"host": [
												"{{source_gw}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Mutation",
							"item": [
								{
									"name": "Set Log Sinks",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation setLogSinks (\n    $webApiServices: [WebApiServiceInput!]!,\n    $logSinks: [LogSinkInput!]!) {\n    setWebApiServices(input: $webApiServices) {\n        detailedStatus {\n            action status description \n            source {name value} \n            target {name value}\n        }\n    }\n    setLogSinks(input: $logSinks) {\n        detailedStatus {\n            action status description \n            source {name value} \n            target {name value}\n        }\n    }\n}",
												"variables": "{\n    \"webApiServices\": [\n        {\n            \"name\": \"some-webapi\",\n            \"resolutionPath\": \"/some-webapi\",\n            \"enabled\": true,\n            \"folderPath\": \"/graphman-tests/webApiServices\",\n            \"methodsAllowed\": [\n                \"GET\",\n                \"POST\",\n                \"PUT\",\n                \"DELETE\"\n            ],\n            \"policy\": {\n                \"xml\": \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n<wsp:Policy xmlns:L7p=\\\"http://www.layer7tech.com/ws/policy\\\" xmlns:wsp=\\\"http://schemas.xmlsoap.org/ws/2002/12/policy\\\">\\n    <wsp:All wsp:Usage=\\\"Required\\\">\\n           <L7p:HardcodedResponse>\\n            <L7p:Base64ResponseBody stringValue=\\\"JHtncmVldGluZ3N9\\\"/>\\n            <L7p:ResponseContentType stringValue=\\\"text/plain; charset=UTF-8\\\"/>\\n        </L7p:HardcodedResponse>\\n    </wsp:All>\\n</wsp:Policy>\\n\"\n            },\n            \"tracingEnabled\": false,\n            \"wssProcessingEnabled\": false\n            }\n    ],\n    \n    \"logSinks\": [\n    {\n        \"goid\": \"d1525b9387e52c44f49843b2d6e60421\",\n        \"name\": \"some-other-syslog\",\n        \"checksum\": \"4fe8a2091deb937a784cc4e56d83bb3d1d78e07d\",\n        \"description\": \"\",\n        \"type\": \"SYSLOG\",\n        \"enabled\": false,\n        \"severity\": \"INFO\",\n        \"categories\": [\n            \"AUDIT\",\n            \"LOG\"\n        ],\n        \"syslogHosts\": [\n            \"example:1234\",\n            \"ex1:2345\"\n        ],\n        \"filters\": [\n            {\n                \"type\": \"service\",\n                \"values\": [\n                    \"some-webapi\"\n                ]\n            }\n        ],\n        \"properties\": [\n            {\n                \"name\": \"syslog.protocol\",\n                \"value\": \"SSL\"\n            },\n            {\n                \"name\": \"syslog.format\",\n                \"value\": \"STANDARD\"\n            },\n            {\n                \"name\": \"syslog.timezone\",\n                \"value\": \"ART\"\n            },\n            {\n                \"name\": \"syslog.ssl.keystore.id\",\n                \"value\": \"00000000000000000000000000000002\"\n            },\n            {\n                \"name\": \"syslog.facility\",\n                \"value\": \"2\"\n            },\n            {\n                \"name\": \"syslog.charSet\",\n                \"value\": \"UTF-8\"\n            },\n            {\n                \"name\": \"syslog.ssl.key.alias\",\n                \"value\": \"ssl\"\n            },\n            {\n                \"name\": \"syslog.logHostname\",\n                \"value\": \"true\"\n            },\n            {\n                \"name\": \"syslog.ssl.clientAuth\",\n                \"value\": \"true\"\n            }\n        ]\n    },\n    {\n        \"goid\": \"d1525b9387e52c44f49843b2d6e60418\",\n        \"name\": \"some-ssg\",\n        \"checksum\": \"b2e562a2a832f03fa5a5f250d1ae2fcbf32a74b6\",\n        \"description\": \"Main log\",\n        \"type\": \"FILE\",\n        \"enabled\": false,\n        \"severity\": \"INFO\",\n        \"categories\": [\n            \"AUDIT\",\n            \"LOG\"\n        ],\n        \"properties\": [\n            {\n                \"name\": \"file.logCount\",\n                \"value\": \"10\"\n            },\n            {\n                \"name\": \"file.maxSize\",\n                \"value\": \"20000\"\n            },\n            {\n                \"name\": \"file.interval\",\n                \"value\": \"DAILY\"\n            },\n            {\n                \"name\": \"file.rolling\",\n                \"value\": \"false\"\n            },\n            {\n                \"name\": \"file.format\",\n                \"value\": \"STANDARD\"\n            }\n        ]\n    }\n  ]\n}"
											}
										},
										"url": {
											"raw": "{{target_gw}}",
											"host": [
												"{{target_gw}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Log Sinks",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation deleteListenPorts (\n    $webApiServices: [String!]!,\n    $logSinks: [String!]!) {\n    deleteLogSinks (names: $logSinks) {\n        detailedStatus {\n            action status description \n            source {name value} \n            target {name value}\n        }\n    }\n    deleteWebApiServices (resolutionPaths: $webApiServices) {\n        detailedStatus {\n            action status description \n            source {name value} \n            target {name value}\n        }\n    }\n}",
												"variables": "{\n    \"logSinks\": [\n        \"some-ssg\",\n        \"some-other-syslog\"\n    ],\n\n    \"webApiServices\": [\n        \"/some-webapi\"\n    ]\n}"
											}
										},
										"url": {
											"raw": "{{target_gw}}",
											"host": [
												"{{target_gw}}"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Manage Certificate Validation",
					"item": [
						{
							"name": "Mutations",
							"item": [
								{
									"name": "Set Cluster Properties",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation setClusterProperties ($clusterProperties: [ClusterPropertyInput!]!) {\n    setClusterProperties (input: $clusterProperties) {\n        detailedStatus {\n            action status description\n            source {name value}\n            target {name value}\n        }        \n    }\n}",
												"variables": "{\n    \"clusterProperties\": [\n        {\n            \"name\": \"pkix.validation.identityProvider\",\n            \"description\": \"Validation method for identity provider certificates\",\n            \"hiddenProperty\": false,\n            \"value\": \"revocation\"\n        },\n        {\n            \"name\": \"pkix.validation.routing\",\n            \"description\": \"Validation method for certificates used by the server for routing (i.e., HTTPS, FTPS).\",\n            \"hiddenProperty\": false,\n            \"value\": \"validatepath\"\n        },\n        {\n            \"name\": \"pkix.validation.other\",\n            \"description\": \"Validation method for all certificates except for identity provider and routing. \",\n            \"hiddenProperty\": false,\n            \"value\": \"validate\"\n        }\n    ]\n}"
											}
										},
										"url": {
											"raw": "{{target_gw}}",
											"host": [
												"{{target_gw}}"
											]
										},
										"description": "# Set Cluster Properties\n\nSet or update existing cluster properties.\n\nInput: an array of cluster properties\n\n``` json\n{  \"input\": [{    \"name\": \"passthroughGrpcHost\",    \"value\": \"https://grpc.apis.corp.dev:7843\",    \"description\" : \"a cwp description\"  }]}\n\n```"
									},
									"response": []
								},
								{
									"name": "Delete Cluster Property",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation deleteClusterProperties ($clusterProperties: [String!]!) {\n    deleteClusterProperties (names: $clusterProperties) {\n        detailedStatus {\n            action status description\n            source {name value}\n            target {name value}\n        }\n    }\n}",
												"variables": "{\n    \"clusterProperties\": [\n       \"pkix.validation.identityProvider\",\n       \"pkix.validation.routing\",\n       \"pkix.validation.other\"\n    ]\n}"
											}
										},
										"url": {
											"raw": "{{target_gw}}",
											"host": [
												"{{target_gw}}"
											]
										},
										"description": "# Delete Cluster Property\n\nDelete a cluster property given its name.\n\nInput: name"
									},
									"response": []
								}
							]
						},
						{
							"name": "Queries",
							"item": [
								{
									"name": "All Cluster Properties",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query clusterProperties {\n    clusterProperties {\n        goid\n        name\n        checksum\n\n        description\n        hiddenProperty\n        value\n    }\n}",
												"variables": "{}"
											}
										},
										"url": {
											"raw": "{{source_gw}}",
											"host": [
												"{{source_gw}}"
											]
										},
										"description": "# All Cluster Properties\n\nGet the list of cluster properties.\n\nInput: no input"
									},
									"response": []
								},
								{
									"name": "Cluster Property by Name",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query clusterPropertyByName ($name: String!) {\n    clusterPropertyByName (name: $name) {\n        goid\n        name\n        checksum\n\n        description\n        hiddenProperty\n        value\n    }\n}",
												"variables": "{\n  \"name\": \"pkix.validation.identityProvider\"\n}"
											}
										},
										"url": {
											"raw": "{{source_gw}}",
											"host": [
												"{{source_gw}}"
											]
										},
										"description": "# Cluster Property by Name\n\nGet the cluster property with the given name\n\nInput: name"
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Password Policy",
					"item": [
						{
							"name": "Mutation",
							"item": [
								{
									"name": "Set Password Policies",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation setPasswordPolicy ($input:[PasswordPolicyInput!]!) {\n    setPasswordPolicies (input: $input) {\n        detailedStatus {\n            action status description\n            source {name value}\n            target {name value}\n        }\n        passwordPolicies {\n                goid\n                forcePasswordChangeNewUser\n                noRepeatingCharacters\n                minPasswordLength\n                maxPasswordLength\n                upperMinimum\n                lowerMinimum\n                numberMinimum\n                symbolMinimum\n                nonNumericMinimum\n                charDiffMinimum\n                repeatFrequency\n                passwordExpiry\n                allowableChangesPerDay\n                checksum\n        }\n    }\n}",
												"variables": "{\n  \"input\": [{\n    \"forcePasswordChangeNewUser\" : true,\n    \"noRepeatingCharacters\" : true,\n    \"minPasswordLength\" : 4,\n    \"maxPasswordLength\" : 4,\n    \"upperMinimum\" : 4,\n    \"lowerMinimum\" : 2,\n    \"numberMinimum\" : 2,\n    \"symbolMinimum\" : 2,\n    \"nonNumericMinimum\" : 1,\n    \"charDiffMinimum\" : 5,\n    \"repeatFrequency\" : 3,\n    \"passwordExpiry\": 2,\n    \"allowableChangesPerDay\" : true\n  }]\n}"
											}
										},
										"url": {
											"raw": "{{target_gw}}",
											"host": [
												"{{target_gw}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Query",
							"item": [
								{
									"name": "Get Password Policies",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query passwordPolicies {\n    passwordPolicies {\n        goid\n        forcePasswordChangeNewUser\n        noRepeatingCharacters\n        minPasswordLength\n        maxPasswordLength\n        upperMinimum\n        lowerMinimum\n        numberMinimum\n        symbolMinimum\n        nonNumericMinimum\n        charDiffMinimum\n        repeatFrequency\n        passwordExpiry\n        allowableChangesPerDay\n        checksum\n    }\n}",
												"variables": ""
											}
										},
										"url": {
											"raw": "{{source_gw}}",
											"host": [
												"{{source_gw}}"
											]
										},
										"description": "# List all Web Api Services\n\nList all of the services\n\nInput: no input"
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Policies",
					"item": [
						{
							"name": "Mutations",
							"item": [
								{
									"name": "Set Policies",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation setPolicies ($input: [L7PolicyInput!]!) {\n    setPolicies (input: $input) {\n        detailedStatus {\n            action status description\n            source {name value}\n            target {name value}\n        }\n    }\n}",
												"variables": "{\n  \"input\": [\n    {\n        \"guid\": \"ffe348a7-8255-4c3b-ba18-021ec626dd0d\",\n        \"name\": \"some-inner-policy-fragment\",\n        \"folderPath\": \"/graphman-tests/policyFragments\",\n        \"soap\": false,\n        \"policyType\": \"FRAGMENT\",\n        \"policy\": {\n            \"xml\": \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n<wsp:Policy xmlns:L7p=\\\"http://www.layer7tech.com/ws/policy\\\" xmlns:wsp=\\\"http://schemas.xmlsoap.org/ws/2002/12/policy\\\">\\n    <wsp:All wsp:Usage=\\\"Required\\\">\\n        <L7p:SetVariable>\\n            <L7p:Base64Expression stringValue=\\\"JHtzb21lLW91dHB1dH0sICJoZWxsbyBmcm9tICR7cG9saWN5Lm5hbWV9Ig==\\\"/>\\n            <L7p:VariableToSet stringValue=\\\"some-output\\\"/>\\n        </L7p:SetVariable>\\n    </wsp:All>\\n</wsp:Policy>\\n\"\n        }\n    },\n    {\n      \"guid\": \"57e20954-e6c7-479e-ba68-09c987fef745\",\n      \"name\": \"json-policy-fragment\",\n      \"folderPath\": \"/graphman-tests/policyFragments\",\n      \"soap\": false,\n      \"policyType\": \"FRAGMENT\",\n      \"policy\": {\n        \"json\": \"{\\\"All\\\":[{\\\"SetVariable\\\":{\\\"expression\\\":\\\"${some-output}, \\\\\\\"hello from ${policy.name}\\\\\\\"\\\",\\\"variable\\\":\\\"some-output\\\"}}]}\"\n      }\n    },\n    {\n      \"guid\": \"57e20954-e6c7-479e-ba68-09c987fef748\",\n      \"name\": \"code-policy-fragment\",\n      \"folderPath\": \"/graphman-tests/policyFragments\",\n      \"soap\": false,\n      \"policyType\": \"FRAGMENT\",\n      \"policy\": {\n        \"code\": {\n          \"All\": [\n            {\n              \"Comment\": \"Policy Fragment: some-policy-fragment\"\n            },\n            {\n              \"SetVariable\": {\n                \"expression\": \"${some-output}, \\\"hello from ${policy.name}\\\"\",\n                \"contentType\": \"text/plain; charset=utf-8\",\n                \"dataType\": \"message\",\n                \"variable\": \"some-output\"\n              }\n            },\n            {\n              \"Include\": {\n                \"policyGuid\": \"ffe348a7-8255-4c3b-ba18-021ec626dd0d\",\n                \"policyName\": \"some-inner-policy-fragment\"\n              }\n            },\n            {\n              \"Encapsulated\": {\n                \"encassGuid\": \"5047edc8-9df8-4e57-9e75-74221139c520\",\n                \"encassName\": \"some-encass\"\n              }\n            },\n            {\n              \"OneOrMore\": [\n                {\n                  \"True\": {}\n                }\n              ]\n            }\n          ]\n        }\n      }\n    },\n    {\n      \"guid\": \"57e20954-e6c7-479e-ba68-09c987fef146\",\n      \"name\": \"yaml-policy-fragment\",\n      \"folderPath\": \"/graphman-tests/policyFragments\",\n      \"soap\": false,\n      \"policyType\": \"FRAGMENT\",\n      \"policy\": {\n        \"yaml\": \"---\\nAll:\\n- Comment: \\\"Policy Fragment: some-policy-fragment\\\"\\n- SetVariable:\\n    expression: \\\"${some-output}, \\\\\\\"hello from ${policy.name}\\\\\\\"\\\"\\n    contentType: \\\"text/plain; charset=utf-8\\\"\\n    dataType: \\\"message\\\"\\n    variable: \\\"some-output\\\"\\n    variable: \\\"some-output\\\"\\n- Include:\\n    policyGuid: \\\"ffe348a7-8255-4c3b-ba18-021ec626dd0d\\\"\\n    policyName: \\\"some-inner-policy-fragment\\\"\\n- Encapsulated:\\n    encassGuid: \\\"5047edc8-9df8-4e57-9e75-74221139c520\\\"\\n    encassName: \\\"some-encass\\\"\\n- OneOrMore:\\n  - \\\"True\\\": {}\\n\"\n      }\n    },\n    {\n        \"guid\": \"e9840888-5e32-4c44-94a0-20036c7a5d79\",\n        \"name\": \"some-identity-provider-policy\",\n        \"folderPath\": \"/graphman-tests/policyFragments\",\n        \"soap\": false,\n        \"policyType\": \"FRAGMENT\",\n        \"policy\": {\n            \"xml\": \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n<wsp:Policy xmlns:L7p=\\\"http://www.layer7tech.com/ws/policy\\\" xmlns:wsp=\\\"http://schemas.xmlsoap.org/ws/2002/12/policy\\\">\\n    <wsp:All wsp:Usage=\\\"Required\\\">\\n        <L7p:CommentAssertion>\\n            <L7p:Comment stringValue=\\\"Policy Fragment: some-identity-provider-policy\\\"/>\\n        </L7p:CommentAssertion>\\n    </wsp:All>\\n</wsp:Policy>\\n\"\n        }\n    }\n  ]\n}"
											}
										},
										"url": {
											"raw": "{{target_gw}}",
											"host": [
												"{{target_gw}}"
											]
										},
										"description": "# Set Policy Fragments\n\nSet multiple policy fragments together. The fragments may or may not exist at the destination. Each fragment is either created if it doesn't exist at target or updated if it already exists.\n\nInput: same structure as createPolicyFragment but as an array instead of a single web api service\n\n``` json\n{\n  \"input\": [\n    {\n      \"name\" : \"New policy somewhere\",\n      \"folderPath\" : \"/migrationTest\",\n      \"policy\" : {\n      \"xml\" : \"wsp:Policy...>\"\n      }\n    }\n  ]\n}\n\n```"
									},
									"response": []
								},
								{
									"name": "Delete Policies",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation deletePolicies ($policies: [String!]!) {\n    deletePolicies (names: $policies) {\n        detailedStatus {\n            action status description\n            source {name value}\n            target {name value}\n        }\n    }\n}",
												"variables": "{\n  \"policies\": [\n    \"FRAGMENT:some-inner-policy-fragment\",\n    \"FRAGMENT:code-policy-fragment\",\n    \"FRAGMENT:yaml-policy-fragment\",\n    \"FRAGMENT:json-policy-fragment\"\n\n  ]\n}"
											}
										},
										"url": {
											"raw": "{{target_gw}}",
											"host": [
												"{{target_gw}}"
											]
										},
										"description": "# Set Policy Fragments\n\nSet multiple policy fragments together. The fragments may or may not exist at the destination. Each fragment is either created if it doesn't exist at target or updated if it already exists.\n\nInput: same structure as createPolicyFragment but as an array instead of a single web api service\n\n``` json\n{\n  \"input\": [\n    {\n      \"name\" : \"New policy somewhere\",\n      \"folderPath\" : \"/migrationTest\",\n      \"policy\" : {\n      \"xml\" : \"wsp:Policy...>\"\n      }\n    }\n  ]\n}\n\n```"
									},
									"response": []
								}
							]
						},
						{
							"name": "Queries",
							"item": [
								{
									"name": "Policies",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query policies {\n    policies {\n        goid \n        guid \n        name \n        checksum \n        \n        folderPath \n        soap\n        policy { xml json yaml code}\n        policyRevision {xml json yaml code}\n        policyRevisions {xml json yaml code}\n    }\n}",
												"variables": "{}"
											}
										},
										"url": {
											"raw": "{{source_gw}}",
											"host": [
												"{{source_gw}}"
											]
										},
										"description": "# Get all Policy Framents\n\nGet all the policy fragments\n\nInput: no input"
									},
									"response": []
								},
								{
									"name": "Policy By Name",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query policyByName($name: String!) {\n    policyByName(name: $name) {\n        goid \n        guid \n        name \n        checksum \n        \n        folderPath \n        soap\n        policy { xml json yaml code}\n        policyRevision {xml json yaml code}\n        policyRevisions {xml json yaml code}\n        \n    }\n}",
												"variables": "{\r\n    \"name\":\"some-policy-fragment\"\r\n}"
											}
										},
										"url": {
											"raw": "{{source_gw}}",
											"host": [
												"{{source_gw}}"
											]
										},
										"description": "# Get all Policy Framents\n\nGet all the policy fragments\n\nInput: no input"
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Policy Fragments",
					"item": [
						{
							"name": "Mutations",
							"item": [
								{
									"name": "Set Policy Fragments",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation setPolicyFragments ($policyFragments: [PolicyFragmentInput!]!) {\n    setPolicyFragments (input: $policyFragments) {\n        detailedStatus {\n            action status description\n            source {name value}\n            target {name value}\n        }\n    }\n}",
												"variables": "{\n  \"policyFragments\": [\n    {\n      \"guid\": \"ffe348a7-8255-4c3b-ba18-021ec626dd0d\",\n      \"name\": \"some-inner-policy-fragment\",\n      \"folderPath\": \"/graphman-tests/policyFragments\",\n      \"soap\": false,\n      \"policy\": {\n        \"xml\": \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n<wsp:Policy xmlns:L7p=\\\"http://www.layer7tech.com/ws/policy\\\" xmlns:wsp=\\\"http://schemas.xmlsoap.org/ws/2002/12/policy\\\">\\n    <wsp:All wsp:Usage=\\\"Required\\\">\\n        <L7p:SetVariable>\\n            <L7p:Base64Expression stringValue=\\\"JHtzb21lLW91dHB1dH0sICJoZWxsbyBmcm9tICR7cG9saWN5Lm5hbWV9Ig==\\\"/>\\n            <L7p:VariableToSet stringValue=\\\"some-output\\\"/>\\n        </L7p:SetVariable>\\n    </wsp:All>\\n</wsp:Policy>\\n\"\n      }\n    },\n    {\n      \"guid\": \"57e20954-e6c7-479e-ba68-09c987fef748\",\n      \"name\": \"some-policy-fragment\",\n      \"folderPath\": \"/graphman-tests/policyFragments\",\n      \"soap\": false,\n      \"policy\": {\n        \"xml\": \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n<wsp:Policy xmlns:L7p=\\\"http://www.layer7tech.com/ws/policy\\\" xmlns:wsp=\\\"http://schemas.xmlsoap.org/ws/2002/12/policy\\\">\\n    <wsp:All wsp:Usage=\\\"Required\\\">\\n        <L7p:CommentAssertion>\\n            <L7p:Comment stringValue=\\\"Policy Fragment: some-policy-fragment\\\"/>\\n        </L7p:CommentAssertion>\\n        <L7p:SetVariable>\\n            <L7p:Base64Expression stringValue=\\\"JHtzb21lLW91dHB1dH0sICJoZWxsbyBmcm9tICR7cG9saWN5Lm5hbWV9Ig==\\\"/>\\n            <L7p:VariableToSet stringValue=\\\"some-output\\\"/>\\n        </L7p:SetVariable>\\n        <L7p:Include>\\n            <L7p:PolicyGuid stringValue=\\\"ffe348a7-8255-4c3b-ba18-021ec626dd0d\\\"/>\\n            <L7p:PolicyName stringValue=\\\"some-inner-policy-fragment\\\"/>\\n        </L7p:Include>\\n    </wsp:All>\\n</wsp:Policy>\\n\"\n      }\n    }\n  ]\n}"
											}
										},
										"url": {
											"raw": "{{target_gw}}",
											"host": [
												"{{target_gw}}"
											]
										},
										"description": "# Set Policy Fragments\n\nSet multiple policy fragments together. The fragments may or may not exist at the destination. Each fragment is either created if it doesn't exist at target or updated if it already exists.\n\nInput: same structure as createPolicyFragment but as an array instead of a single web api service\n\n``` json\n{\n  \"input\": [\n    {\n      \"name\" : \"New policy somewhere\",\n      \"folderPath\" : \"/migrationTest\",\n      \"policy\" : {\n      \"xml\" : \"wsp:Policy...>\"\n      }\n    }\n  ]\n}\n\n```"
									},
									"response": []
								},
								{
									"name": "Set Policy Fragments - Update Folder",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation setPolicyFragmentsForFolderUpdate ($policyFragments: [PolicyFragmentInput!]!) {\n    setPolicyFragments (input: $policyFragments) {\n        detailedStatus {status description}\n        policyFragments {\n            goid\n            guid\n            name\n            checksum\n\n            folderPath # modified field\n        }\n    }\n}",
												"variables": "{\n  \"policyFragments\": [\n    {\n      \"guid\": \"ffe348a7-8255-4c3b-ba18-021ec626dd0d\",\n      \"name\": \"some-inner-policy-fragment\",\n      \"folderPath\": \"/graphman-tests/policyFragments/sub-folder\",\n      \"soap\": false,\n      \"policy\": {\n        \"xml\": \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n<wsp:Policy xmlns:L7p=\\\"http://www.layer7tech.com/ws/policy\\\" xmlns:wsp=\\\"http://schemas.xmlsoap.org/ws/2002/12/policy\\\">\\n    <wsp:All wsp:Usage=\\\"Required\\\">\\n        <L7p:SetVariable>\\n            <L7p:Base64Expression stringValue=\\\"JHtzb21lLW91dHB1dH0sICJoZWxsbyBmcm9tICR7cG9saWN5Lm5hbWV9Ig==\\\"/>\\n            <L7p:VariableToSet stringValue=\\\"some-output\\\"/>\\n        </L7p:SetVariable>\\n    </wsp:All>\\n</wsp:Policy>\\n\"\n      }\n    }\n  ]\n}"
											}
										},
										"url": {
											"raw": "{{target_gw}}",
											"host": [
												"{{target_gw}}"
											]
										},
										"description": "# Update Policy Fragment\n\nThis mutation lets you change an existing policy fragment given its name. If no policy fragment with that name exists on target, this will fail.\n\nInput: in this sample we are changing the folder location of an existing policy given the policy name.\n\n``` json\n{  \"name\" : \"New policy somewhere\",  \"input\": {    \"folderPath\" : \"/migrationTest\"  }}\n\n```"
									},
									"response": []
								},
								{
									"name": "Delete Policy Fragments",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation deletePolicyFragments ($policyFragments: [String!]!) {\n    # Known defect: fails to delete \"some-inner-policy-fragment\" policy fragment as it is referenced by other policy fragment.\n    # Work around: try multiple times after seeting the cluster property graphman.mutationErrorsStrategy=continue\n    deletePolicyFragments (names: $policyFragments) {\n        detailedStatus {status description}\n        policyFragments {\n            goid\n            guid\n            name\n        }\n    }\n}",
												"variables": "{\n    \"policyFragments\" : [\n        \"some-policy-fragment\",\n        \"some-inner-policy-fragment\"\n    ]\n}"
											}
										},
										"url": {
											"raw": "{{target_gw}}",
											"host": [
												"{{target_gw}}"
											]
										},
										"description": "# Delete Policy Fragment\n\nDelete a policy fragment given its name.\n\nInput: name"
									},
									"response": []
								}
							]
						},
						{
							"name": "Queries",
							"item": [
								{
									"name": "All Fragments",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query policyFragments {\n    policyFragments {\n        goid \n        guid \n        name \n        checksum \n        \n        folderPath \n        soap\n        policy { xml }\n    }\n}",
												"variables": "{}"
											}
										},
										"url": {
											"raw": "{{source_gw}}",
											"host": [
												"{{source_gw}}"
											]
										},
										"description": "# Get all Policy Framents\n\nGet all the policy fragments\n\nInput: no input"
									},
									"response": []
								},
								{
									"name": "Fragment By Name",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query policyFragmentByName ($name: String!) {\n    policyFragmentByName (name: $name) {\n        goid \n        guid \n        name \n        checksum \n        \n        folderPath \n        soap\n        policy { xml }\n    }\n}",
												"variables": "{\n    \"name\": \"some-policy-fragment\"\n}"
											}
										},
										"url": {
											"raw": "{{source_gw}}",
											"host": [
												"{{source_gw}}"
											]
										},
										"description": "# Policy Fragment by Name\n\nGet a policy given its name\n\nInput: name"
									},
									"response": []
								},
								{
									"name": "Fragment and dependencies",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query policyFragmentByName ($name: String!) {\n    policyFragmentByName (name: $name) {\n        goid \n        guid \n        name \n        checksum \n        \n        folderPath \n        soap\n        policy {\n            xml\n            allDependencies {\n                policyFragments {guid name folderPath checksum}\n                encassConfigs {guid name policyName checksum}\n                clusterProperties {name checksum}\n                jdbcConnections {name checksum}\n                # please do consider listing the remaining supported entity types as dependencies\n            }\n        }\n    }\n}",
												"variables": "{\n    \"name\": \"some-policy-fragment\"\n}"
											}
										},
										"url": {
											"raw": "{{source_gw}}",
											"host": [
												"{{source_gw}}"
											]
										},
										"description": "# Policy and its dependencies\n\nRetrieve a policy fragment and all of its dependencies\n\nInput: name (the name of the policy fragment)"
									},
									"response": []
								},
								{
									"name": "Fragments in folder",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query policyFragmentsByFolderPath ($folderPath: String!) {\n    policyFragmentsByFolderPath (folderPath: $folderPath) {\n        goid \n        guid \n        name \n        checksum \n        \n        folderPath \n        soap\n        policy { xml }\n    }\n}",
												"variables": "{\n    \"folderPath\": \"/graphman-tests/policyFragments\"\n}"
											}
										},
										"url": {
											"raw": "{{source_gw}}",
											"host": [
												"{{source_gw}}"
											]
										},
										"description": "# Policy fragments in a folder\n\nQuery the policy fragments in a folder. This goes through all the subfolders (nested) as well.\n\nInput: folderPath"
									},
									"response": []
								},
								{
									"name": "Fragment By Guid",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query policyFragmentByGuid ($guid: ID!) {\n    policyFragmentByGuid (guid: $guid) {\n        goid \n        guid \n        name \n        checksum \n        \n        folderPath \n        soap\n        policy { xml }\n    }\n}",
												"variables": "{\n    \"guid\": \"57e20954-e6c7-479e-ba68-09c987fef748\"\n}"
											}
										},
										"url": {
											"raw": "{{source_gw}}",
											"host": [
												"{{source_gw}}"
											]
										},
										"description": "# Policy fragment by guid\n\nGet a policy fragment given its guid (if there is such a policy).\n\nInput: guid"
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Policy Revisions",
					"item": [
						{
							"name": "Queries",
							"item": [
								{
									"name": "Active Revision",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query ActiveRevision {\n    policyByName(name: \"some-policy\") {\n    goid\n    guid\n    name\n    policyRevision {ordinal active comment time xml}\n    }\n \n    serviceByResolutionPath(resolutionPath: \"/some-webapi\") {\n    goid\n    guid\n    name\n    policyRevision {ordinal active comment time xml}\n    }\n}",
												"variables": "{\n   \n}"
											}
										},
										"url": {
											"raw": "{{target_gw}}",
											"host": [
												"{{target_gw}}"
											]
										},
										"description": "# Set Web Api Services\n\nCreate multiple web API services on the target gateway.\n\nInput: See sample for input. Here is a sample:\n\n``` json\n{  \"input\": {    \"name\" : \"New service created\",    \"folderPath\" : \"/migrationTest\",    \"resolutionPath\": \"/testNewService17\",            \"methodsAllowed\": [                \"GET\",                \"POST\",                \"PUT\",                \"DELETE\"            ],            \"enabled\": true,            \"policy\": {                \"xml\": \"wsp:Policy...\"            }  }}\n\n```"
									},
									"response": []
								},
								{
									"name": "All Revisions",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query AllRevisions {\n    policyByName(name: \"some-policy\") {\n    goid\n    guid\n    name\n    policyRevisions {ordinal active comment time xml}\n    }\n \n    serviceByResolutionPath(resolutionPath: \"/some-webapi\") {\n    goid\n    guid\n    name\n    policyRevisions {ordinal active comment time xml}\n    }\n}",
												"variables": "{\n   \n}"
											}
										},
										"url": {
											"raw": "{{target_gw}}",
											"host": [
												"{{target_gw}}"
											]
										},
										"description": "# Set Web Api Services\n\nCreate multiple web API services on the target gateway.\n\nInput: See sample for input. Here is a sample:\n\n``` json\n{  \"input\": {    \"name\" : \"New service created\",    \"folderPath\" : \"/migrationTest\",    \"resolutionPath\": \"/testNewService17\",            \"methodsAllowed\": [                \"GET\",                \"POST\",                \"PUT\",                \"DELETE\"            ],            \"enabled\": true,            \"policy\": {                \"xml\": \"wsp:Policy...\"            }  }}\n\n```"
									},
									"response": []
								},
								{
									"name": "Specified Revision",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query SpecifiedRevision ($resolvers : ServiceResolversInput!) {\n    policyByNameAndRevision(name: \"some-policy\", revision: 1) {\n    goid\n    guid\n    name\n    policyRevision {ordinal active comment time xml}\n    }\n \n    serviceByResolversAndRevision(resolvers:$resolvers, revision: 2) {\n    goid\n    guid\n    name\n    policyRevision {ordinal active comment time xml}\n    }\n}",
												"variables": "{\n   \"resolvers\" : {\n    \"resolutionPath\": \"/some-webapi\"\n   }\n}"
											}
										},
										"url": {
											"raw": "{{target_gw}}",
											"host": [
												"{{target_gw}}"
											]
										},
										"description": "# Set Web Api Services\n\nCreate multiple web API services on the target gateway.\n\nInput: See sample for input. Here is a sample:\n\n``` json\n{  \"input\": {    \"name\" : \"New service created\",    \"folderPath\" : \"/migrationTest\",    \"resolutionPath\": \"/testNewService17\",            \"methodsAllowed\": [                \"GET\",                \"POST\",                \"PUT\",                \"DELETE\"            ],            \"enabled\": true,            \"policy\": {                \"xml\": \"wsp:Policy...\"            }  }}\n\n```"
									},
									"response": []
								}
							]
						},
						{
							"name": "Mutations",
							"item": [
								{
									"name": "Set Policies",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation setPolicies ($input: [L7PolicyInput!]!) {\n    setPolicies (input: $input) {\n        detailedStatus {\n            action status description\n            source {name value}\n            target {name value}\n        }\n    }\n}",
												"variables": "{\n  \"input\": [\n    {\n        \"guid\": \"86ba61e9-fc93-4be9-94de-3975bb03f641\",\n        \"name\": \"some-policy\",\n        \"folderPath\": \"/\",\n        \"policyType\": \"FRAGMENT\",\n        \"soap\": false,\n        \"policy\": {\n            \"xml\": \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n<wsp:Policy xmlns:L7p=\\\"http://www.layer7tech.com/ws/policy\\\" xmlns:wsp=\\\"http://schemas.xmlsoap.org/ws/2002/12/policy\\\">\\n    <wsp:All wsp:Usage=\\\"Required\\\">\\n        <L7p:CommentAssertion>\\n            <L7p:Comment stringValue=\\\"Policy Fragment: some-policy\\\"/>\\n        </L7p:CommentAssertion>\\n        <L7p:HardcodedResponse>\\n            <L7p:Base64ResponseBody stringValue=\\\"SGVsbG8gV29ybGQ=\\\"/>\\n        </L7p:HardcodedResponse>\\n    </wsp:All>\\n</wsp:Policy>\\n\"\n        }\n    }\n  ]\n}"
											}
										},
										"url": {
											"raw": "{{target_gw}}",
											"host": [
												"{{target_gw}}"
											]
										},
										"description": "# Set Policy Fragments\n\nSet multiple policy fragments together. The fragments may or may not exist at the destination. Each fragment is either created if it doesn't exist at target or updated if it already exists.\n\nInput: same structure as createPolicyFragment but as an array instead of a single web api service\n\n``` json\n{\n  \"input\": [\n    {\n      \"name\" : \"New policy somewhere\",\n      \"folderPath\" : \"/migrationTest\",\n      \"policy\" : {\n      \"xml\" : \"wsp:Policy...>\"\n      }\n    }\n  ]\n}\n\n```"
									},
									"response": []
								},
								{
									"name": "Set Services",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation setServices (\n    $input: [L7ServiceInput!]!,\n    $clusterProperties: [ClusterPropertyInput!]!) {\n    # Ensure the availability of Web API service dependencies\n    setClusterProperties(input: $clusterProperties) {\n        detailedStatus {\n            action status description\n            source {name value}\n            target {name value}\n        }\n    }\n    setServices (input: $input) {\n        detailedStatus {\n            action status description\n            source {name value}\n            target {name value}\n        }\n    }\n}",
												"variables": "{\n  \"input\": [\n    {\n      \"name\": \"some-webapi\",\n      \"resolutionPath\": \"/some-webapi\",\n      \"enabled\": true,\n      \"checksum\": \"744531b224938981e1ecacea1efcf002517d99a5\",\n      \"folderPath\": \"/\",\n      \"serviceType\":\"WEB_API\",\n      \"methodsAllowed\": [\n        \"GET\",\n        \"POST\",\n        \"PUT\",\n        \"DELETE\"\n      ],\n      \"policy\": {\n        \"xml\": \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n<wsp:Policy xmlns:L7p=\\\"http://www.layer7tech.com/ws/policy\\\" xmlns:wsp=\\\"http://schemas.xmlsoap.org/ws/2002/12/policy\\\">\\n    <wsp:All wsp:Usage=\\\"Required\\\">\\n        <wsp:OneOrMore wsp:Usage=\\\"Required\\\">\\n            <wsp:All wsp:Usage=\\\"Required\\\">\\n                <L7p:ComparisonAssertion>\\n                    <L7p:Expression1 stringValue=\\\"${gateway.greetings}\\\"/>\\n                    <L7p:Expression2 stringValue=\\\"\\\"/>\\n                    <L7p:ExpressionIsVariable booleanValue=\\\"false\\\"/>\\n                    <L7p:Negate booleanValue=\\\"true\\\"/>\\n                    <L7p:Operator operator=\\\"EMPTY\\\"/>\\n                    <L7p:Predicates predicates=\\\"included\\\">\\n                        <L7p:item binary=\\\"included\\\">\\n                            <L7p:Negated booleanValue=\\\"true\\\"/>\\n                            <L7p:Operator operator=\\\"EMPTY\\\"/>\\n                            <L7p:RightValue stringValue=\\\"\\\"/>\\n                        </L7p:item>\\n                    </L7p:Predicates>\\n                </L7p:ComparisonAssertion>\\n                <L7p:SetVariable>\\n                    <L7p:Base64Expression stringValue=\\\"JHtnYXRld2F5LmdyZWV0aW5nc30=\\\"/>\\n                    <L7p:VariableToSet stringValue=\\\"greetings\\\"/>\\n                </L7p:SetVariable>\\n            </wsp:All>\\n            <L7p:SetVariable>\\n                <L7p:Base64Expression stringValue=\\\"SGVsbG8sIFdvcmxkIQ==\\\"/>\\n                <L7p:VariableToSet stringValue=\\\"greetings\\\"/>\\n            </L7p:SetVariable>\\n        </wsp:OneOrMore>\\n        <L7p:HardcodedResponse>\\n            <L7p:Base64ResponseBody stringValue=\\\"JHtncmVldGluZ3N9\\\"/>\\n            <L7p:ResponseContentType stringValue=\\\"text/plain; charset=UTF-8\\\"/>\\n        </L7p:HardcodedResponse>\\n    </wsp:All>\\n</wsp:Policy>\\n\"\n      },\n      \"tracingEnabled\": false,\n      \"wssProcessingEnabled\": false\n    }\n  ],\n  \"clusterProperties\": [\n    {\n      \"name\": \"greetings\",\n      \"value\": \"Hello, World!\"\n    }\n  ]\n}\n"
											}
										},
										"url": {
											"raw": "{{target_gw}}",
											"host": [
												"{{target_gw}}"
											]
										},
										"description": "# Set Web Api Services\n\nCreate multiple web API services on the target gateway.\n\nInput: See sample for input. Here is a sample:\n\n``` json\n{  \"input\": {    \"name\" : \"New service created\",    \"folderPath\" : \"/migrationTest\",    \"resolutionPath\": \"/testNewService17\",            \"methodsAllowed\": [                \"GET\",                \"POST\",                \"PUT\",                \"DELETE\"            ],            \"enabled\": true,            \"policy\": {                \"xml\": \"wsp:Policy...\"            }  }}\n\n```"
									},
									"response": []
								},
								{
									"name": "Update Revisions",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation updateRevisions(\n    $policies: [L7PolicyPartialInput!]!,\n    $services: [L7ServicePartialInput!]!,\n    $activate: Boolean!,\n    $comment: String) {\n  updatePoliciesRevision( input: $policies\n        activate: $activate\n        comment: $comment) {\n    detailedStatus {\n            action status description\n            source {name value}\n            target {name value}\n        }\n  }\n \n  updateServicesRevision(\n        input: $services\n        activate: $activate\n        comment: $comment) {\n    detailedStatus {\n            action status description\n            source {name value}\n            target {name value}\n        }\n  }\n}",
												"variables": "{\n    \"comment\": \"test-comment\",\n    \"activate\": true,\n    \"policies\": [{\n        \"name\": \"some-policy\",\n        \"policyType\": \"FRAGMENT\",\n        \"checksum\": \"\",\n        \"policyRevision\": {\n            \"ordinal\": 1\n        }\n    }],\n    \"services\": [{\n        \"name\": \"some-webapi\",\n        \"resolutionPath\": \"/some-webapi\",\n        \"serviceType\": \"WEB_API\",\n        \"checksum\": \"\",\n        \"policyRevision\": {\n                \"ordinal\": 2\n        }\n    }]\n}"
											}
										},
										"url": {
											"raw": "{{target_gw}}",
											"host": [
												"{{target_gw}}"
											]
										},
										"description": "# Set Web Api Services\n\nCreate multiple web API services on the target gateway.\n\nInput: See sample for input. Here is a sample:\n\n``` json\n{  \"input\": {    \"name\" : \"New service created\",    \"folderPath\" : \"/migrationTest\",    \"resolutionPath\": \"/testNewService17\",            \"methodsAllowed\": [                \"GET\",                \"POST\",                \"PUT\",                \"DELETE\"            ],            \"enabled\": true,            \"policy\": {                \"xml\": \"wsp:Policy...\"            }  }}\n\n```"
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Private Key Signing",
					"item": [
						{
							"name": "Queries",
							"item": []
						},
						{
							"name": "Mutations",
							"item": [
								{
									"name": "Set Keys",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation setKeys ($keys: [KeyInput!]!) {\n    setKeys (input: $keys) {\n        detailedStatus {\n            action status description\n            source {name value}\n            target {name value}\n        }\n    }\n}",
												"variables": "{\n  \"keys\": [\n      {\n      \"keystoreId\": \"00000000000000000000000000000002\",\n      \"alias\": \"some-key\",\n      \"keyType\": \"RSA\",\n      \"subjectDn\": \"CN=some-key\",\n      \"p12\": \"MIIKKAIBAzCCCdIGCSqGSIb3DQEHAaCCCcMEggm/MIIJuzCCBbIGCSqGSIb3DQEHAaCCBaMEggWfMIIFmzCCBZcGCyqGSIb3DQEMCgECoIIFQDCCBTwwZgYJKoZIhvcNAQUNMFkwOAYJKoZIhvcNAQUMMCsEFF7C7PxT4Z5ViryNm8kRviZsJ+UQAgInEAIBIDAMBggqhkiG9w0CCQUAMB0GCWCGSAFlAwQBKgQQhtSjhsEg3la3PBSLME6ajwSCBNDhm0cLaaI2ILytdMSatFzlMxlU5XC6lodEIaj3JWbKm41T0cDEPKjjsBQi3VToszzygLnlx6/4JDtnPYzemlWErmn3UC0fdrPrK1s7DS8j58EFCSMrg3Jf8pazQI+kpWrgJmQgjua7W2QjkleY0VfXoQgckJ/rXSJsbVql8UUKAEck7fftN2oX7YUcfBX4xiVOyrR22tM8/wcDl8wZtkekIVWieMbbsAhaeOUls2va8I6S4vx1s8WcmhCu4RIW2C7q5bIQehKZ3a9EfhDu7FxLsuRnw7z2BlUKWjfr13a8Da01oQtn+gTsaKarnrHUxQEn3EVK89A8PCFLwlNn/X6gl3Fhx/fek90mVoBVM3XajcG5RcuKpddyvo1UQSrFZ0kZQNvG7yFcDGxDns7Chzo2zhv9J3pBg3d33pq31JVEtcd5YXNvfOvinYuh6EuF1COUXGZeLl1ooFLzr5qKrtWCxEma/SJnjx3gG5Q/PGvlZPbVb3GAMcjin/hFL+AkbjMhFjQQP9KEywehfAUNAYQ+WmNVUCaJTiHCKZkGfUFcBRa3BrvkNgdOpcq9nvu5YTBIF9CVlOfKbORRNNRw5NCo8aktzU0TJh9lyRMV3fgMIFUfJdX2ulNjzJJXiYqowUY20ErPCvTiy/941YZlRPrL1DOG2s/Dqz1CH31n9kuP3P1Dt7+s1G7CglGGzY7ORcUh0oQ6mR2qFX/oU+r8nX7WvrYezHRsy7fIeyZ7b6eN1z1aqctMsKY4LqqvwkIaq1e4KyI4dntirJ9d+Tsxr9FRNHyDbXVZoghbFLS/CIypkVBxRP+oRUolq/La/wLHNNqPxMqR1wwzKqgCi8eenA/8DhmkahFsx5GW2W8wrQAoLYcYxzVn03uIb0x7DmdbpIQSjJZQ31KheEOUvt+8Il+JmIkYN6AMZjw6hXB4ZWXJwzp17uMZ5X9A2FJjVloG9mak4dP2Gy6urJyKzhEUFcVSPSHdWd+3F2LOu3xIOS4Q+sYGzsSbrUrJjhmqeFXZaujr5Bg1pTILS9RI2CdPfQYcLZMFnx2vd5cKTTRdRDb8DI+ywbFiLwxjigdiYBfJJFUnXGbVsy8CLvAI3ah9ehEW4kmTXQwAqHm6EvF53wMquw6oDIhaUnBZEPtiAyPZtJ2IJTDzaFYpfxEgIcmQjqXCsLMuYrlkSCGO5mUhGYEGD0VGZSLcRTtMbg1a3NJqsUxVeFkrQnquDKIofQ/M48QE6E2+n+WpIYqEn9461UqVjdWXIktdt2UgwXZjRBiZa2csC50oXfq+hfQxlk8BXgra/Q9iq/gvsTAcLJvUoRQvW7eu3MFxlk8r5hKfkttq3mRSng21PSeEMh4V9fmgdCHqy69viGNsDY1uaZlDFIZWpoqWMhDo7+/9dd/asKdAkCHJJEZn8gUbMI/SbNAra11njUFwlAGjj0Vg6sscb7csvAyGkA3CK9x90xpHblr84W1DfIiiQDF1FSxO/JY98eKFSaTlT+Kfn9DhSO6q05beI3rvKZYh045MEwlRg+2VcO44KEzw0P61HM2fl+g3QZaX+ivkg0ypECYoU9jaOF9aTWp9DQf5PspcaF4O9hwtR4CAzwigGfPGpmWpoizsb3Ag7yyWl43E+pq+ELo2hLgyEjFEMB8GCSqGSIb3DQEJFDESHhAAcwBvAG0AZQAtAGsAZQB5MCEGCSqGSIb3DQEJFTEUBBJUaW1lIDE2ODA1OTA3ODkxNDkwggQBBgkqhkiG9w0BBwagggPyMIID7gIBADCCA+cGCSqGSIb3DQEHATBmBgkqhkiG9w0BBQ0wWTA4BgkqhkiG9w0BBQwwKwQUev/+Vv922SKbMh3rEe+Vb9WZ0YkCAicQAgEgMAwGCCqGSIb3DQIJBQAwHQYJYIZIAWUDBAEqBBA0ixkE9pmlGHIVQybKo/mIgIIDcNSrM3urzob0WDrg/BmqCHFBRYrebCJ+Lxa8q23+VhuK8o9CfUBJNdLAv8m7ULbs4XnFamselKKvJxU5Qfryfrb6hwb0TH7Zvj3T5WwvwW9m47B9GrFb3AbmsSMUDJhoIZHyzuD4oLv3G31aW7PZh4DLc4S2gAuesQIvuMhJp9HkRqoQXqxnvCwH9YB8ybvkE6osMjJKVffK7bp8WVn3O160PVYhttD6XXK1TzAqg8T2j1eE6jLXh3ZfLfl4URoXGOJHZ2/95JapDgW/DQi6+ScJdvOMd8Oi/p5CP9B1CzV8Pq8QvrcUR7us0Q4vpmNEWssxy6XyY+lZINkfjdRacyL2/jq1sV9HOaHtXRjnbbm9FFT6f87TYkVPStCZxXU21vgz9PUrE6n7wEfNW1WEcgTgQwdzk5k3qDl5f0llQXX+4ug8QPtgPpsZk2mv5tDmmfMFFR8cS2QxF0k0z0TD6QOgKEIWlRvhm2Fz9P9NxSkPNUO4zw1Iw3FUncCWQF9ptqnhHezjgiIwb7qX0ATv0UTKgRYkW818hnuSZLqCp058HpoLC2J+LUv0VZyXHaBr3RH5KaEbXYI0rtGG24p+MF8BQTA3VqCsRY8qHqsrZ2sSGlLgXG+TERTj+m/k/j+OzAu2AuJPrDs+Jx/7xgxUCOyG+O/IfIz9tRgfOI+WFD6gS2gDhi9bpLN0+xKMg+gpRdpnv+NRmhlSxbUF0YmAOchKTKLjRUo2Vv5n52a5upBQoLmibh76Zn7CUL1lzuUVn9+BeWRrUlrub/weyjtav5S4tM2BgpwekhbaDQWlQHr63cXI5w+Khv5DaDT9Yc58h8I2ZDOcA2JlxPIydzFgMe4suBqo9auEpvDzDJk+OCLjkAXmrmK4PEB+JTdG2hzzx1kM1CrcNpE0TLNMWmrfrwNLUQ/ex0SjQCN4XROOmMMwD9649jH/WT9Nk5gHzeqC5Et8SHK0A0+j/8scHyMW//0YuXEW4MLrUgy8mPJ6RZ6Q2GQlSLTnAa2SFN9ADs0y5gryzCyVAkuvG7n5AqP4iyxUqc6OPCeZ0Ygc4MITxash577hsVmtL1pPdv8tQSFGrDg8S2PBtro+lBV5TI/jSM7i5QMfl6adNS9SpjKERUMVvPZaK7uM/gCAJsHrLmqRxiJlUuHKOFVs1XeBqkRBbSIwTTAxMA0GCWCGSAFlAwQCAQUABCBYScQDMTTZDOB6zc7R4o3iZXhvMBJocBpVSG/Y5nkT8QQUFtq5fjMA/38+WrpOxN7iHIjb/z0CAicQ\",\n      \"certChain\": [\n        \"-----BEGIN CERTIFICATE-----\\nMIIC6zCCAdOgAwIBAgIJAPBYDK3qjfM1MA0GCSqGSIb3DQEBDAUAMBMxETAPBgNVBAMTCHNvbWUt\\r\\na2V5MB4XDTIzMDQwNDA1NDU1M1oXDTI4MDQwMjA1NDU1M1owEzERMA8GA1UEAxMIc29tZS1rZXkw\\r\\nggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCADgFxsGgmoRefiq4dMzfgy0minfIw98PP\\r\\nco/gJtvAXdW/0ZamjpGNhepq3LJ0rNonXrbpOJSn9nBtcAmQQdDq9rMWVXbh11OJH7BfeGs2vFSU\\r\\nPXV9P0K/8w/X5xFaKZ8/qhQVLLyOq8gGjCk3NS7XTMmA+9jjkoxzqNDvRVRw7mEFRFxgIJOuPBBL\\r\\nTpBKjiCxdfFbcV9r2ZQyf0a/UO+M7UIGuFFJxHTtdtp0PBZAhJ/wf6oIyMeeCNSkYmLYI9v8Sne5\\r\\n4oRiIFTJ0BrnIA/7PNyjiaDejfy6TmrqmtV85cn3wxorC8tOfUv1PsOv1FGqBbbYvQ7lh5ybVLL7\\r\\nefGTAgMBAAGjQjBAMB0GA1UdDgQWBBQL2fCUg0lRk4HWwBBr35SyKSQ70jAfBgNVHSMEGDAWgBQL\\r\\n2fCUg0lRk4HWwBBr35SyKSQ70jANBgkqhkiG9w0BAQwFAAOCAQEAELwHue6qGlrWpfJc3rq3Pby7\\r\\nNwjI7VEANcWHM5WVQ0TX5+Hm/P+GIyxr4WFA356nnUeGCe3owCWv3Y3yRva715Jf6JUofYCNgvk7\\r\\nuUoQgLmTIe2s4GguuX7ATVAEMz5EM1EmcapGgrfoEbWFTEemUr1nvu19LSDgVzKJhvVpWvWwCQGr\\r\\nX2lipOGuZrgGumW+AaTATLpxCasG3aP3IqdGaMs+ALi07CM9b/JD+XPRAp1B7yYrFTGYbftfvBeJ\\r\\nKfKiC2YoJKNJcNXMsz3yhGfvVbZrSG5LZIgCjqsDJ0EoCXMzpR3AACHbF9p4ummEbrAOmse1lx6u\\r\\nPh9PhFwPx2XmUg==\\n-----END CERTIFICATE-----\\n\"\n      ]\n    },\n    {\n            \"goid\": \"00000000000000000000000000000002:signer-key\",\n            \"keystoreId\": \"00000000000000000000000000000002\",\n            \"alias\": \"signer-key\",\n            \"checksum\": \"0ccd1a6cbad5e1b02a50c23bb55e5217fb6fc6e8\",\n            \"keyType\": \"RSA\",\n            \"subjectDn\": \"CN=signer-key\",\n            \"p12\": \"MIIKXAIBAzCCCgYGCSqGSIb3DQEHAaCCCfcEggnzMIIJ7zCCBbYGCSqGSIb3DQEHAaCCBacEggWjMIIFnzCCBZsGCyqGSIb3DQEMCgECoIIFQDCCBTwwZgYJKoZIhvcNAQUNMFkwOAYJKoZIhvcNAQUMMCsEFLSpQFn32PhR9IWHO1WbSSixZTtQAgInEAIBIDAMBggqhkiG9w0CCQUAMB0GCWCGSAFlAwQBKgQQ9nyH9/2QjUBGYnrZDZNhWgSCBNDampCcJAi7sOngQQk91vtmHgZf6dlslOrjRGXSSLSsTVDwZ3wkyCqd03H9RIFeDQhKDQ+wtvdTPn+MHEL//B8OGvvNI7PnI5suyLGFRR95Jz3tekvSyGLC/ioBQpuYH2E9PkybQt/qAyesS/yaEKncO4nwZg3EEGvxXnskpYhbi+Hq1Yr1kBImQVINw+mNuFf1W/mZ+F3ex5AIN8FMUzgQ8F9Eqfwtny5CDCUzyvg/jw0tKI8G10zv0C0M9AnGh71dPIm6NlmE5vrn4WC5x8oRA15I4plHJUCZHOw2Yz3wtilD9Mot72rfTH+Kv09vKNTb+a5WR5bRiP8Oix0PK8GjgJ/c7FqiBgiJJAXQ7O/OKXDtVneGBIB82dlKFCHxp8nmOGQDI+IeuVV4UpKkABfqGwGIsY+6r9XmzEoZrIetdoTCHk7b1WTx2LV5zym/FCAhId5BSbQfewp7sDzYNyVstXUqIknmAtx0nn6yZ6FSfKeM9hMwuXgKHg3Lf/NKd/vs1xtNUNUkJ1QLmZ6nVCUOZIxbEnbNyz68q+VExtY28E7zYF8tnJl1LA3Yh92pbJNoy7+VbjNUB2MnENnp7pY40yWfoYQXsoRLuzo5Mmk1BaWFwd5Vh1dsx5FkCRr07Ry200Jv7dCbWd4WnKXSs3OTK1tSAgv/SNeqSgAunHDgw1dChM/wuzMZ2s1wTVQfjcYvOHKIsFOaJM8LrcfBX+s8CaGsx3J2RAVg97xzlv4cjPQqDH/70jAHOdOMS2ezOFbwHPq1hccnUt+8AIRcPXHxxmU5ipmJGDtGsJYUKwHjIvrbwUXcjXIaXD2yo4DoZzW4c8Xo+iZCkjpNa+qsKUZsvQkoCc9R+VZuSSyzIrTGstjEBXA7hORoKFH9JWsiVZRrxHaauWX02wzFu37Urx8ff8TrKRw7fz7iRLOoF+XKRaqaHJZJ0MFp5OjvsgNsZPotHE1AAs3kqumLZTAZG6FRJ6LmnL4pVT1Ls51FY2BOEfCivQFG2hlBseGFrKdGYsUqbRLg3g0Rl5YAX1aJNa9eZ5uMexr7z/lKNdybCw5I/NYcDl8Pl2AYlngI+CsT/bEeJ8x1c8UwUmBtbTAYkVtkMm85hBDSqVWfqrRAzYI9Tzj/ws9G8DWnuskd5Sbpm4oOOkF/5YwM2vUEi++phnL2R027mY3csUgOe7mlTzQGKJxZ6seb8aURuNKGuBY2EFS/XncB5I+aEK2YF6SxKXBHP8jwDgBXyDhcBZbET+HGZSMDejePJt8mZRXXq1kAA4KHHYe6l/yMd8tDwSMpXQXAgJTLMD6uoVir3cToUesdyts10OGBg4/+EJ5KtGgmM3/WJ62plc70iMs52s1RO+3y5jFQP0BtPdf35xT0emH/ki89n+OejJGnMPAF44PW/bmH7th5pVsmlgNFenSJaFKXVUVJD9nSRqiun8gpaEvCqQRJRWUcYjN6r0KEbd/KYKpZdeoUPQ+TWZVYUz7tJyufCjI5WgDWWsYW8fM574cI+pRsLkhdBtS2Gk9Ro63fLLoyCIRPM9EQag6+qlPJPR/jN1jo/0IPyWFGvMqmeRuxz8T8KdZJc7C0TSltCJLyBROSQWOxd6hzcLSzVBJExMAubGKmOdj2Jlw1XPLc3RKCKjFIMCMGCSqGSIb3DQEJFDEWHhQAcwBpAGcAbgBlAHIALQBrAGUAeTAhBgkqhkiG9w0BCRUxFAQSVGltZSAxNzExMTA2MTkxMjk0MIIEMQYJKoZIhvcNAQcGoIIEIjCCBB4CAQAwggQXBgkqhkiG9w0BBwEwZgYJKoZIhvcNAQUNMFkwOAYJKoZIhvcNAQUMMCsEFPp44oo0SsfLeQI1uOtXIpF3BUoSAgInEAIBIDAMBggqhkiG9w0CCQUAMB0GCWCGSAFlAwQBKgQQcMOAAaVZX24aXKUxpdCT94CCA6DZM5bCszu0vasSis2IW5YmNEkcUGHH+ULmH6VuzPJE3EsLc2xbszc+dYc+gjeLA9zueyAtGCZErmTgap7+/YRyq88lPkEUQP/qr1itFNYa/enoVyY1i8xXX8+yuKpX4tLx0PctYrrzStLulX46FTgA0UE3pYK4FSjkxOO977DS2Lhs7vFSN0w/jqQZW/5Bw/g/YTDvSk/vn06Ydhvo/va/K5eOvE6gGfDOvxnG3hNUXxIYUwm4ZmWfG/NJ7JgsISq8FNImD122jazCl+zTaJoO5iuVwU0AjkRu2nxC7+hB5VGsVIEDCRnT9qXVizcwfG6xwQ5CHZYwkDgG1yisuDfPG6ShzzWU4ZOSQW6/7X92cDI1/CYvTUiOfc5AffBMTxS/0Sgd6rIyLBl0n6VQDVs6HZGikHmZpUxeEVI2aoC+y1aqN2NbyKqkcg89jF5ZjDqijw2NPTujncfY9lGa7SFgmVqH9mikWAREQ2q0Sk9+uIGtji6w6jxa+gbM213kHCLqW1GtCKuVk3MzVRmlRh+h5N/IftMHozP/fW0uVeBI7vON+C2EJYO/WpCAUrnc7bNMsCNCCNwZS7s4526DKI+f169U+ogIMeGO7B5W5IVx51yO5mTYJdUbMkfZxQJQ1BDOOkOwWbjpSfNb5ThOX6gkhT943ifBECvesmfC3VuOehPnFzcybC9g1EVXbX0dAnfVwLjuoBAT7hrJhfOAdqmVihLKwV3xUircxbqrPuRdQa65Dxfantvrh1FRJ7ypjiyv7P1w3Yl3cYA+Z1iwUc8s1tNmXpXwGUr1PX9QoEibyxryvsfmJrDccsOIOxQhT9Agh7tzYS9tImHltp846p4R14ElijzkwDSDG3B7AGgsWiW3bV4hri1EXSNLtdhTA9+nckbmagextd0XROYpPruQXemCNg07n8zblkKfoQnT9iytYLGF8SrVHH2mlM2sEeHRbPRPGXSetiKJU1aIky7kha2GHZ79yfvuvi3/hdF4jDvS5n5PZRRMYUcWLS4rBLhosL+XQFh/l2XYLaO2KZq+l6vq7VYHjYTQuHgi67+DHvujLCtTNme8XLGSuqKt5TzffKIU4K1Ur0Rs9Iyez3aUdwcc1yP8NFi63Q0Nd+xyxVRa/lGYgegcreMFHsu3TEObdT/xQiG4fQ2k9b8BbdRgeAgv5johvveBR5itmRJar9l3ajjlUAOgxhs8viTlb5oyZUK9cbueJCLW2OyVbMpsME0wMTANBglghkgBZQMEAgEFAAQgYJQBmIaSOm7EIhSlUJP9tRmf0XUkNW+rJ/23Us/91JYEFBhDc5Jr+Th8jEbsyVeHXG5r5N4rAgInEA==\",\n            \"certChain\": [\n                \"-----BEGIN CERTIFICATE-----\\nMIIDEzCCAfugAwIBAgIJAPbRKstkY3I0MA0GCSqGSIb3DQEBDAUAMBUxEzARBgNVBAMTCnNpZ25l\\r\\nci1rZXkwHhcNMjQwMzIyMTAxNTAyWhcNMjkwMzIxMTAxNTAyWjAVMRMwEQYDVQQDEwpzaWduZXIt\\r\\na2V5MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAtJHdjife5OA+mGiDlpZ1Mo3dAA8o\\r\\nRodnyHYr0Rv2npWXM1M76Mz+nmLlvCNEJ5IvZCPsUKVtJY/XwJLhg/macYPnmR8+SM9s6y3kXdfP\\r\\nSkfF9sa3rge+xUOtpE+adeBTBurmY/gyjBulo4pKThtVyLqd3fI1MZrUVZeE/Yon/GFpnc1ZxVDt\\r\\nT5i0Jo+kRAVAwgL/qvY37Alf76Rz1hTsQmCANlT0HgvmH3fpFMCbm9sMX5pRHy64ogizyU9F19xA\\r\\nzaJ9w1u1xPs3BJPme8j/QJkK4rlFiD8qb1s0xiHQQ1bw16y3vPG0H9f99aw+dtVgZCHcarYKuDk5\\r\\nrXy/FweNsQIDAQABo2YwZDASBgNVHRMBAf8ECDAGAQH/AgEBMA4GA1UdDwEB/wQEAwIBBjAdBgNV\\r\\nHQ4EFgQUsxxyRk1hOYBhvG50e/tMVk2xeXgwHwYDVR0jBBgwFoAUsxxyRk1hOYBhvG50e/tMVk2x\\r\\neXgwDQYJKoZIhvcNAQEMBQADggEBACpoX96lMwQ76vEFgISu32jiuB2JDW/mw0yXzLzxibmWRM9W\\r\\nUq9bc0yYMpgRkEpTLfsnXzhhY5/yDZgC0Qp86K5jzPHma89oY1vlAymKJ2XxBeKRdkuTRGAAuKDr\\r\\nEZ4+XQ5n0oRfA2fz/ScjTclY9Ws5Hwnz2HnD6KuDICq8bLAUwfqwQ/CwsUn0H7XaMhO9lKw4vE9B\\r\\nNhxYvN4YZ35LMSd+hX8MeboZ2S6HjTy5u0gmSjjDNwaYr/fBtOrnDsLTxAJTO5htG6Ha+n2jAqK2\\r\\nKvhCuMWfV+dDAo4FLUReaGMeX30T12SnmLOe77KUlGO3VYaEecOZ4FVV6TSdzZx6nk0=\\n-----END CERTIFICATE-----\\n\"\n            ]\n        }\n  ]\n}"
											}
										},
										"url": {
											"raw": "{{target_gw}}",
											"host": [
												"{{target_gw}}"
											]
										},
										"description": "# Set Keys\n\nBase64 encoded PKCS12 keystore containing the private key and cert chain for the key entry.  \nThe keystore is password-protected using the transaction encryption passphrase provided."
									},
									"response": []
								},
								{
									"name": "Generate CSR",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation generateCSR($alias:String!, $params:CSRGenerateParamsInput!) {\n    generateCSR(alias:$alias, params:$params) {\n        csr { \n            pem\n            issuedTo\n        }\n    }\n}",
												"variables": "{\n     \"params\": {\n         \"subjectDn\": \"cn=test\",\n         \"hashAlgorithm\": \"SHA512\",\n         \"signatureAlgorithm\":\"RSASSA_PSS\",\n         \"expiryAge\":100,\n         \"notBefore\":\"2024-03-07\",\n         \"subjectAlternativeNames\" : [\n            {\"name\": \"email\", \"value\": \"test@mail.com\" },\n            {\"name\":\"uri\", \"value\":\"https://test.com\"},\n            {\"name\":\"IP Address\", \"value\":\"10.12.121.12\"},\n            {\"name\":\"IP Address\", \"value\":\"10.12.121.13\"},\n            {\"name\":\"DNS Name\", \"value\":\"test\"},\n            {\"name\":\"Directory Name\", \"value\": \"cn=John Doe,dc=example,dc=com\"}\n         ]\n     },\n     \"alias\":\"some-key\"\n}"
											}
										},
										"url": {
											"raw": "{{source_gw}}",
											"host": [
												"{{source_gw}}"
											]
										},
										"description": "# Get key by alias\n\nGet key by alias.\n\nThis is an entry in the gateway keystore. These entries combine a private key and associated certificate and are used for example by listener ports.\n\nThese represent the gateway's own certificates as opposed to the Certificate type which represent a cert trusted by the gateway.\n\nBase64 encoded PKCS12 keystore containing the private key and cert chain for the key entry.  \nThe keystore is password-protected using the transaction encryption passphrase provided."
									},
									"response": []
								},
								{
									"name": "Sign Certificate",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation signCSR ($alias:String!, $params:CSRSignParamsInput!) {\n    signCSR (alias:$alias, params:$params) {\n        chain {\n            issuedTo\n            issuedBy\n            certChain\n        }\n    }\n}",
												"variables": "{\n     \"params\": {\n         \"subjectDn\": \"cn=test1\",\n         \"hashAlgorithm\": \"SHA512\",\n         \"expiryAge\":100,\n         \"notBefore\":\"2024-03-07\",\n         \"csr\": {\n                \"pem\": \"-----BEGIN CERTIFICATE REQUEST-----\\nMIIDITCCAdUCAQAwDzENMAsGA1UEAwwEdGVzdDCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoC\\r\\nggEBAIAOAXGwaCahF5+Krh0zN+DLSaKd8jD3w89yj+Am28Bd1b/RlqaOkY2F6mrcsnSs2idetuk4\\r\\nlKf2cG1wCZBB0Or2sxZVduHXU4kfsF94aza8VJQ9dX0/Qr/zD9fnEVopnz+qFBUsvI6ryAaMKTc1\\r\\nLtdMyYD72OOSjHOo0O9FVHDuYQVEXGAgk648EEtOkEqOILF18VtxX2vZlDJ/Rr9Q74ztQga4UUnE\\r\\ndO122nQ8FkCEn/B/qgjIx54I1KRiYtgj2/xKd7nihGIgVMnQGucgD/s83KOJoN6N/LpOauqa1Xzl\\r\\nyffDGisLy059S/U+w6/UUaoFtti9DuWHnJtUsvt58ZMCAwEAAaCBmDCBlQYJKoZIhvcNAQkOMYGH\\r\\nMIGEMIGBBgNVHREEejB4gQ10ZXN0QG1haWwuY29thhBodHRwczovL3Rlc3QuY29thwQKDHkMhwQK\\r\\nDHkNggR0ZXN0pEMwQTERMA8GA1UEAwwISm9obiBEb2UxFzAVBgoJkiaJk/IsZAEZFgdleGFtcGxl\\r\\nMRMwEQYKCZImiZPyLGQBGRYDY29tMEEGCSqGSIb3DQEBCjA0oA8wDQYJYIZIAWUDBAIDBQChHDAa\\r\\nBgkqhkiG9w0BAQgwDQYJYIZIAWUDBAIDBQCiAwIBQAOCAQEAQ85h0KBxSRZ7WLgN2ab3N6cUX03Q\\r\\nG2/Fljj5eFK+M1yhizZ5bNg6K/YoAbMElG50nti+zCTUcKnJGh/u3edCLhLkSFLRStS0dDS5N90T\\r\\nUH4LR19B1AbYPoTgjA9CLHERTJZWxnvaV/MDU7o71EyuNK9IkwqhxmENdyOuhu5YL+8h7pR+ZBdH\\r\\n4ZGdRFTBwaVAdreXbfApzA9SH/DccdjbSE2svvJWPCAWe76OFv4bmsLM0mMWGvvXFc9bQX6o3jOK\\r\\n89AMgYOcxKgvpC2GaFiVdM/mmMq/oFXwJVKhuJB+EOQ00UbTJuGN1uvUQIa5lcaXhZEdHSu29YQE\\r\\nSx4Xy9o39w==\\n-----END CERTIFICATE REQUEST-----\\n\",\n                \"issuedTo\": \"00000000000000000000000000000002:some-key\"\n            }\n     },\n     \"alias\":\"signer-key\"\n}"
											}
										},
										"url": {
											"raw": "{{target_gw}}",
											"host": [
												"{{target_gw}}"
											]
										},
										"description": "# Set Keys\n\nBase64 encoded PKCS12 keystore containing the private key and cert chain for the key entry.  \nThe keystore is password-protected using the transaction encryption passphrase provided."
									},
									"response": []
								},
								{
									"name": "Replace Certificate Chain",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation replaceCertChain ($alias:String!, $params:KeyCertChainParamsInput!) {\n    replaceCertChain (alias:$alias, params:$params) {\n        affectedKeyAliases\n    }\n}",
												"variables": "{\n    \"alias\":\"some-key\",\n    \"params\": {\n        \"certChain\": [\n                    \"-----BEGIN CERTIFICATE-----\\nMIIDjjCCAnagAwIBAgIJAPoroUlnZ8kdMA0GCSqGSIb3DQEBDQUAMBUxEzARBgNVBAMTCnNpZ25l\\r\\nci1rZXkwHhcNMjQwMzA2MTgzMDAwWhcNMjQwNjMwMTAxODE1WjAQMQ4wDAYDVQQDEwV0ZXN0MTCC\\r\\nASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAIAOAXGwaCahF5+Krh0zN+DLSaKd8jD3w89y\\r\\nj+Am28Bd1b/RlqaOkY2F6mrcsnSs2idetuk4lKf2cG1wCZBB0Or2sxZVduHXU4kfsF94aza8VJQ9\\r\\ndX0/Qr/zD9fnEVopnz+qFBUsvI6ryAaMKTc1LtdMyYD72OOSjHOo0O9FVHDuYQVEXGAgk648EEtO\\r\\nkEqOILF18VtxX2vZlDJ/Rr9Q74ztQga4UUnEdO122nQ8FkCEn/B/qgjIx54I1KRiYtgj2/xKd7ni\\r\\nhGIgVMnQGucgD/s83KOJoN6N/LpOauqa1XzlyffDGisLy059S/U+w6/UUaoFtti9DuWHnJtUsvt5\\r\\n8ZMCAwEAAaOB5TCB4jAMBgNVHRMBAf8EAjAAMA4GA1UdDwEB/wQEAwIF4DAdBgNVHQ4EFgQUC9nw\\r\\nlINJUZOB1sAQa9+UsikkO9IwHwYDVR0jBBgwFoAUsxxyRk1hOYBhvG50e/tMVk2xeXgwgYEGA1Ud\\r\\nEQR6MHiBDXRlc3RAbWFpbC5jb22GEGh0dHBzOi8vdGVzdC5jb22HBAoMeQyHBAoMeQ2CBHRlc3Sk\\r\\nQzBBMRMwEQYKCZImiZPyLGQBGRYDY29tMRcwFQYKCZImiZPyLGQBGRYHZXhhbXBsZTERMA8GA1UE\\r\\nAxMISm9obiBEb2UwDQYJKoZIhvcNAQENBQADggEBAAWQJbIsyyJi/naiy6az01Q6bgogiSdUvcPv\\r\\nl0B+/N1oTo4B1lb9RwnSDArBAgGuVcmsDmI0Xtw7V+q1EGZV/Ir0x1aSOa98B8qatJan1v9sGPKJ\\r\\nK5Dv/Hvakaxxf+qOP4UUjITqxxE0SKILxI7+yRXD0ii+FUqwSDejraYbr2b05FDlVSbzgsQ29dXG\\r\\nKELSocVNpOxa4wsEtuofE4VVGU09QF1ofC/bPXCg8bL4B8m6RKm9JQkEfkNWwWPyJblDAC9c8NOU\\r\\nXkHsEfH55Ngff5zY6QTqjBM3LoFzbh8uItU9vC4/cRfNkrMIeMwlqULeUVF1kYlcleb4IXoD8ROj\\r\\n/30=\\n-----END CERTIFICATE-----\\n\",\n                    \"-----BEGIN CERTIFICATE-----\\nMIIDEzCCAfugAwIBAgIJAPbRKstkY3I0MA0GCSqGSIb3DQEBDAUAMBUxEzARBgNVBAMTCnNpZ25l\\r\\nci1rZXkwHhcNMjQwMzIyMTAxNTAyWhcNMjkwMzIxMTAxNTAyWjAVMRMwEQYDVQQDEwpzaWduZXIt\\r\\na2V5MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAtJHdjife5OA+mGiDlpZ1Mo3dAA8o\\r\\nRodnyHYr0Rv2npWXM1M76Mz+nmLlvCNEJ5IvZCPsUKVtJY/XwJLhg/macYPnmR8+SM9s6y3kXdfP\\r\\nSkfF9sa3rge+xUOtpE+adeBTBurmY/gyjBulo4pKThtVyLqd3fI1MZrUVZeE/Yon/GFpnc1ZxVDt\\r\\nT5i0Jo+kRAVAwgL/qvY37Alf76Rz1hTsQmCANlT0HgvmH3fpFMCbm9sMX5pRHy64ogizyU9F19xA\\r\\nzaJ9w1u1xPs3BJPme8j/QJkK4rlFiD8qb1s0xiHQQ1bw16y3vPG0H9f99aw+dtVgZCHcarYKuDk5\\r\\nrXy/FweNsQIDAQABo2YwZDASBgNVHRMBAf8ECDAGAQH/AgEBMA4GA1UdDwEB/wQEAwIBBjAdBgNV\\r\\nHQ4EFgQUsxxyRk1hOYBhvG50e/tMVk2xeXgwHwYDVR0jBBgwFoAUsxxyRk1hOYBhvG50e/tMVk2x\\r\\neXgwDQYJKoZIhvcNAQEMBQADggEBACpoX96lMwQ76vEFgISu32jiuB2JDW/mw0yXzLzxibmWRM9W\\r\\nUq9bc0yYMpgRkEpTLfsnXzhhY5/yDZgC0Qp86K5jzPHma89oY1vlAymKJ2XxBeKRdkuTRGAAuKDr\\r\\nEZ4+XQ5n0oRfA2fz/ScjTclY9Ws5Hwnz2HnD6KuDICq8bLAUwfqwQ/CwsUn0H7XaMhO9lKw4vE9B\\r\\nNhxYvN4YZ35LMSd+hX8MeboZ2S6HjTy5u0gmSjjDNwaYr/fBtOrnDsLTxAJTO5htG6Ha+n2jAqK2\\r\\nKvhCuMWfV+dDAo4FLUReaGMeX30T12SnmLOe77KUlGO3VYaEecOZ4FVV6TSdzZx6nk0=\\n-----END CERTIFICATE-----\\n\"\n                ],\n          \"replaceAllMatchingCerts\": true\n     }\n     \n}\n"
											}
										},
										"url": {
											"raw": "{{target_gw}}",
											"host": [
												"{{target_gw}}"
											]
										},
										"description": "# Set Keys\n\nBase64 encoded PKCS12 keystore containing the private key and cert chain for the key entry.  \nThe keystore is password-protected using the transaction encryption passphrase provided."
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Revocation Check Policy",
					"item": [
						{
							"name": "Mutation",
							"item": [
								{
									"name": "Set Revocation Check Policies",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation setRevocationCheckPolicies($input: [RevocationCheckPolicyInput!] !) {\n    setRevocationCheckPolicies(input: $input) {\n        detailedStatus {\n            action status description\n            source {name value}\n            target {name value}\n        }\n        revocationCheckPolicies {\n            goid\n            name\n            defaultPolicy\n            defaultSuccess\n            continueOnServerUnavailable\n            checksum\n            revocationCheckPolicyItems  {\n                ... on RevocationCheckPolicyItem {\n                    type\n                    url\n                    allowIssuerSignature\n                    nonceUsage\n                    signerThumbprintSha1s\n                    url\n                }\n            }\n        }\n    }\n}",
												"variables": "{\r\n    \"input\": [{\r\n        \"name\": \"SampleRevocPolicy\",\r\n        \"defaultPolicy\": true,\r\n        \"defaultSuccess\": false,\r\n        \"continueOnServerUnavailable\": false,\r\n        \"revocationCheckPolicyItems\": [{\r\n            \"type\": \"CRL_FROM_URL\",\r\n            \"url\": \"https://test.com\",\r\n            \"allowIssuerSignature\": true,\r\n            \"nonceUsage\": \"EXCLUDE_NONCE\"\r\n        },\r\n        {\r\n            \"type\": \"CRL_FROM_CERTIFICATE\",\r\n            \"url\": \".*\",\r\n            \"allowIssuerSignature\": false,\r\n            \"nonceUsage\": \"INCLUDE_NONCE\"\r\n        },\r\n        {\r\n          \"type\": \"OCSP_FROM_URL\",\r\n          \"url\": \"https://ocspfromurl.com/\",\r\n          \"allowIssuerSignature\": true,\r\n          \"nonceUsage\": \"USE_NONCE_CONDITIONALLY\"\r\n        }]\r\n    }]\r\n}"
											}
										},
										"url": {
											"raw": "{{target_gw}}",
											"host": [
												"{{target_gw}}"
											]
										},
										"description": "# List all Web Api Services\n\nList all of the services\n\nInput: no input"
									},
									"response": []
								},
								{
									"name": "Delete Revocation policies",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation deleteRevocationCheckPolicies($input: [String!]!) {\n  deleteRevocationCheckPolicies(names: $input) {\n        detailedStatus {\n            action status description\n            source {name value}\n            target {name value}\n        }\n    }\n}",
												"variables": "{\n    \"input\": [\n        \"SampleRevocPolicy\"\n    ]\n}"
											}
										},
										"url": {
											"raw": "{{target_gw}}",
											"host": [
												"{{target_gw}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Query",
							"item": [
								{
									"name": "All Revocation Check Policies",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query revocationPolicies {\n    revocationCheckPolicies {\n        goid\n        name\n        defaultPolicy\n        defaultSuccess\n        continueOnServerUnavailable\n        checksum         \n        revocationCheckPolicyItems  {\n            ... on RevocationCheckPolicyItem {                \n                type\n                url\n                allowIssuerSignature\n                nonceUsage\n                signerThumbprintSha1s\n            }\n        }    \n    }\n}",
												"variables": ""
											}
										},
										"url": {
											"raw": "{{source_gw}}",
											"host": [
												"{{source_gw}}"
											]
										},
										"description": "# List all Web Api Services\n\nList all of the services\n\nInput: no input"
									},
									"response": []
								},
								{
									"name": "Revocation Policies By Name",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query revocationCheckPolicyByName($name: String!) {\n  revocationCheckPolicyByName(name: $name) {\n        goid\n        name\n        defaultPolicy\n        defaultSuccess\n        continueOnServerUnavailable\n        checksum         \n        revocationCheckPolicyItems  {\n            ... on RevocationCheckPolicyItem {\n                type\n                url\n                allowIssuerSignature\n                nonceUsage\n                signerThumbprintSha1s\n            }\n        }    \n    }\n}",
												"variables": "{\r\n  \"name\": \"SampleRevocPolicy\"\r\n}"
											}
										},
										"url": {
											"raw": "{{source_gw}}",
											"host": [
												"{{source_gw}}"
											]
										},
										"description": "# Cluster Properties\n\nGet all the cluster properties\n\nInput: none"
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Role Managment",
					"item": [
						{
							"name": "Query",
							"item": [
								{
									"name": "Roles",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query  {     \r\n  roles {\r\n    name\r\n    goid\r\n    checksum\r\n    roleType\r\n    description\r\n    tag\r\n    groupAssignees {\r\n        name\r\n        providerName\r\n        providerType\r\n    }\r\n    userAssignees {\r\n        name\r\n        login\r\n        subjectDn\r\n        providerName\r\n        providerType\r\n    }\r\n  }\r\n}\r\n",
												"variables": ""
											}
										},
										"url": {
											"raw": "{{source_gw}}",
											"host": [
												"{{source_gw}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Role By Name",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query roleByName($name: String!) {\r\n  roleByName(name: $name) {\r\n    goid\r\n    name\r\n    checksum\r\n\r\n    roleType\r\n    description\r\n    tag\r\n\r\n    groupAssignees {\r\n      name\r\n      providerName\r\n      providerType\r\n    }\r\n    userAssignees {\r\n      name\r\n      login\r\n      subjectDn\r\n      providerName\r\n      providerType\r\n    }\r\n  }\r\n}\r\n",
												"variables": "{\r\n    \"name\": \"Administrator\"\r\n}"
											}
										},
										"url": {
											"raw": "{{source_gw}}",
											"host": [
												"{{source_gw}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Idp Users",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query idpUsers($providerType: IdpType!, $providerName: String!) {\r\n  idpUsers(providerType: $providerType, providerName: $providerName) {\r\n    name\r\n    login\r\n    subjectDn\r\n    providerName\r\n    providerType\r\n  }\r\n}\r\n",
												"variables": "{\r\n    \"providerName\": \"Internal Identity Provider\",\r\n    \"providerType\": \"INTERNAL\"\r\n}"
											}
										},
										"url": {
											"raw": "{{source_gw}}",
											"host": [
												"{{source_gw}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Idp User By Login",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query idpUserByLogin(\r\n  $providerType: IdpType!\r\n  $providerName: String!\r\n  $login: String!\r\n) {\r\n  idpUserByLogin(\r\n    providerType: $providerType\r\n    providerName: $providerName\r\n    login: $login\r\n  ) {\r\n    name\r\n    login\r\n    subjectDn\r\n    providerName\r\n    providerType    \r\n  }\r\n}\r\n",
												"variables": "{\r\n    \"providerName\": \"Internal Identity Provider\",\r\n    \"providerType\": \"INTERNAL\",\r\n    \"login\": \"admin\"\r\n}"
											}
										},
										"url": {
											"raw": "{{source_gw}}",
											"host": [
												"{{source_gw}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Idp User By SubjectDn",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query idpUserBySubjectDn($providerType: IdpType!, $providerName: String!, $subjectDn: String!) {\r\n  idpUserBySubjectDn(providerType: $providerType, providerName: $providerName, subjectDn: $subjectDn) {\r\n    name\r\n    login\r\n    subjectDn\r\n    providerName\r\n    providerType    \r\n  }\r\n}\r\n\r\n\r\n",
												"variables": "{\r\n    \"providerName\": \"some-fed-idp\",\r\n    \"providerType\": \"FEDERATED\",\r\n    \"subjectDn\": \"cn=some-fed-user\"\r\n}"
											}
										},
										"url": {
											"raw": "{{source_gw}}",
											"host": [
												"{{source_gw}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Idp Groups",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query idpGroups($providerType: IdpType!, $providerName: String!) {\r\n  idpGroups(providerType: $providerType, providerName: $providerName) {\r\n    name\r\n    providerName\r\n    providerType\r\n  }\r\n}\r\n",
												"variables": "{\r\n    \"providerName\": \"Internal Identity Provider\",\r\n    \"providerType\": \"INTERNAL\"\r\n}"
											}
										},
										"url": {
											"raw": "{{source_gw}}",
											"host": [
												"{{source_gw}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Idp Group By Name",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query idpGroupByName(\r\n  $providerType: IdpType!\r\n  $providerName: String!\r\n  $name: String!\r\n) {\r\n  idpGroupByName(\r\n    providerType: $providerType\r\n    providerName: $providerName\r\n    name: $name\r\n  ) {\r\n    name\r\n    providerName\r\n    providerType\r\n  }\r\n}",
												"variables": "{\r\n    \"providerName\": \"Internal Identity Provider\",\r\n    \"providerType\": \"INTERNAL\",\r\n    \"name\": \"some-internal-group\"\r\n}"
											}
										},
										"url": {
											"raw": "{{source_gw}}",
											"host": [
												"{{source_gw}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Idp Group By SubjectDn",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query idpGroupBySubjectDn(\r\n  $providerType: IdpType!\r\n  $providerName: String!\r\n  $subjectDn: String!\r\n) {\r\n  idpGroupBySubjectDn(\r\n    providerType: $providerType\r\n    providerName: $providerName\r\n    subjectDn: $subjectDn\r\n  ) {\r\n    name\r\n    subjectDn\r\n    providerName\r\n    providerType\r\n  }\r\n}",
												"variables": "{\r\n    \"subjectDn\": \"ou=orgunit1,dc=l7tech,dc=com\",\r\n    \"providerName\": \"some-ldap-provider\",\r\n    \"providerType\": \"LDAP\"    \r\n}"
											}
										},
										"url": {
											"raw": "{{source_gw}}",
											"host": [
												"{{source_gw}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Mutation",
							"item": [
								{
									"name": "Set Roles",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation setRoles($roles: [RoleInput!]!) {\r\n  setRoles(input: $roles) {\r\n    detailedStatus {\r\n        action status description\r\n        source {name value}\r\n        target {name value}\r\n    }\r\n  }\r\n}\r\n",
												"variables": "{\r\n  \"roles\": [\r\n    {\r\n      \"name\": \"Administrator\",\r\n      \"roleType\": \"SYSTEM\",\r\n      \"tag\": \"ADMIN\",\r\n      \"replaceAssignees\": false,\r\n      \"userAssignees\": [\r\n        {\r\n          \"login\": \"some-internal-user\",\r\n          \"providerName\": \"Internal Identity Provider\",\r\n          \"providerType\": \"INTERNAL\"\r\n        },\r\n        {\r\n          \"login\": \"some-ldap-user\",\r\n          \"providerName\": \"some-ldap-idp-provider\",\r\n          \"providerType\": \"LDAP\"\r\n        }\r\n      ],\r\n      \"groupAssignees\": [\r\n        {\r\n          \"name\": \"some-internal-group\",\r\n          \"providerName\": \"Internal Identity Provider\",\r\n          \"providerType\": \"INTERNAL\"\r\n        }\r\n      ]\r\n    },\r\n    {\r\n      \"name\": \"Operator\",\r\n      \"roleType\": \"SYSTEM\",\r\n      \"tag\": \"ADMIN\",\r\n      \"replaceAssignees\": false,\r\n      \"userAssignees\": [\r\n        {\r\n          \"login\": \"some-internal-user\",\r\n          \"providerName\": \"Internal Identity Provider\",\r\n          \"providerType\": \"INTERNAL\"\r\n        }\r\n      ],\r\n      \"groupAssignees\": [\r\n        {\r\n          \"name\": \"some-internal-group\",\r\n          \"providerName\": \"Internal Identity Provider\",\r\n          \"providerType\": \"INTERNAL\"\r\n        }\r\n      ]\r\n    }\r\n  ]\r\n}"
											}
										},
										"url": {
											"raw": "{{target_gw}}",
											"host": [
												"{{target_gw}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Set Roles (Working Sample)",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation setRoles(\r\n  $roles: [RoleInput!]!\r\n  $internalUsers: [InternalUserInput!]!\r\n  $internalGroups: [InternalGroupInput!]!\r\n) {\r\n  \r\n  #Ensures users, groups created to assign roles.\r\n  setInternalGroups(input: $internalGroups) {\r\n    internalGroups {\r\n      name\r\n      checksum\r\n      members {\r\n        name\r\n      }\r\n    }\r\n  }\r\n\r\n  setInternalUsers(input: $internalUsers) {\r\n    internalUsers {\r\n      name\r\n      memberOf {\r\n        name\r\n      }\r\n      password\r\n      checksum\r\n    }\r\n  }\r\n\r\n  setRoles(input: $roles) {\r\n    detailedStatus {\r\n        action status description\r\n        source {name value}\r\n        target {name value}\r\n    }\r\n  }\r\n}\r\n",
												"variables": "{\r\n    \"internalUsers\": [\r\n        {\r\n            \"name\": \"some-internal-user\",\r\n            \"login\": \"some-internal-user\",\r\n            \"password\": \"$6$H71tKD5zQo01csDP$aBcup/hEjs1FDxRaJZM8POpPBp2Ge.fBd6nX/Uy7kPc4kn26VhpVj2n3ZDNM.lC6fTcr2NYO36orNoNKW7Gzx0\"\r\n        }\r\n    ],\r\n    \"internalGroups\": [\r\n        {\r\n            \"name\": \"some-internal-group\",\r\n            \"description\": \"some internal group\"\r\n        }\r\n    ],\r\n    \"roles\": [\r\n        {\r\n            \"name\": \"Administrator\",\r\n            \"roleType\": \"SYSTEM\",\r\n            \"tag\": \"ADMIN\",\r\n            \"replaceAssignees\": false,\r\n            \"userAssignees\": [\r\n                {\r\n                    \"login\": \"some-internal-user\",\r\n                    \"providerName\": \"Internal Identity Provider\",\r\n                    \"providerType\": \"INTERNAL\"\r\n                }\r\n            ],\r\n            \"groupAssignees\": [\r\n                {\r\n                    \"name\": \"some-internal-group\",\r\n                    \"providerName\": \"Internal Identity Provider\",\r\n                    \"providerType\": \"INTERNAL\"\r\n                }\r\n            ]\r\n        },\r\n        {\r\n            \"name\": \"Operator\",\r\n            \"roleType\": \"SYSTEM\",\r\n            \"tag\": \"ADMIN\",\r\n            \"replaceAssignees\": false,\r\n            \"userAssignees\": [\r\n                {\r\n                    \"login\": \"some-internal-user\",\r\n                    \"providerName\": \"Internal Identity Provider\",\r\n                    \"providerType\": \"INTERNAL\"\r\n                }\r\n            ],\r\n            \"groupAssignees\": [\r\n                {\r\n                    \"name\": \"some-internal-group\",\r\n                    \"providerName\": \"Internal Identity Provider\",\r\n                    \"providerType\": \"INTERNAL\"\r\n                }\r\n            ]\r\n        }\r\n    ]\r\n}"
											}
										},
										"url": {
											"raw": "{{target_gw}}",
											"host": [
												"{{target_gw}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Roles",
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "7layer",
													"type": "string"
												},
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation deleteRoles($roles: [String!]!) {\r\n  deleteRoles(roles: $roles) {\r\n    # System role can't be deleted. \r\n    # This api deletes only custome roles if any.\r\n    detailedStatus {\r\n      action\r\n      status\r\n      description\r\n      source {\r\n        name\r\n        value\r\n      }\r\n      target {\r\n        name\r\n        value\r\n      }\r\n    }    \r\n  }\r\n}\r\n",
												"variables": "{\r\n    \"roles\": \r\n    [\r\n        \"Administrator\",\r\n        \"some-custom-role\"\r\n    ]\r\n    \r\n}"
											}
										},
										"url": {
											"raw": "{{target_gw}}",
											"host": [
												"{{target_gw}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Add User to Role",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation addUserToRole($role: String!, $user: UserRefInput!) {\r\n  addUserToRole(role: $role, user: $user) {\r\n    detailedStatus {\r\n        action status description\r\n        source {name value}\r\n        target {name value}\r\n    }\r\n  }\r\n}\r\n",
												"variables": "{\r\n    \"role\": \"Gateway Maintenance\",    \r\n    \"user\": {\r\n        \"name\": \"some-internal-user\",\r\n        \"login\": \"some-internal-user\",\r\n        \"providerName\": \"Internal Identity Provider\",\r\n        \"providerType\": \"INTERNAL\"\r\n    }\r\n}"
											}
										},
										"url": {
											"raw": "{{target_gw}}",
											"host": [
												"{{target_gw}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Remove User from Role",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation removeUserFromRole($role: String!, $user: UserRefInput!) {\r\n  removeUserFromRole(role: $role, user: $user) {\r\n    detailedStatus {\r\n        action status description\r\n        source {name value}\r\n        target {name value}\r\n    }\r\n  }\r\n}\r\n",
												"variables": "{\r\n    \"role\": \"Gateway Maintenance\",    \r\n    \"user\": {\r\n        \"name\": \"some-internal-user\",\r\n        \"login\": \"some-internal-user\",\r\n        \"providerName\": \"Internal Identity Provider\",\r\n        \"providerType\": \"INTERNAL\"\r\n    }\r\n}"
											}
										},
										"url": {
											"raw": "{{target_gw}}",
											"host": [
												"{{target_gw}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Add Group to Role",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation addGroupToRole($role: String!, $group: GroupRefInput!) {\r\n  addGroupToRole(role: $role, group: $group) {\r\n    detailedStatus {\r\n        action status description\r\n        source {name value}\r\n        target {name value}\r\n    }\r\n  }\r\n}\r\n",
												"variables": "{\r\n    \"role\": \"Gateway Maintenance\",  \r\n    \"group\": {\r\n        \"name\": \"some-internal-group\",\r\n        \"providerName\": \"Internal Identity Provider\",\r\n        \"providerType\": \"INTERNAL\"\r\n    }\r\n}"
											}
										},
										"url": {
											"raw": "{{target_gw}}",
											"host": [
												"{{target_gw}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Remove Group from Role",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation removeGroupFromRole($role: String!, $group: GroupRefInput!) {\r\n  removeGroupFromRole(role: $role, group: $group) {\r\n    detailedStatus {\r\n        action status description\r\n        source {name value}\r\n        target {name value}\r\n    }\r\n  }\r\n}\r\n",
												"variables": "{\r\n    \"role\": \"Gateway Maintenance\",  \r\n    \"group\": {\r\n        \"name\": \"some-internal-group\",\r\n        \"providerName\": \"Internal Identity Provider\",\r\n        \"providerType\": \"INTERNAL\"\r\n    }\r\n}"
											}
										},
										"url": {
											"raw": "{{target_gw}}",
											"host": [
												"{{target_gw}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Assign User to Group",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation addUserToGroup($group: String!, $user: UserRefInput!) {\r\n  addUserToGroup(group: $group, user: $user) {\r\n    detailedStatus {\r\n        action status description\r\n        source {name value}\r\n        target {name value}\r\n    }\r\n  }\r\n}\r\n",
												"variables": "{\r\n    \"group\": \"some-internal-group\",    \r\n    \"user\": {\r\n        \"login\": \"some-internal-user\",\r\n        \"providerName\": \"Internal Identity Provider\",\r\n        \"providerType\": \"INTERNAL\"\r\n    }\r\n}"
											}
										},
										"url": {
											"raw": "{{target_gw}}",
											"host": [
												"{{target_gw}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Remove User from Group",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation removeUserFromGroup($group: String!, $user: UserRefInput!) {\r\n  removeUserFromGroup(group: $group, user: $user) {\r\n    detailedStatus {\r\n        action status description\r\n        source {name value}\r\n        target {name value}\r\n    }\r\n  }\r\n}\r\n",
												"variables": "{\r\n    \"group\": \"some-internal-group\",    \r\n    \"user\": {\r\n        \"login\": \"some-internal-user\",\r\n        \"providerName\": \"Internal Identity Provider\",\r\n        \"providerType\": \"INTERNAL\"\r\n    }\r\n}"
											}
										},
										"url": {
											"raw": "{{target_gw}}",
											"host": [
												"{{target_gw}}"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Scheduled Tasks",
					"item": [
						{
							"name": "Mutations",
							"item": [
								{
									"name": "Set Scheduled Tasks",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation setScheduledTasks(\r\n    $scheduledTasks: [ScheduledTaskInput!]!, \r\n    $backgroundTaskPolicies: [BackgroundTaskPolicyInput!]!) {\r\n    setBackgroundTaskPolicies(input: $backgroundTaskPolicies) {\r\n        detailedStatus {\r\n            action status description\r\n            source {name value}\r\n            target {name value}\r\n        }\r\n    }\r\n    setScheduledTasks(input: $scheduledTasks) {\r\n        detailedStatus {\r\n            action status description\r\n            source {name value}\r\n            target {name value}\r\n        }\r\n    }\r\n}",
												"variables": "{\r\n    \"scheduledTasks\": [\r\n        {\r\n            \"name\": \"some-backgroundtask\",\r\n            \"policyName\": \"some-backgroundtask-policy\",\r\n            \"jobType\": \"RECURRING\",\r\n            \"cronExpression\": \"0 0 */1 * * ?\",\r\n            \"executeOnSingleNode\": false,\r\n            \"executeOnCreation\": true,\r\n            \"status\": \"SCHEDULED\"\r\n        },\r\n        {\r\n            \"name\": \"some-other-backgroundtask\",\r\n            \"policyName\": \"some-other-backgroundtask-policy\",\r\n            \"jobType\": \"ONE_TIME\",\r\n            \"executeOnSingleNode\": true,\r\n            \"executeOnCreation\": false,\r\n            \"executionDate\": \"2022-11-16T11:42:16+05:30\",\r\n            \"runAsUser\": \"admin\",\r\n            \"runAsUserProviderName\": \"Internal Identity Provider\"\r\n        }\r\n    ],\r\n    \"backgroundTaskPolicies\": [\r\n    {\r\n      \"guid\": \"2120e6e1-8908-5c63-b8ab-6aeb5fbd97f2\",\r\n      \"name\": \"some-backgroundtask-policy\",\r\n      \"folderPath\": \"/graphman-tests/backgroundTaskPolicies\",\r\n      \"soap\": false,\r\n      \"policy\": {\r\n        \"xml\": \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n<wsp:Policy xmlns:L7p=\\\"http://www.layer7tech.com/ws/policy\\\" xmlns:wsp=\\\"http://schemas.xmlsoap.org/ws/2002/12/policy\\\">\\n    <wsp:All wsp:Usage=\\\"Required\\\">\\n        <L7p:AuditAssertion/>\\n        <L7p:AuditDetailAssertion>\\n            <L7p:Detail stringValue=\\\"Hello from schedule task-1!\\\"/>\\n        </L7p:AuditDetailAssertion>\\n    </wsp:All>\\n</wsp:Policy>\\n\"\r\n      }\r\n    },\r\n    {\r\n      \"guid\": \"2120e6e1-8908-6c63-b8ab-6aeb5fbd97f2\",\r\n      \"name\": \"some-other-backgroundtask-policy\",\r\n      \"folderPath\": \"/graphman-tests/backgroundTaskPolicies\",\r\n      \"soap\": false,\r\n      \"policy\": {\r\n        \"xml\": \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n<wsp:Policy xmlns:L7p=\\\"http://www.layer7tech.com/ws/policy\\\" xmlns:wsp=\\\"http://schemas.xmlsoap.org/ws/2002/12/policy\\\">\\n    <wsp:All wsp:Usage=\\\"Required\\\">\\n        <L7p:AuditAssertion/>\\n        <L7p:AuditDetailAssertion>\\n            <L7p:Detail stringValue=\\\"Hello from schedule task-2!\\\"/>\\n        </L7p:AuditDetailAssertion>\\n    </wsp:All>\\n</wsp:Policy>\\n\"\r\n      }\r\n    }\r\n  ]\r\n}"
											}
										},
										"url": {
											"raw": "{{target_gw}}",
											"host": [
												"{{target_gw}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Scheduled Tasks",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation deleteScheduledTasks($scheduledTasks: [String!]!, $backgroundTaskPolicies: [String!]!) {\r\n    deleteScheduledTasks(names: $scheduledTasks) {\r\n        detailedStatus {\r\n            action status description\r\n            source {name value}\r\n            target {name value}\r\n        }\r\n    }\r\n\r\n    deleteBackgroundTaskPolicies(names: $backgroundTaskPolicies) {\r\n        detailedStatus {\r\n            action status description\r\n            source {name value}\r\n            target {name value}\r\n        }\r\n    }\r\n}",
												"variables": "{\r\n    \"scheduledTasks\": [\r\n        \"some-backgroundtask\",\r\n        \"some-other-backgroundtask\"\r\n    ],\r\n    \"backgroundTaskPolicies\": [\r\n        \"some-backgroundtask-policy\", \r\n        \"some-other-backgroundtask-policy\"\r\n    ]\r\n}"
											}
										},
										"url": {
											"raw": "{{target_gw}}",
											"host": [
												"{{target_gw}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Queries",
							"item": [
								{
									"name": "Scheduled Tasks",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query scheduledTasks {\r\n    scheduledTasks {\r\n        goid \r\n        name \r\n        checksum \r\n        \r\n        policyName \r\n        jobType \r\n        cronExpression \r\n        executeOnSingleNode \r\n        executeOnCreation \r\n        executionDate \r\n        status \r\n        runAsUser \r\n        runAsUserProviderName\r\n    }\r\n}",
												"variables": ""
											}
										},
										"url": {
											"raw": "{{source_gw}}",
											"host": [
												"{{source_gw}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Scheduled Task By Name",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query scheduledTaskByName($name: String!) {\r\n    scheduledTaskByName (name: $name) {\r\n        goid \r\n        name \r\n        checksum \r\n        \r\n        policyName \r\n        jobType \r\n        cronExpression \r\n        executeOnSingleNode \r\n        executeOnCreation \r\n        executionDate \r\n        status \r\n        runAsUser \r\n        runAsUserProviderName\r\n    }\r\n}",
												"variables": "{\r\n    \"name\": \"some-backgroundtask\"\r\n}"
											}
										},
										"url": {
											"raw": "{{source_gw}}",
											"host": [
												"{{source_gw}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Background Task Policies",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query backgroundTaskPolicies {\r\n    backgroundTaskPolicies {\r\n        goid \r\n        guid \r\n        name \r\n        checksum \r\n        \r\n        folderPath \r\n        soap \r\n        policy { xml }\r\n    }\r\n}",
												"variables": ""
											}
										},
										"url": {
											"raw": "{{source_gw}}",
											"host": [
												"{{source_gw}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Background Task Policy By Name",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query backgroundTaskPolicyByName($name: String!) {\r\n    backgroundTaskPolicyByName (name: $name) {\r\n        goid \r\n        guid \r\n        name \r\n        checksum \r\n        \r\n        folderPath \r\n        soap \r\n        policy { xml }\r\n    }\r\n}",
												"variables": "{\r\n    \"name\": \"some-backgroundtask-policy\"\r\n}"
											}
										},
										"url": {
											"raw": "{{source_gw}}",
											"host": [
												"{{source_gw}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Background Task Policies By Folder",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query backgroundTaskPoliciesByFolderPath($folderPath: String!) {\r\n    backgroundTaskPoliciesByFolderPath (folderPath: $folderPath) {\r\n        goid \r\n        guid \r\n        name \r\n        checksum \r\n        \r\n        folderPath \r\n        soap \r\n        policy { xml }\r\n    }\r\n}",
												"variables": "{\r\n    \"folderPath\": \"/graphman-tests/backgroundTaskPolicies\"\r\n}"
											}
										},
										"url": {
											"raw": "{{source_gw}}",
											"host": [
												"{{source_gw}}"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Secrets",
					"item": [
						{
							"name": "Mutations",
							"item": [
								{
									"name": "Set Secrets",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation setSecrets ($secrets: [SecretInput!]!) {\n    setSecrets (input: $secrets) {\n        detailedStatus {\n            action status description\n            source {name value}\n            target {name value}\n        }\n    }\n}",
												"variables": "{\n  \"secrets\": [\n    {\n      \"name\": \"some-secret\",\n      \"description\": \"\",\n      \"secret\": \"JEw3RXYwMiTL3CCAXsTJE82In+1F83TaBw1ngTN/H+hXhbf2tZLgXg==\",\n      \"secretType\": \"PASSWORD\",\n      \"variableReferencable\": true\n    },\n    {\n      \"name\": \"some-other-secret\",\n      \"description\": \"openssl compatible\",\n      \"secret\": \"JEw3RXYwMiQR955PvgQBlQIdECpIoOwvRuQKLBAAhXYlPWyjV1FFNQ==\",\n      \"secretType\": \"PASSWORD\",\n      \"variableReferencable\": true\n    },\n    {\n      \"name\": \"some-other-secrets-1\",\n      \"description\": \"second creation of a password with value hello by setting hello again in clear\",\n      \"secret\": \"JEw3RXYwMiQ1U2HzEzO2QWROGM3/K7J65eP82RBsAOJ8U6xJDjg4xg==\",\n      \"secretType\": \"PASSWORD\",\n      \"variableReferencable\": true\n    }\n  ]\n}"
											}
										},
										"url": {
											"raw": "{{target_gw}}",
											"host": [
												"{{target_gw}}"
											]
										},
										"description": "# **Set Secrets**\n\nThese secrets are used by gateway policies also for example by jdbc connection configurations\n\nBase64 encrypted secret. The encryption is compatible with openssl secret encryption using cypher AES/CBC/PKCS5Padding. You can decrypt these values at command line using this command:\n\n```\n> echo  | openssl enc -d -aes-256-cbc -md sha256 -pass pass: -a\n\"\"\"\n\n```"
									},
									"response": []
								},
								{
									"name": "Set Keys",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation setKeys ($keys: [KeyInput!]!) {\n    setKeys (input: $keys) {\n        detailedStatus {\n            action status description\n            source {name value}\n            target {name value}\n        }\n    }\n}",
												"variables": "{\n  \"keys\": [\n      {\n      \"keystoreId\": \"00000000000000000000000000000002\",\n      \"alias\": \"some-key\",\n      \"keyType\": \"RSA\",\n      \"subjectDn\": \"CN=some-key\",\n      \"p12\": \"MIIKKAIBAzCCCdIGCSqGSIb3DQEHAaCCCcMEggm/MIIJuzCCBbIGCSqGSIb3DQEHAaCCBaMEggWfMIIFmzCCBZcGCyqGSIb3DQEMCgECoIIFQDCCBTwwZgYJKoZIhvcNAQUNMFkwOAYJKoZIhvcNAQUMMCsEFF7C7PxT4Z5ViryNm8kRviZsJ+UQAgInEAIBIDAMBggqhkiG9w0CCQUAMB0GCWCGSAFlAwQBKgQQhtSjhsEg3la3PBSLME6ajwSCBNDhm0cLaaI2ILytdMSatFzlMxlU5XC6lodEIaj3JWbKm41T0cDEPKjjsBQi3VToszzygLnlx6/4JDtnPYzemlWErmn3UC0fdrPrK1s7DS8j58EFCSMrg3Jf8pazQI+kpWrgJmQgjua7W2QjkleY0VfXoQgckJ/rXSJsbVql8UUKAEck7fftN2oX7YUcfBX4xiVOyrR22tM8/wcDl8wZtkekIVWieMbbsAhaeOUls2va8I6S4vx1s8WcmhCu4RIW2C7q5bIQehKZ3a9EfhDu7FxLsuRnw7z2BlUKWjfr13a8Da01oQtn+gTsaKarnrHUxQEn3EVK89A8PCFLwlNn/X6gl3Fhx/fek90mVoBVM3XajcG5RcuKpddyvo1UQSrFZ0kZQNvG7yFcDGxDns7Chzo2zhv9J3pBg3d33pq31JVEtcd5YXNvfOvinYuh6EuF1COUXGZeLl1ooFLzr5qKrtWCxEma/SJnjx3gG5Q/PGvlZPbVb3GAMcjin/hFL+AkbjMhFjQQP9KEywehfAUNAYQ+WmNVUCaJTiHCKZkGfUFcBRa3BrvkNgdOpcq9nvu5YTBIF9CVlOfKbORRNNRw5NCo8aktzU0TJh9lyRMV3fgMIFUfJdX2ulNjzJJXiYqowUY20ErPCvTiy/941YZlRPrL1DOG2s/Dqz1CH31n9kuP3P1Dt7+s1G7CglGGzY7ORcUh0oQ6mR2qFX/oU+r8nX7WvrYezHRsy7fIeyZ7b6eN1z1aqctMsKY4LqqvwkIaq1e4KyI4dntirJ9d+Tsxr9FRNHyDbXVZoghbFLS/CIypkVBxRP+oRUolq/La/wLHNNqPxMqR1wwzKqgCi8eenA/8DhmkahFsx5GW2W8wrQAoLYcYxzVn03uIb0x7DmdbpIQSjJZQ31KheEOUvt+8Il+JmIkYN6AMZjw6hXB4ZWXJwzp17uMZ5X9A2FJjVloG9mak4dP2Gy6urJyKzhEUFcVSPSHdWd+3F2LOu3xIOS4Q+sYGzsSbrUrJjhmqeFXZaujr5Bg1pTILS9RI2CdPfQYcLZMFnx2vd5cKTTRdRDb8DI+ywbFiLwxjigdiYBfJJFUnXGbVsy8CLvAI3ah9ehEW4kmTXQwAqHm6EvF53wMquw6oDIhaUnBZEPtiAyPZtJ2IJTDzaFYpfxEgIcmQjqXCsLMuYrlkSCGO5mUhGYEGD0VGZSLcRTtMbg1a3NJqsUxVeFkrQnquDKIofQ/M48QE6E2+n+WpIYqEn9461UqVjdWXIktdt2UgwXZjRBiZa2csC50oXfq+hfQxlk8BXgra/Q9iq/gvsTAcLJvUoRQvW7eu3MFxlk8r5hKfkttq3mRSng21PSeEMh4V9fmgdCHqy69viGNsDY1uaZlDFIZWpoqWMhDo7+/9dd/asKdAkCHJJEZn8gUbMI/SbNAra11njUFwlAGjj0Vg6sscb7csvAyGkA3CK9x90xpHblr84W1DfIiiQDF1FSxO/JY98eKFSaTlT+Kfn9DhSO6q05beI3rvKZYh045MEwlRg+2VcO44KEzw0P61HM2fl+g3QZaX+ivkg0ypECYoU9jaOF9aTWp9DQf5PspcaF4O9hwtR4CAzwigGfPGpmWpoizsb3Ag7yyWl43E+pq+ELo2hLgyEjFEMB8GCSqGSIb3DQEJFDESHhAAcwBvAG0AZQAtAGsAZQB5MCEGCSqGSIb3DQEJFTEUBBJUaW1lIDE2ODA1OTA3ODkxNDkwggQBBgkqhkiG9w0BBwagggPyMIID7gIBADCCA+cGCSqGSIb3DQEHATBmBgkqhkiG9w0BBQ0wWTA4BgkqhkiG9w0BBQwwKwQUev/+Vv922SKbMh3rEe+Vb9WZ0YkCAicQAgEgMAwGCCqGSIb3DQIJBQAwHQYJYIZIAWUDBAEqBBA0ixkE9pmlGHIVQybKo/mIgIIDcNSrM3urzob0WDrg/BmqCHFBRYrebCJ+Lxa8q23+VhuK8o9CfUBJNdLAv8m7ULbs4XnFamselKKvJxU5Qfryfrb6hwb0TH7Zvj3T5WwvwW9m47B9GrFb3AbmsSMUDJhoIZHyzuD4oLv3G31aW7PZh4DLc4S2gAuesQIvuMhJp9HkRqoQXqxnvCwH9YB8ybvkE6osMjJKVffK7bp8WVn3O160PVYhttD6XXK1TzAqg8T2j1eE6jLXh3ZfLfl4URoXGOJHZ2/95JapDgW/DQi6+ScJdvOMd8Oi/p5CP9B1CzV8Pq8QvrcUR7us0Q4vpmNEWssxy6XyY+lZINkfjdRacyL2/jq1sV9HOaHtXRjnbbm9FFT6f87TYkVPStCZxXU21vgz9PUrE6n7wEfNW1WEcgTgQwdzk5k3qDl5f0llQXX+4ug8QPtgPpsZk2mv5tDmmfMFFR8cS2QxF0k0z0TD6QOgKEIWlRvhm2Fz9P9NxSkPNUO4zw1Iw3FUncCWQF9ptqnhHezjgiIwb7qX0ATv0UTKgRYkW818hnuSZLqCp058HpoLC2J+LUv0VZyXHaBr3RH5KaEbXYI0rtGG24p+MF8BQTA3VqCsRY8qHqsrZ2sSGlLgXG+TERTj+m/k/j+OzAu2AuJPrDs+Jx/7xgxUCOyG+O/IfIz9tRgfOI+WFD6gS2gDhi9bpLN0+xKMg+gpRdpnv+NRmhlSxbUF0YmAOchKTKLjRUo2Vv5n52a5upBQoLmibh76Zn7CUL1lzuUVn9+BeWRrUlrub/weyjtav5S4tM2BgpwekhbaDQWlQHr63cXI5w+Khv5DaDT9Yc58h8I2ZDOcA2JlxPIydzFgMe4suBqo9auEpvDzDJk+OCLjkAXmrmK4PEB+JTdG2hzzx1kM1CrcNpE0TLNMWmrfrwNLUQ/ex0SjQCN4XROOmMMwD9649jH/WT9Nk5gHzeqC5Et8SHK0A0+j/8scHyMW//0YuXEW4MLrUgy8mPJ6RZ6Q2GQlSLTnAa2SFN9ADs0y5gryzCyVAkuvG7n5AqP4iyxUqc6OPCeZ0Ygc4MITxash577hsVmtL1pPdv8tQSFGrDg8S2PBtro+lBV5TI/jSM7i5QMfl6adNS9SpjKERUMVvPZaK7uM/gCAJsHrLmqRxiJlUuHKOFVs1XeBqkRBbSIwTTAxMA0GCWCGSAFlAwQCAQUABCBYScQDMTTZDOB6zc7R4o3iZXhvMBJocBpVSG/Y5nkT8QQUFtq5fjMA/38+WrpOxN7iHIjb/z0CAicQ\",\n      \"certChain\": [\n        \"-----BEGIN CERTIFICATE-----\\nMIIC6zCCAdOgAwIBAgIJAPBYDK3qjfM1MA0GCSqGSIb3DQEBDAUAMBMxETAPBgNVBAMTCHNvbWUt\\r\\na2V5MB4XDTIzMDQwNDA1NDU1M1oXDTI4MDQwMjA1NDU1M1owEzERMA8GA1UEAxMIc29tZS1rZXkw\\r\\nggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCADgFxsGgmoRefiq4dMzfgy0minfIw98PP\\r\\nco/gJtvAXdW/0ZamjpGNhepq3LJ0rNonXrbpOJSn9nBtcAmQQdDq9rMWVXbh11OJH7BfeGs2vFSU\\r\\nPXV9P0K/8w/X5xFaKZ8/qhQVLLyOq8gGjCk3NS7XTMmA+9jjkoxzqNDvRVRw7mEFRFxgIJOuPBBL\\r\\nTpBKjiCxdfFbcV9r2ZQyf0a/UO+M7UIGuFFJxHTtdtp0PBZAhJ/wf6oIyMeeCNSkYmLYI9v8Sne5\\r\\n4oRiIFTJ0BrnIA/7PNyjiaDejfy6TmrqmtV85cn3wxorC8tOfUv1PsOv1FGqBbbYvQ7lh5ybVLL7\\r\\nefGTAgMBAAGjQjBAMB0GA1UdDgQWBBQL2fCUg0lRk4HWwBBr35SyKSQ70jAfBgNVHSMEGDAWgBQL\\r\\n2fCUg0lRk4HWwBBr35SyKSQ70jANBgkqhkiG9w0BAQwFAAOCAQEAELwHue6qGlrWpfJc3rq3Pby7\\r\\nNwjI7VEANcWHM5WVQ0TX5+Hm/P+GIyxr4WFA356nnUeGCe3owCWv3Y3yRva715Jf6JUofYCNgvk7\\r\\nuUoQgLmTIe2s4GguuX7ATVAEMz5EM1EmcapGgrfoEbWFTEemUr1nvu19LSDgVzKJhvVpWvWwCQGr\\r\\nX2lipOGuZrgGumW+AaTATLpxCasG3aP3IqdGaMs+ALi07CM9b/JD+XPRAp1B7yYrFTGYbftfvBeJ\\r\\nKfKiC2YoJKNJcNXMsz3yhGfvVbZrSG5LZIgCjqsDJ0EoCXMzpR3AACHbF9p4ummEbrAOmse1lx6u\\r\\nPh9PhFwPx2XmUg==\\n-----END CERTIFICATE-----\\n\"\n      ]\n    },\n    {\n      \"keystoreId\": \"00000000000000000000000000000002\",\n      \"alias\": \"some-other-key\",\n      \"keyType\": \"EC\",\n      \"subjectDn\": \"CN=some-other-key\",\n      \"p12\": \"MIID8AIBAzCCA5oGCSqGSIb3DQEHAaCCA4sEggOHMIIDgzCCASoGCSqGSIb3DQEHAaCCARsEggEXMIIBEzCCAQ8GCyqGSIb3DQEMCgECoIGtMIGqMGYGCSqGSIb3DQEFDTBZMDgGCSqGSIb3DQEFDDArBBQxGCtXH6cGnKxWKl4IoYrPM4a8zAICJxACASAwDAYIKoZIhvcNAgkFADAdBglghkgBZQMEASoEEBmvSParqbC61KSkqqmhn04EQHOy+nmq0mGF9b7TM6AjitkQen61iXQJurmfDG4rHJp4D9FsCg/PVpwTKSkhE3TRHU61ov6uQ2FAVIYu8t59RMwxUDArBgkqhkiG9w0BCRQxHh4cAHMAbwBtAGUALQBvAHQAaABlAHIALQBrAGUAeTAhBgkqhkiG9w0BCRUxFAQSVGltZSAxNjgwNTkwNzg5MTkwMIICUQYJKoZIhvcNAQcGoIICQjCCAj4CAQAwggI3BgkqhkiG9w0BBwEwZgYJKoZIhvcNAQUNMFkwOAYJKoZIhvcNAQUMMCsEFDGPPH0g+ax3vMgU+9v8PsUwYsfDAgInEAIBIDAMBggqhkiG9w0CCQUAMB0GCWCGSAFlAwQBKgQQdJuLH5mdU8wVBz6OSHXY4YCCAcBNrX7T3S3ywfmC1idUK4s88NsUkzVhmkksrJvS/HgXzddKSbZw4vWU5aORFkMGCYEkADLiPDjkIeqeh9yOiz3zUgjptz8vSfAV4RFR+fh6cn4iSEy6XGYP0SqIaNpdtx0Pa3SudY9rZxiSqWgYy3FW9TBKfGHSGl39xXB1mStm0SO0Wh6ziub06kVchvmoK4B8cDcHehcNhBiT6B9Ki2jjdzcuQQoK3wpQEBoW8KsTekS34Mq7h0Q9xdJfT6QJbKmoVv6mMqJdgBbx8dPOTKh+kV9NFWKmPsmZrNWj42tRMPm5DvO5IJn8YXocvntTQvkazyUbLOu6VOkG/qk3f1t9Ss/PgPyx+9qqaIgF7tmieKdqKTCH4y5pdQQMSev5VRj4Acefh6OrBtzFPJ662DUYS7NJssPD2/WP4dZEij2RV18nNv20p3791SMLOFWOG6Y15hQwrSKK6PMhKaV5QP1DR2t5wOeCaMbIT5aOTxY/v01L8lNF4NoE43uBEc4zMQt5FSUqrTucGUqp9eeE56mpUrtAC6dcsI6RZmubda8RRXz2Qful8PYUQeD7cx+4aFoBMECsDiTVQCNnCZfJZ7lqME0wMTANBglghkgBZQMEAgEFAAQgLSP2Pb2Yen6Q35Uxe6EL0j/OuLLZQFZ5tfaaEIgNIVcEFP8TIly0kAZqVvs58XgzeqNzit3cAgInEA==\",\n      \"certChain\": [\n        \"-----BEGIN CERTIFICATE-----\\nMIIBNzCB9qADAgECAghlKhmgL8tv2DAJBgcqhkjOPQQBMBkxFzAVBgNVBAMTDnNvbWUtb3RoZXIt\\r\\na2V5MB4XDTIzMDQwNDA1NDYxNloXDTI4MDQwMjA1NDYxNlowGTEXMBUGA1UEAxMOc29tZS1vdGhl\\r\\nci1rZXkwQDAQBgcqhkjOPQIBBgUrgQQAAQMsAAQCKUXlPr3rWVvwhZYdkgOKagmCTp4F10+4WiFg\\r\\nu9kifLdH9HX4sqYS7yqjQjBAMB0GA1UdDgQWBBSfiaYzK5+p/U34aoidHIhHN4+tRzAfBgNVHSME\\r\\nGDAWgBSfiaYzK5+p/U34aoidHIhHN4+tRzAJBgcqhkjOPQQBAzEAMC4CFQM21XdG/IO9i2ucVL/2\\r\\nJ/JSpGdiHQIVAw8fUf/2dAD0eu6NfvutzsbGJqQW\\n-----END CERTIFICATE-----\\n\"\n      ]\n    }\n  ]\n}"
											}
										},
										"url": {
											"raw": "{{target_gw}}",
											"host": [
												"{{target_gw}}"
											]
										},
										"description": "# Set Keys\n\nBase64 encoded PKCS12 keystore containing the private key and cert chain for the key entry.  \nThe keystore is password-protected using the transaction encryption passphrase provided."
									},
									"response": []
								},
								{
									"name": "Delete Secrets",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation deleteSecrets($secrets: [String!]!) {\n  deleteSecrets(names: $secrets) {\n    detailedStatus {\n        action status description\n        source {name value}\n        target {name value}\n    }\n  }\n}",
												"variables": "\n{\n    \"secrets\": [\n        \"some-secret\", \n        \"some-other-secret\", \n        \"some-other-secrets-1\"\n    ]\n}\n"
											}
										},
										"url": {
											"raw": "{{target_gw}}",
											"host": [
												"{{target_gw}}"
											]
										},
										"description": "# Delete Secret"
									},
									"response": []
								},
								{
									"name": "Delete Keys",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation deleteKeys($keys: [String!]!) {\n  deleteKeys(aliases: $keys) {\n    detailedStatus {\n        action status description\n        source {name value}\n        target {name value}\n    }\n  }\n}",
												"variables": "{\n    \"keys\": [\n        \"some-key\", \n        \"00000000000000000000000000000002:some-other-key\"\n    ]\n}\n"
											}
										},
										"url": {
											"raw": "{{target_gw}}",
											"host": [
												"{{target_gw}}"
											]
										},
										"description": "# Delete Key"
									},
									"response": []
								},
								{
									"name": "Set Key - Replace Cert Chain",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation setKeysForCertChain ($keys: [KeyInput!]!) {\n    # setKeys doesn't support updating more than one key in a single request. \n    # Please consider updating them one at a time.\n    # NOTE: creating keys in multiple has no such limitation.\n    setKeys (input: $keys) {\n        detailedStatus {\n            action status description\n            source {name value}\n            target {name value}\n        }\n        keys {\n            goid\n            keystoreId\n            alias\n            checksum\n\n            certChain # modified field\n        }\n    }\n}",
												"variables": "{\n  \"keys\": [\n    {\n      \"keystoreId\": \"00000000000000000000000000000002\",\n      \"alias\": \"some-key\",\n      \"keyType\": \"RSA\",\n      \"subjectDn\": \"CN=some-key\",\n      \"certChain\": [\n        \"-----BEGIN CERTIFICATE-----\\nMIIDDDCCAfSgAwIBAgIJAOezkQ/7B1gWMA0GCSqGSIb3DQEBDAUAMBYxFDASBgNVBAMTC3NvbWUt\\r\\nc2lnbmVyMB4XDTIzMDQwNDA1NTIyMFoXDTI1MDQwMzA1NTIyMFowEzERMA8GA1UEAxMIc29tZS1r\\r\\nZXkwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCADgFxsGgmoRefiq4dMzfgy0minfIw\\r\\n98PPco/gJtvAXdW/0ZamjpGNhepq3LJ0rNonXrbpOJSn9nBtcAmQQdDq9rMWVXbh11OJH7BfeGs2\\r\\nvFSUPXV9P0K/8w/X5xFaKZ8/qhQVLLyOq8gGjCk3NS7XTMmA+9jjkoxzqNDvRVRw7mEFRFxgIJOu\\r\\nPBBLTpBKjiCxdfFbcV9r2ZQyf0a/UO+M7UIGuFFJxHTtdtp0PBZAhJ/wf6oIyMeeCNSkYmLYI9v8\\r\\nSne54oRiIFTJ0BrnIA/7PNyjiaDejfy6TmrqmtV85cn3wxorC8tOfUv1PsOv1FGqBbbYvQ7lh5yb\\r\\nVLL7efGTAgMBAAGjYDBeMAwGA1UdEwEB/wQCMAAwDgYDVR0PAQH/BAQDAgXgMB0GA1UdDgQWBBQL\\r\\n2fCUg0lRk4HWwBBr35SyKSQ70jAfBgNVHSMEGDAWgBQx+VXhLd2Gl9GiDj+L5TisB1i2DzANBgkq\\r\\nhkiG9w0BAQwFAAOCAQEAJ41Fh+tYbJgQ4kVeDBNdHm4IC1fIIUoRJdrgyueKGSL2rQCWHFrMrG+k\\r\\nXw2r7270Nz/iqf6tHzRJTK1c9pwsfgz1kL2hMwWfDY9IDYHQqCGUXxXK+0xGBooQ1zXCKxqKOZAA\\r\\nYdIQkEX8fEmynBCQ2gInDoK0M024+tYMtinVKSlIdKvsfxfQceQaUqQ0wBwrwPpbBBS27VZuSpqH\\r\\ng4aZkOCRpnbAKQsFiCAFE7HrmaRtBKVSgKQOuSHKGlvKO9RufMJ/3h6Ga8YuYuwWydCOktbjCdYk\\r\\nNQkYKqP6XZ04YogVo7N2ImFhMaTUay23yLqafmUwQj34TlMmbKnql8a72Q==\\n-----END CERTIFICATE-----\\n\",\n        \"-----BEGIN CERTIFICATE-----\\nMIIDFDCCAfygAwIBAgIIdAjqLho2MBUwDQYJKoZIhvcNAQEMBQAwFjEUMBIGA1UEAxMLc29tZS1z\\r\\naWduZXIwHhcNMjMwNDA0MDU1MTQ4WhcNMjgwNDAyMDU1MTQ4WjAWMRQwEgYDVQQDEwtzb21lLXNp\\r\\nZ25lcjCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAIpbd3x5gBMI+5NDmGhypWg6kGiF\\r\\n/6QqV1vqdEMenhBVVDg61e1KuXPKwN0uGoIAAkgW6A5XGWMELWG9vXU8LHRgaeykX9zsbH18q/aY\\r\\nwIIrtVqM6ZL+NpLyjl24h07AG6e8RRr05STnNWxKz7/IHfBeU8Iil/oE+ujZ1yK1xyF6XTMdSea4\\r\\nZcjdd5OKUyjihrJa0jqgCMxUKDL1UZn0HHprP3QbotA7GDttx9b9Hd6Ik1YWfu7OLMjq7wrCmk9D\\r\\nvT1VpBNx2DxKMHOg04dMtqfrpuvKjXCf4WBh+0oJ/JPZqRSwzyZPFom5sR0t9r/PWtZHBvWXchK8\\r\\nVmzKSjzRCHkCAwEAAaNmMGQwEgYDVR0TAQH/BAgwBgEB/wIBATAOBgNVHQ8BAf8EBAMCAQYwHQYD\\r\\nVR0OBBYEFDH5VeEt3YaX0aIOP4vlOKwHWLYPMB8GA1UdIwQYMBaAFDH5VeEt3YaX0aIOP4vlOKwH\\r\\nWLYPMA0GCSqGSIb3DQEBDAUAA4IBAQBd7hIpeWqwQ4ObIjv64/ZQC+orIjZg9e4qVNOMnz4WkbqX\\r\\nR/d0BsJPikXsVAyi6cv1I8bWVSjycuCtiPJJfovEfa+/mJQY9Rr8b/ClYUU7UpA1QhWJ1d0467g2\\r\\nz8raKlv8IyGD9GJg92TcaytSPs7SX0Hf/uUsGc0AdIk8SrwM33AC92BPfO3bleP9WjyOcqjVOtKj\\r\\nFAgIF5+a9ngeSKBwKv5aMe8kEQt7YevLY4MbrU81zGrMc30Gb/OFqtk4TqT6eF2RL3yGkBr3RsVh\\r\\nECUdfiWGHmH0rQ6QNTlHiyhaU1z+VjCJycs0w7WmHZs8HKrdbhv+lSbd9TRZZFA7/JUX\\n-----END CERTIFICATE-----\\n\"\n      ]\n    }\n  ]\n}"
											}
										},
										"url": {
											"raw": "{{target_gw}}",
											"host": [
												"{{target_gw}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Queries",
							"item": [
								{
									"name": "Secrets",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query secrets {\n    secrets {\n        goid\n        name\n        checksum\n\n        description\n        secret\n        secretType\n        variableReferencable\n    }\n}",
												"variables": "{}"
											}
										},
										"url": {
											"raw": "{{source_gw}}",
											"host": [
												"{{source_gw}}"
											]
										},
										"description": "# Get all Secrets\n\nGet all the secrets\n\nThese secrets are used by gateway policies also for example by jdbc connection configurations\n\nBase64 encrypted secret. The encryption is compatible with openssl secret encryption using cypher AES/CBC/PKCS5Padding. You can decrypt these values at command line using this command:\n\n```\n> echo  | openssl enc -d -aes-256-cbc -md sha256 -pass pass: -a\n\"\"\"\n\n```"
									},
									"response": []
								},
								{
									"name": "Secret By Name",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query secretByName($name: String!) {\n    secretByName(name : $name) {\n        goid\n        name\n        checksum\n\n        description\n        secret\n        secretType\n        variableReferencable\n    }\n}",
												"variables": "{\n    \"name\": \"some-secret\"\n}"
											}
										},
										"url": {
											"raw": "{{source_gw}}",
											"host": [
												"{{source_gw}}"
											]
										},
										"description": "# Get secret by name\n\nGet secret by name\n\nThese secrets are used by gateway policies also for example by jdbc connection configurations\n\nBase64 encrypted secret. The encryption is compatible with openssl secret encryption using cypher AES/CBC/PKCS5Padding. You can decrypt these values at command line using this command:\n\n```\n> echo  | openssl enc -d -aes-256-cbc -md sha256 -pass pass: -a\n\"\"\"\n\n```"
									},
									"response": []
								},
								{
									"name": "Keys",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query keys {\n    keys {\n        goid\n        keystoreId\n        alias\n        checksum\n\n        keyType\n        subjectDn\n        p12\n        certChain\n    }\n}",
												"variables": "{}"
											}
										},
										"url": {
											"raw": "{{source_gw}}",
											"host": [
												"{{source_gw}}"
											]
										},
										"description": "# Get all Keys\n\nGet all keys.\n\nThis is an entry in the gateway keystore. These entries combine a private key and associated certificate and are used for example by listener ports.\n\nThese represent the gateway's own certificates as opposed to the Certificate type which represent a cert trusted by the gateway.\n\nBase64 encoded PKCS12 keystore containing the private key and cert chain for the key entry.  \nThe keystore is password-protected using the transaction encryption passphrase provided."
									},
									"response": []
								},
								{
									"name": "Key By Alias",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query keyByAlias($alias: String!) {\n    keyByAlias(alias : $alias) {\n        goid\n        keystoreId\n        alias\n        checksum\n\n        keyType\n        subjectDn\n        p12\n        certChain\n    }\n}",
												"variables": "{\n     \"alias\": \"some-key\"\n}"
											}
										},
										"url": {
											"raw": "{{source_gw}}",
											"host": [
												"{{source_gw}}"
											]
										},
										"description": "# Get key by alias\n\nGet key by alias.\n\nThis is an entry in the gateway keystore. These entries combine a private key and associated certificate and are used for example by listener ports.\n\nThese represent the gateway's own certificates as opposed to the Certificate type which represent a cert trusted by the gateway.\n\nBase64 encoded PKCS12 keystore containing the private key and cert chain for the key entry.  \nThe keystore is password-protected using the transaction encryption passphrase provided."
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Services",
					"item": [
						{
							"name": "Queries",
							"item": [
								{
									"name": "Layer7 Services",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query services  {\n    services  {\n        goid\n        name\n        resolutionPath\n        checksum\n\n        enabled\n        folderPath\n        methodsAllowed\n        properties {name value}\n        tracingEnabled\n        wssProcessingEnabled\n\n        policy {xml json yaml code}\n        policyRevision{\n            goid\n            ordinal\n            xml\n            json\n            yaml\n            code\n        }\n    }\n}",
												"variables": "{}"
											}
										},
										"url": {
											"raw": "{{source_gw}}",
											"host": [
												"{{source_gw}}"
											]
										},
										"description": "# APIs in a folder\n\nRetrieves the Web APi Services given a folder path. This query good into subfolders as well so you get the whole tree.\n\nInput: folderPath"
									},
									"response": []
								},
								{
									"name": "Layer7 Service By Resolution Path",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query servicesByResolutionPath($resolutionPath: String!)  {\n    servicesByResolutionPath(resolutionPath:$resolutionPath)  {\n        goid\n        name\n        resolutionPath\n        checksum\n\n        enabled\n        folderPath\n        methodsAllowed\n        properties {name value}\n        tracingEnabled\n        wssProcessingEnabled\n\n        policy {xml json yaml code}\n        policyRevision{\n            goid\n            ordinal\n            xml\n            json\n            yaml\n            code\n        }\n    }\n}",
												"variables": "{\n    \"resolutionPath\" : \"/some-webapi\"\n}"
											}
										},
										"url": {
											"raw": "{{source_gw}}",
											"host": [
												"{{source_gw}}"
											]
										},
										"description": "# APIs in a folder\n\nRetrieves the Web APi Services given a folder path. This query good into subfolders as well so you get the whole tree.\n\nInput: folderPath"
									},
									"response": []
								}
							]
						},
						{
							"name": "Mutations",
							"item": [
								{
									"name": "Set Services",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation setServices (\n    $input: [L7ServiceInput!]!,\n    $clusterProperties: [ClusterPropertyInput!]!) {\n    # Ensure the availability of Web API service dependencies\n    setClusterProperties(input: $clusterProperties) {\n        detailedStatus {\n            action status description\n            source {name value}\n            target {name value}\n        }\n    }\n    setServices (input: $input) {\n        detailedStatus {\n            action status description\n            source {name value}\n            target {name value}\n        }\n    }\n}",
												"variables": "{\n  \"input\": [\n    {\n      \"name\": \"some-webapi\",\n      \"resolutionPath\": \"/some-webapi\",\n      \"enabled\": true,\n      \"serviceType\": \"WEB_API\",\n      \"folderPath\": \"/graphman-tests/webApiServices\",\n      \"methodsAllowed\": [\n        \"GET\",\n        \"POST\",\n        \"PUT\",\n        \"DELETE\"\n      ],\n      \"policy\": {\n        \"xml\": \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n<wsp:Policy xmlns:L7p=\\\"http://www.layer7tech.com/ws/policy\\\" xmlns:wsp=\\\"http://schemas.xmlsoap.org/ws/2002/12/policy\\\">\\n    <wsp:All wsp:Usage=\\\"Required\\\">\\n        <wsp:OneOrMore wsp:Usage=\\\"Required\\\">\\n            <wsp:All wsp:Usage=\\\"Required\\\">\\n                <L7p:ComparisonAssertion>\\n                    <L7p:Expression1 stringValue=\\\"${gateway.greetings}\\\"/>\\n                    <L7p:Expression2 stringValue=\\\"\\\"/>\\n                    <L7p:ExpressionIsVariable booleanValue=\\\"false\\\"/>\\n                    <L7p:Negate booleanValue=\\\"true\\\"/>\\n                    <L7p:Operator operator=\\\"EMPTY\\\"/>\\n                    <L7p:Predicates predicates=\\\"included\\\">\\n                        <L7p:item binary=\\\"included\\\">\\n                            <L7p:Negated booleanValue=\\\"true\\\"/>\\n                            <L7p:Operator operator=\\\"EMPTY\\\"/>\\n                            <L7p:RightValue stringValue=\\\"\\\"/>\\n                        </L7p:item>\\n                    </L7p:Predicates>\\n                </L7p:ComparisonAssertion>\\n                <L7p:SetVariable>\\n                    <L7p:Base64Expression stringValue=\\\"JHtnYXRld2F5LmdyZWV0aW5nc30=\\\"/>\\n                    <L7p:VariableToSet stringValue=\\\"greetings\\\"/>\\n                </L7p:SetVariable>\\n            </wsp:All>\\n            <L7p:SetVariable>\\n                <L7p:Base64Expression stringValue=\\\"SGVsbG8sIFdvcmxkIQ==\\\"/>\\n                <L7p:VariableToSet stringValue=\\\"greetings\\\"/>\\n            </L7p:SetVariable>\\n        </wsp:OneOrMore>\\n        <L7p:HardcodedResponse>\\n            <L7p:Base64ResponseBody stringValue=\\\"JHtncmVldGluZ3N9\\\"/>\\n            <L7p:ResponseContentType stringValue=\\\"text/plain; charset=UTF-8\\\"/>\\n        </L7p:HardcodedResponse>\\n    </wsp:All>\\n</wsp:Policy>\\n\"\n      },\n      \"tracingEnabled\": false,\n      \"wssProcessingEnabled\": false\n    },\n    {\n      \"name\": \"jsonpolicy-webapi\",\n      \"resolutionPath\": \"/jsonpolicy-webapi\",\n      \"enabled\": true,\n      \"serviceType\": \"WEB_API\",\n      \"folderPath\": \"/graphman-tests/webApiServices\",\n      \"methodsAllowed\": [\n        \"GET\",\n        \"POST\",\n        \"PUT\",\n        \"DELETE\"\n      ],\n      \"policy\": {\n        \"json\": \"{\\\"All\\\":[{\\\"SetVariable\\\":{\\\"expression\\\":\\\"${some-output}, \\\\\\\"hello from ${policy.name}\\\\\\\"\\\",\\\"variable\\\":\\\"some-output\\\"}}]}\"\n      },\n      \"tracingEnabled\": false,\n      \"wssProcessingEnabled\": false\n    },\n    {\n      \"name\": \"yamlpolicy-webapi\",\n      \"resolutionPath\": \"/yamlpolicy-webapi\",\n      \"enabled\": true,\n      \"serviceType\": \"WEB_API\",\n      \"folderPath\": \"/graphman-tests/webApiServices\",\n      \"methodsAllowed\": [\n        \"GET\",\n        \"POST\",\n        \"PUT\",\n        \"DELETE\"\n      ],\n      \"policy\": {\n        \"yaml\": \"---\\nAll:\\n- Comment: \\\"Policy Fragment: some-policy-fragment\\\"\\n- SetVariable:\\n    expression: \\\"${some-output}, \\\\\\\"hello from ${policy.name}\\\\\\\"\\\"\\n    contentType: \\\"text/plain; charset=utf-8\\\"\\n    dataType: \\\"message\\\"\\n    variable: \\\"some-output\\\"\\n    variable: \\\"some-output\\\"\\n- Include:\\n    policyGuid: \\\"ffe348a7-8255-4c3b-ba18-021ec626dd0d\\\"\\n    policyName: \\\"some-inner-policy-fragment\\\"\\n- Encapsulated:\\n    encassGuid: \\\"5047edc8-9df8-4e57-9e75-74221139c520\\\"\\n    encassName: \\\"some-encass\\\"\\n- OneOrMore:\\n  - \\\"True\\\": {}\\n\"\n      },\n      \"tracingEnabled\": false,\n      \"wssProcessingEnabled\": false\n    },\n    {\n      \"name\": \"codepolicy-webapi\",\n      \"resolutionPath\": \"/codepolicy-webapi\",\n      \"enabled\": true,\n      \"serviceType\": \"WEB_API\",\n      \"folderPath\": \"/graphman-tests/webApiServices\",\n      \"methodsAllowed\": [\n        \"GET\",\n        \"POST\",\n        \"PUT\",\n        \"DELETE\"\n      ],\n      \"policy\": {\n        \"code\": {\n          \"All\": [\n            {\n              \"Comment\": \"Policy Fragment: some-policy-fragment\"\n            },\n            {\n              \"SetVariable\": {\n                \"expression\": \"${some-output}, \\\"hello from ${policy.name}\\\"\",\n                \"contentType\": \"text/plain; charset=utf-8\",\n                \"dataType\": \"message\",\n                \"variable\": \"some-output\"\n              }\n            },\n            {\n              \"Include\": {\n                \"policyGuid\": \"ffe348a7-8255-4c3b-ba18-021ec626dd0d\",\n                \"policyName\": \"some-inner-policy-fragment\"\n              }\n            },\n            {\n              \"Encapsulated\": {\n                \"encassGuid\": \"5047edc8-9df8-4e57-9e75-74221139c520\",\n                \"encassName\": \"some-encass\"\n              }\n            },\n            {\n              \"OneOrMore\": [\n                {\n                  \"True\": {}\n                }\n              ]\n            }\n          ]\n        }\n      },\n      \"tracingEnabled\": false,\n      \"wssProcessingEnabled\": false\n    }\n  ],\n  \"clusterProperties\": [\n    {\n      \"name\": \"greetings\",\n      \"value\": \"Hello, World!\"\n    }\n  ]\n}\n"
											}
										},
										"url": {
											"raw": "{{target_gw}}",
											"host": [
												"{{target_gw}}"
											]
										},
										"description": "# Set Web Api Services\n\nCreate multiple web API services on the target gateway.\n\nInput: See sample for input. Here is a sample:\n\n``` json\n{  \"input\": {    \"name\" : \"New service created\",    \"folderPath\" : \"/migrationTest\",    \"resolutionPath\": \"/testNewService17\",            \"methodsAllowed\": [                \"GET\",                \"POST\",                \"PUT\",                \"DELETE\"            ],            \"enabled\": true,            \"policy\": {                \"xml\": \"wsp:Policy...\"            }  }}\n\n```"
									},
									"response": []
								},
								{
									"name": "Delete Services",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation deleteServices (\n    $services: [ServiceResolversInput!]!) {\n    deleteServices (resolvers: $services) {\n        detailedStatus {\n            action status description\n            source {name value}\n            target {name value}\n        }\n    }\n}",
												"variables": "{\n  \"services\": [\n    {\n        \"resolutionPath\": \"/some-webapi\"\n    }\n    \n  ]\n}\n"
											}
										},
										"url": {
											"raw": "{{target_gw}}",
											"host": [
												"{{target_gw}}"
											]
										},
										"description": "# Set Web Api Services\n\nCreate multiple web API services on the target gateway.\n\nInput: See sample for input. Here is a sample:\n\n``` json\n{  \"input\": {    \"name\" : \"New service created\",    \"folderPath\" : \"/migrationTest\",    \"resolutionPath\": \"/testNewService17\",            \"methodsAllowed\": [                \"GET\",                \"POST\",                \"PUT\",                \"DELETE\"            ],            \"enabled\": true,            \"policy\": {                \"xml\": \"wsp:Policy...\"            }  }}\n\n```"
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Service Resolution Config",
					"item": [
						{
							"name": "Mutation",
							"item": [
								{
									"name": "Set Service Resolution Config",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation setServiceResolutionConfigs ($input:[ServiceResolutionConfigInput!]!) {\n    setServiceResolutionConfigs (input: $input) {\n        detailedStatus {\n            action\n            status\n            description\n            source {name value}\n            target {name value}\n        }\n        serviceResolutionConfigs {\n            goid\n            resolutionPathRequired\n            resolutionPathCaseSensitive\n            useL7OriginalUrl\n            useServiceGoid\n            useSoapAction\n            useSoapBodyChildNamespace\n            checksum\n        }\n    }\n}",
												"variables": "{\r\n  \"input\": [{\r\n      \"resolutionPathRequired\" : true,\r\n      \"resolutionPathCaseSensitive\" : true,\r\n      \"useL7OriginalUrl\" : true,\r\n      \"useServiceGoid\" : true,\r\n      \"useSoapAction\" : false,\r\n      \"useSoapBodyChildNamespace\" : true\r\n  }]\r\n}"
											}
										},
										"url": {
											"raw": "{{target_gw}}",
											"host": [
												"{{target_gw}}"
											]
										},
										"description": "# Sets the Service Resolution Configuration"
									},
									"response": []
								}
							]
						},
						{
							"name": "Query",
							"item": [
								{
									"name": "Get Service Resolution Configs",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query serviceResolutionConfigs {\n    serviceResolutionConfigs {\n        goid\n        resolutionPathRequired\n        resolutionPathCaseSensitive\n        useL7OriginalUrl\n        useServiceGoid\n        useSoapAction\n        useSoapBodyChildNamespace\n        checksum\n    }\n}",
												"variables": ""
											}
										},
										"url": {
											"raw": "{{source_gw}}",
											"host": [
												"{{source_gw}}"
											]
										},
										"description": "# Retrieves Service Resolution Configuration details\n\nInput: no input"
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Siteminder Configurations",
					"item": [
						{
							"name": "Mutation",
							"item": [
								{
									"name": "Set SM Configs",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation setSMConfigs($smConfigs: [SMConfigInput!]!, $secrets: [SecretInput!]!) {\n    # Ensure the availability of cassandra connection's dependencies\n    setSecrets(input: $secrets) {\n        detailedStatus {\n            action status description\n            source {name value}\n            target {name value}\n        }\n    }\n\n    setSMConfigs (input : $smConfigs){\n        detailedStatus {\n            action status description\n            source {name value}\n            target {name value}\n        }\n    }\n}",
												"variables": "{\n  \"smConfigs\": [\n    {\n      \"name\": \"some-smconfig\",\n      \"enabled\": true,\n      \"agentHost\": \"some-smhost\",\n      \"agentIP\": \"127.0.0.1\",\n      \"agentHostConfig\": \"DefaultHostSettings\",\n      \"agentSecret\": \"Y2hhbmdlaXQ=\",\n      \"cryptoMode\": \"MIGRATE\",\n      \"ipCheckEnabled\": false,\n      \"updateSSOToken\": false,\n      \"clusterFailoverThreshold\": 50,\n      \"nonClusterFailover\": false,\n      \"username\": \"some-user\",\n      \"securePasswordName\": \"some-pwd\",\n      \"properties\": [\n        {\n          \"name\": \"server.0.0.accounting.port\",\n          \"value\": \"44441\"\n        },\n        {\n          \"name\": \"server.0.0.timeout\",\n          \"value\": \"60\"\n        },\n        {\n          \"name\": \"server.0.0.connection.step\",\n          \"value\": \"1\"\n        },\n        {\n          \"name\": \"server.0.0.authorization.port\",\n          \"value\": \"44443\"\n        },\n        {\n          \"name\": \"server.0.0.connection.min\",\n          \"value\": \"1\"\n        },\n        {\n          \"name\": \"server.0.0.connection.max\",\n          \"value\": \"3\"\n        },\n        {\n          \"name\": \"server.0.0.address\",\n          \"value\": \"apimsm128compat.lvn.broadcom.net\"\n        },\n        {\n          \"name\": \"server.0.0.authentication.port\",\n          \"value\": \"44442\"\n        }\n      ]\n    }\n  ],\n  \"secrets\": [\n    {\n      \"name\": \"some-pwd\",\n      \"description\": \"some-description\",\n      \"secret\": \"JEw3RXYwMiQIdGZ0hAQpisU/ckUsmMDFIf+UzsIMi2fTuh9nEjgrdA==\",\n      \"secretType\": \"PASSWORD\",\n      \"variableReferencable\": true\n    }\n  ]\n}"
											}
										},
										"url": {
											"raw": "{{target_gw}}",
											"host": [
												"{{target_gw}}"
											]
										},
										"description": "# List all Web Api Services\n\nList all of the services\n\nInput: no input"
									},
									"response": []
								},
								{
									"name": "Delete SM Configs",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation deleteSMConfigs($smConfigs: [String!]!) {\n    deleteSMConfigs(names : $smConfigs) {\n        detailedStatus {\n            action status description\n            source {name value}\n            target {name value}\n        }\n    }\n}",
												"variables": "{\n    \"smConfigs\" : [\"some-smconfig\"]\n}"
											}
										},
										"url": {
											"raw": "{{target_gw}}",
											"host": [
												"{{target_gw}}"
											]
										},
										"description": "# List all Web Api Services\n\nList all of the services\n\nInput: no input"
									},
									"response": []
								}
							]
						},
						{
							"name": "Query",
							"item": [
								{
									"name": "All SM Configs",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query smConfigs {\n    smConfigs {\n        goid \n        name \n        checksum \n        \n        enabled \n        agentHost \n        agentIP \n        agentHostConfig \n        agentSecret \n        cryptoMode \n        ipCheckEnabled \n        updateSSOToken \n        clusterFailoverThreshold \n        nonClusterFailover \n        username \n        securePasswordName \n        properties { name value }\n    }\n}",
												"variables": ""
											}
										},
										"url": {
											"raw": "{{source_gw}}",
											"host": [
												"{{source_gw}}"
											]
										},
										"description": "# List all Web Api Services\n\nList all of the services\n\nInput: no input"
									},
									"response": []
								},
								{
									"name": "SM Config by Name",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query smConfigByName($name : String!) {\n    smConfigByName(name : $name) {\n        goid \n        name \n        checksum \n        \n        enabled \n        agentHost \n        agentIP \n        agentHostConfig \n        agentSecret \n        cryptoMode \n        ipCheckEnabled \n        updateSSOToken \n        clusterFailoverThreshold \n        nonClusterFailover \n        username \n        securePasswordName \n        properties { name value }\n    }\n}",
												"variables": "{\n    \"name\" : \"some-smconfig\"\n}"
											}
										},
										"url": {
											"raw": "{{source_gw}}",
											"host": [
												"{{source_gw}}"
											]
										},
										"description": "# List all Web Api Services\n\nList all of the services\n\nInput: no input"
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Soap Services",
					"item": [
						{
							"name": "Mutations",
							"item": [
								{
									"name": "Set Soap Services",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation setSoapServices ($input: [SoapServiceInput!]!) {\n    setSoapServices (input: $input) {\n        detailedStatus {\n            action status description\n            source {name value}\n            target {name value}\n        }\n    }\n}",
												"variables": "{\n  \"input\": [\n      {\n        \"name\": \"some soap service\",\n                \"folderPath\": \"/graphman-tests/soapServices\",\n                \"resolutionPath\" : \"/some-soap\",\n                \"wsdl\": \"<definitions targetNamespace=\\\"http://warehouse.acme.com/ws\\\" xmlns=\\\"http://schemas.xmlsoap.org/wsdl/\\\" xmlns:http=\\\"http://schemas.xmlsoap.org/wsdl/http/\\\" xmlns:mime=\\\"http://schemas.xmlsoap.org/wsdl/mime/\\\" xmlns:s=\\\"http://www.w3.org/2001/XMLSchema\\\" xmlns:s0=\\\"http://warehouse.acme.com/ws\\\" xmlns:soap=\\\"http://schemas.xmlsoap.org/wsdl/soap/\\\" xmlns:soapenc=\\\"http://schemas.xmlsoap.org/soap/encoding/\\\" xmlns:tm=\\\"http://microsoft.com/wsdl/mime/textMatching/\\\">\\n  <types>\\n    <s:schema elementFormDefault=\\\"qualified\\\" targetNamespace=\\\"http://warehouse.acme.com/ws\\\">\\n      <s:element name=\\\"listProducts\\\">\\n        <s:complexType/>\\n      </s:element>\\n      <s:element name=\\\"listProductsResponse\\\">\\n        <s:complexType>\\n          <s:sequence>\\n            <s:element maxOccurs=\\\"1\\\" minOccurs=\\\"0\\\" name=\\\"listProductsResult\\\" type=\\\"s0:ArrayOfProductListHeader\\\"/>\\n          </s:sequence>\\n        </s:complexType>\\n      </s:element>\\n      <s:complexType name=\\\"ArrayOfProductListHeader\\\">\\n        <s:sequence>\\n          <s:element maxOccurs=\\\"unbounded\\\" minOccurs=\\\"0\\\" name=\\\"ProductListHeader\\\" nillable=\\\"true\\\" type=\\\"s0:ProductListHeader\\\"/>\\n        </s:sequence>\\n      </s:complexType>\\n      <s:complexType name=\\\"ProductListHeader\\\">\\n        <s:sequence>\\n          <s:element maxOccurs=\\\"1\\\" minOccurs=\\\"0\\\" name=\\\"productName\\\" type=\\\"s:string\\\"/>\\n          <s:element maxOccurs=\\\"1\\\" minOccurs=\\\"1\\\" name=\\\"productId\\\" type=\\\"s:long\\\"/>\\n        </s:sequence>\\n      </s:complexType>\\n      <s:element name=\\\"getProductDetails\\\">\\n        <s:complexType>\\n          <s:sequence>\\n            <s:element maxOccurs=\\\"1\\\" minOccurs=\\\"1\\\" name=\\\"productid\\\" type=\\\"s:long\\\"/>\\n          </s:sequence>\\n        </s:complexType>\\n      </s:element>\\n      <s:element name=\\\"getProductDetailsResponse\\\">\\n        <s:complexType>\\n          <s:sequence>\\n            <s:element maxOccurs=\\\"1\\\" minOccurs=\\\"0\\\" name=\\\"getProductDetailsResult\\\" type=\\\"s0:ProductDetails\\\"/>\\n          </s:sequence>\\n        </s:complexType>\\n      </s:element>\\n      <s:complexType name=\\\"ProductDetails\\\">\\n        <s:complexContent mixed=\\\"false\\\">\\n          <s:extension base=\\\"s0:ProductListHeader\\\">\\n            <s:sequence>\\n              <s:element maxOccurs=\\\"1\\\" minOccurs=\\\"0\\\" name=\\\"description\\\" type=\\\"s:string\\\"/>\\n              <s:element maxOccurs=\\\"1\\\" minOccurs=\\\"1\\\" name=\\\"price\\\" type=\\\"s:float\\\"/>\\n              <s:element maxOccurs=\\\"1\\\" minOccurs=\\\"1\\\" name=\\\"inStock\\\" type=\\\"s:boolean\\\"/>\\n            </s:sequence>\\n          </s:extension>\\n        </s:complexContent>\\n      </s:complexType>\\n      <s:element name=\\\"placeOrder\\\">\\n        <s:complexType>\\n          <s:sequence>\\n            <s:element maxOccurs=\\\"1\\\" minOccurs=\\\"1\\\" name=\\\"productid\\\" type=\\\"s:long\\\"/>\\n            <s:element maxOccurs=\\\"1\\\" minOccurs=\\\"1\\\" name=\\\"amount\\\" type=\\\"s:long\\\"/>\\n            <s:element maxOccurs=\\\"1\\\" minOccurs=\\\"1\\\" name=\\\"price\\\" type=\\\"s:float\\\"/>\\n            <s:element maxOccurs=\\\"1\\\" minOccurs=\\\"1\\\" name=\\\"accountid\\\" type=\\\"s:long\\\"/>\\n          </s:sequence>\\n        </s:complexType>\\n      </s:element>\\n      <s:element name=\\\"placeOrderResponse\\\">\\n        <s:complexType>\\n          <s:sequence>\\n            <s:element maxOccurs=\\\"1\\\" minOccurs=\\\"1\\\" name=\\\"placeOrderResult\\\" type=\\\"s:long\\\"/>\\n          </s:sequence>\\n        </s:complexType>\\n      </s:element>\\n      <s:element name=\\\"currentOrders\\\">\\n        <s:complexType>\\n          <s:sequence>\\n            <s:element maxOccurs=\\\"1\\\" minOccurs=\\\"1\\\" name=\\\"accountid\\\" type=\\\"s:long\\\"/>\\n          </s:sequence>\\n        </s:complexType>\\n      </s:element>\\n      <s:element name=\\\"currentOrdersResponse\\\">\\n        <s:complexType>\\n          <s:sequence>\\n            <s:element maxOccurs=\\\"1\\\" minOccurs=\\\"0\\\" name=\\\"currentOrdersResult\\\" type=\\\"s0:ArrayOfOrder\\\"/>\\n          </s:sequence>\\n        </s:complexType>\\n      </s:element>\\n      <s:complexType name=\\\"ArrayOfOrder\\\">\\n        <s:sequence>\\n          <s:element maxOccurs=\\\"unbounded\\\" minOccurs=\\\"0\\\" name=\\\"Order\\\" nillable=\\\"true\\\" type=\\\"s0:Order\\\"/>\\n        </s:sequence>\\n      </s:complexType>\\n      <s:complexType name=\\\"Order\\\">\\n        <s:sequence>\\n          <s:element maxOccurs=\\\"1\\\" minOccurs=\\\"1\\\" name=\\\"date\\\" type=\\\"s:dateTime\\\"/>\\n          <s:element maxOccurs=\\\"1\\\" minOccurs=\\\"1\\\" name=\\\"accountId\\\" type=\\\"s:long\\\"/>\\n          <s:element maxOccurs=\\\"1\\\" minOccurs=\\\"1\\\" name=\\\"productId\\\" type=\\\"s:long\\\"/>\\n          <s:element maxOccurs=\\\"1\\\" minOccurs=\\\"1\\\" name=\\\"amount\\\" type=\\\"s:long\\\"/>\\n          <s:element maxOccurs=\\\"1\\\" minOccurs=\\\"1\\\" name=\\\"price\\\" type=\\\"s:float\\\"/>\\n          <s:element maxOccurs=\\\"1\\\" minOccurs=\\\"1\\\" name=\\\"confirmationId\\\" type=\\\"s:long\\\"/>\\n        </s:sequence>\\n      </s:complexType>\\n    </s:schema>\\n  </types>\\n  <message name=\\\"listProductsSoapIn\\\">\\n    <part element=\\\"s0:listProducts\\\" name=\\\"parameters\\\"/>\\n  </message>\\n  <message name=\\\"listProductsSoapOut\\\">\\n    <part element=\\\"s0:listProductsResponse\\\" name=\\\"parameters\\\"/>\\n  </message>\\n  <message name=\\\"getProductDetailsSoapIn\\\">\\n    <part element=\\\"s0:getProductDetails\\\" name=\\\"parameters\\\"/>\\n  </message>\\n  <message name=\\\"getProductDetailsSoapOut\\\">\\n    <part element=\\\"s0:getProductDetailsResponse\\\" name=\\\"parameters\\\"/>\\n  </message>\\n  <message name=\\\"placeOrderSoapIn\\\">\\n    <part element=\\\"s0:placeOrder\\\" name=\\\"parameters\\\"/>\\n  </message>\\n  <message name=\\\"placeOrderSoapOut\\\">\\n    <part element=\\\"s0:placeOrderResponse\\\" name=\\\"parameters\\\"/>\\n  </message>\\n  <message name=\\\"currentOrdersSoapIn\\\">\\n    <part element=\\\"s0:currentOrders\\\" name=\\\"parameters\\\"/>\\n  </message>\\n  <message name=\\\"currentOrdersSoapOut\\\">\\n    <part element=\\\"s0:currentOrdersResponse\\\" name=\\\"parameters\\\"/>\\n  </message>\\n  <portType name=\\\"WarehouseSoap\\\">\\n    <operation name=\\\"listProducts\\\">\\n      <input message=\\\"s0:listProductsSoapIn\\\"/>\\n      <output message=\\\"s0:listProductsSoapOut\\\"/>\\n    </operation>\\n    <operation name=\\\"getProductDetails\\\">\\n      <input message=\\\"s0:getProductDetailsSoapIn\\\"/>\\n      <output message=\\\"s0:getProductDetailsSoapOut\\\"/>\\n    </operation>\\n    <operation name=\\\"placeOrder\\\">\\n      <input message=\\\"s0:placeOrderSoapIn\\\"/>\\n      <output message=\\\"s0:placeOrderSoapOut\\\"/>\\n    </operation>\\n    <operation name=\\\"currentOrders\\\">\\n      <input message=\\\"s0:currentOrdersSoapIn\\\"/>\\n      <output message=\\\"s0:currentOrdersSoapOut\\\"/>\\n    </operation>\\n  </portType>\\n  <binding name=\\\"WarehouseSoap\\\" type=\\\"s0:WarehouseSoap\\\">\\n    <soap:binding style=\\\"document\\\" transport=\\\"http://schemas.xmlsoap.org/soap/http\\\"/>\\n    <operation name=\\\"listProducts\\\">\\n      <soap:operation soapAction=\\\"http://warehouse.acme.com/ws/listProducts\\\" style=\\\"document\\\"/>\\n      <input>\\n        <soap:body use=\\\"literal\\\"/>\\n      </input>\\n      <output>\\n        <soap:body use=\\\"literal\\\"/>\\n      </output>\\n    </operation>\\n    <operation name=\\\"getProductDetails\\\">\\n      <soap:operation soapAction=\\\"http://warehouse.acme.com/ws/getProductDetails\\\" style=\\\"document\\\"/>\\n      <input>\\n        <soap:body use=\\\"literal\\\"/>\\n      </input>\\n      <output>\\n        <soap:body use=\\\"literal\\\"/>\\n      </output>\\n    </operation>\\n    <operation name=\\\"placeOrder\\\">\\n      <soap:operation soapAction=\\\"http://warehouse.acme.com/ws/placeOrder\\\" style=\\\"document\\\"/>\\n      <input>\\n        <soap:body use=\\\"literal\\\"/>\\n      </input>\\n      <output>\\n        <soap:body use=\\\"literal\\\"/>\\n      </output>\\n    </operation>\\n    <operation name=\\\"currentOrders\\\">\\n      <soap:operation soapAction=\\\"http://warehouse.acme.com/ws/currentOrders\\\" style=\\\"document\\\"/>\\n      <input>\\n        <soap:body use=\\\"literal\\\"/>\\n      </input>\\n      <output>\\n        <soap:body use=\\\"literal\\\"/>\\n      </output>\\n    </operation>\\n  </binding>\\n  <service name=\\\"Warehouse\\\">\\n    <port binding=\\\"s0:WarehouseSoap\\\" name=\\\"WarehouseSoap\\\">\\n      <soap:address location=\\\"http://hugh/ACMEWarehouseWS/Service1.asmx\\\"/>\\n    </port>\\n  </service>\\n</definitions>\",\n                \n                \"wssProcessingEnabled\": true,\n                \"methodsAllowed\": [\n                    \"POST\"\n                ],\n                \"policy\": {\n                    \"xml\": \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n<wsp:Policy xmlns:L7p=\\\"http://www.layer7tech.com/ws/policy\\\" xmlns:wsp=\\\"http://schemas.xmlsoap.org/ws/2002/12/policy\\\">\\n    <wsp:All wsp:Usage=\\\"Required\\\">\\n        <L7p:SchemaValidation>\\n            <L7p:ResourceInfo staticResourceInfo=\\\"included\\\">\\n                <L7p:Document stringValueReference=\\\"inline\\\"><![CDATA[<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n<s:schema elementFormDefault=\\\"qualified\\\"\\n    targetNamespace=\\\"http://warehouse.acme.com/ws\\\"\\n    xmlns:http=\\\"http://schemas.xmlsoap.org/wsdl/http/\\\"\\n    xmlns:mime=\\\"http://schemas.xmlsoap.org/wsdl/mime/\\\"\\n    xmlns:s=\\\"http://www.w3.org/2001/XMLSchema\\\"\\n    xmlns:s0=\\\"http://warehouse.acme.com/ws\\\"\\n    xmlns:soap=\\\"http://schemas.xmlsoap.org/wsdl/soap/\\\"\\n    xmlns:soapenc=\\\"http://schemas.xmlsoap.org/soap/encoding/\\\" xmlns:tm=\\\"http://microsoft.com/wsdl/mime/textMatching/\\\">\\n    <s:element name=\\\"listProducts\\\">\\n        <s:complexType/>\\n    </s:element>\\n    <s:element name=\\\"listProductsResponse\\\">\\n        <s:complexType>\\n            <s:sequence>\\n                <s:element maxOccurs=\\\"1\\\" minOccurs=\\\"0\\\"\\n                    name=\\\"listProductsResult\\\" type=\\\"s0:ArrayOfProductListHeader\\\"/>\\n            </s:sequence>\\n        </s:complexType>\\n    </s:element>\\n    <s:complexType name=\\\"ArrayOfProductListHeader\\\">\\n        <s:sequence>\\n            <s:element maxOccurs=\\\"unbounded\\\" minOccurs=\\\"0\\\"\\n                name=\\\"ProductListHeader\\\" nillable=\\\"true\\\" type=\\\"s0:ProductListHeader\\\"/>\\n        </s:sequence>\\n    </s:complexType>\\n    <s:complexType name=\\\"ProductListHeader\\\">\\n        <s:sequence>\\n            <s:element maxOccurs=\\\"1\\\" minOccurs=\\\"0\\\" name=\\\"productName\\\" type=\\\"s:string\\\"/>\\n            <s:element maxOccurs=\\\"1\\\" minOccurs=\\\"1\\\" name=\\\"productId\\\" type=\\\"s:long\\\"/>\\n        </s:sequence>\\n    </s:complexType>\\n    <s:element name=\\\"getProductDetails\\\">\\n        <s:complexType>\\n            <s:sequence>\\n                <s:element maxOccurs=\\\"1\\\" minOccurs=\\\"1\\\" name=\\\"productid\\\" type=\\\"s:long\\\"/>\\n            </s:sequence>\\n        </s:complexType>\\n    </s:element>\\n    <s:element name=\\\"getProductDetailsResponse\\\">\\n        <s:complexType>\\n            <s:sequence>\\n                <s:element maxOccurs=\\\"1\\\" minOccurs=\\\"0\\\"\\n                    name=\\\"getProductDetailsResult\\\" type=\\\"s0:ProductDetails\\\"/>\\n            </s:sequence>\\n        </s:complexType>\\n    </s:element>\\n    <s:complexType name=\\\"ProductDetails\\\">\\n        <s:complexContent mixed=\\\"false\\\">\\n            <s:extension base=\\\"s0:ProductListHeader\\\">\\n                <s:sequence>\\n                    <s:element maxOccurs=\\\"1\\\" minOccurs=\\\"0\\\"\\n                        name=\\\"description\\\" type=\\\"s:string\\\"/>\\n                    <s:element maxOccurs=\\\"1\\\" minOccurs=\\\"1\\\" name=\\\"price\\\" type=\\\"s:float\\\"/>\\n                    <s:element maxOccurs=\\\"1\\\" minOccurs=\\\"1\\\"\\n                        name=\\\"inStock\\\" type=\\\"s:boolean\\\"/>\\n                </s:sequence>\\n            </s:extension>\\n        </s:complexContent>\\n    </s:complexType>\\n    <s:element name=\\\"placeOrder\\\">\\n        <s:complexType>\\n            <s:sequence>\\n                <s:element maxOccurs=\\\"1\\\" minOccurs=\\\"1\\\" name=\\\"productid\\\" type=\\\"s:long\\\"/>\\n                <s:element maxOccurs=\\\"1\\\" minOccurs=\\\"1\\\" name=\\\"amount\\\" type=\\\"s:long\\\"/>\\n                <s:element maxOccurs=\\\"1\\\" minOccurs=\\\"1\\\" name=\\\"price\\\" type=\\\"s:float\\\"/>\\n                <s:element maxOccurs=\\\"1\\\" minOccurs=\\\"1\\\" name=\\\"accountid\\\" type=\\\"s:long\\\"/>\\n            </s:sequence>\\n        </s:complexType>\\n    </s:element>\\n    <s:element name=\\\"placeOrderResponse\\\">\\n        <s:complexType>\\n            <s:sequence>\\n                <s:element maxOccurs=\\\"1\\\" minOccurs=\\\"1\\\"\\n                    name=\\\"placeOrderResult\\\" type=\\\"s:long\\\"/>\\n            </s:sequence>\\n        </s:complexType>\\n    </s:element>\\n    <s:element name=\\\"currentOrders\\\">\\n        <s:complexType>\\n            <s:sequence>\\n                <s:element maxOccurs=\\\"1\\\" minOccurs=\\\"1\\\" name=\\\"accountid\\\" type=\\\"s:long\\\"/>\\n            </s:sequence>\\n        </s:complexType>\\n    </s:element>\\n    <s:element name=\\\"currentOrdersResponse\\\">\\n        <s:complexType>\\n            <s:sequence>\\n                <s:element maxOccurs=\\\"1\\\" minOccurs=\\\"0\\\"\\n                    name=\\\"currentOrdersResult\\\" type=\\\"s0:ArrayOfOrder\\\"/>\\n            </s:sequence>\\n        </s:complexType>\\n    </s:element>\\n    <s:complexType name=\\\"ArrayOfOrder\\\">\\n        <s:sequence>\\n            <s:element maxOccurs=\\\"unbounded\\\" minOccurs=\\\"0\\\" name=\\\"Order\\\"\\n                nillable=\\\"true\\\" type=\\\"s0:Order\\\"/>\\n        </s:sequence>\\n    </s:complexType>\\n    <s:complexType name=\\\"Order\\\">\\n        <s:sequence>\\n            <s:element maxOccurs=\\\"1\\\" minOccurs=\\\"1\\\" name=\\\"date\\\" type=\\\"s:dateTime\\\"/>\\n            <s:element maxOccurs=\\\"1\\\" minOccurs=\\\"1\\\" name=\\\"accountId\\\" type=\\\"s:long\\\"/>\\n            <s:element maxOccurs=\\\"1\\\" minOccurs=\\\"1\\\" name=\\\"productId\\\" type=\\\"s:long\\\"/>\\n            <s:element maxOccurs=\\\"1\\\" minOccurs=\\\"1\\\" name=\\\"amount\\\" type=\\\"s:long\\\"/>\\n            <s:element maxOccurs=\\\"1\\\" minOccurs=\\\"1\\\" name=\\\"price\\\" type=\\\"s:float\\\"/>\\n            <s:element maxOccurs=\\\"1\\\" minOccurs=\\\"1\\\" name=\\\"confirmationId\\\" type=\\\"s:long\\\"/>\\n        </s:sequence>\\n    </s:complexType>\\n</s:schema>\\n]]></L7p:Document>\\n                <L7p:OriginalUrl stringValue=\\\"file:/Users/flascelles/Documents/soap/Warehouse_WSDL.wsdl#.xsd1\\\"/>\\n            </L7p:ResourceInfo>\\n            <L7p:Target target=\\\"REQUEST\\\"/>\\n        </L7p:SchemaValidation>\\n        <L7p:SchemaValidation>\\n            <L7p:ResourceInfo globalResourceInfo=\\\"included\\\">\\n                <L7p:Id stringValue=\\\"http://warehouse.io/mywarehouse\\\"/>\\n            </L7p:ResourceInfo>\\n            <L7p:Target target=\\\"REQUEST\\\"/>\\n        </L7p:SchemaValidation>\\n        <L7p:HttpRoutingAssertion>\\n            <L7p:ProtectedServiceUrl stringValue=\\\"http://hugh/ACMEWarehouseWS/Service1.asmx\\\"/>\\n            <L7p:RequestHeaderRules httpPassthroughRuleSet=\\\"included\\\">\\n                <L7p:Rules httpPassthroughRules=\\\"included\\\">\\n                    <L7p:item httpPassthroughRule=\\\"included\\\">\\n                        <L7p:Name stringValue=\\\"Cookie\\\"/>\\n                    </L7p:item>\\n                    <L7p:item httpPassthroughRule=\\\"included\\\">\\n                        <L7p:Name stringValue=\\\"SOAPAction\\\"/>\\n                    </L7p:item>\\n                </L7p:Rules>\\n            </L7p:RequestHeaderRules>\\n            <L7p:RequestParamRules httpPassthroughRuleSet=\\\"included\\\">\\n                <L7p:ForwardAll booleanValue=\\\"true\\\"/>\\n                <L7p:Rules httpPassthroughRules=\\\"included\\\"/>\\n            </L7p:RequestParamRules>\\n            <L7p:ResponseHeaderRules httpPassthroughRuleSet=\\\"included\\\">\\n                <L7p:Rules httpPassthroughRules=\\\"included\\\">\\n                    <L7p:item httpPassthroughRule=\\\"included\\\">\\n                        <L7p:Name stringValue=\\\"Set-Cookie\\\"/>\\n                    </L7p:item>\\n                </L7p:Rules>\\n            </L7p:ResponseHeaderRules>\\n        </L7p:HttpRoutingAssertion>\\n    </wsp:All>\\n</wsp:Policy>\\n\"\n                }\n      }\n  ]\n}"
											}
										},
										"url": {
											"raw": "{{target_gw}}",
											"host": [
												"{{target_gw}}"
											]
										},
										"description": "# Set Soap Services\n\nSet multiple Soap services altogether on the target gateway.\n\nInput: See sample for input. Here is a sample:\n\n``` json\n{\n  \"input\": [\n      {\n        \"name\": \"Warehouse_eh\",\n                \"folderPath\": \"/\",\n                \"resolutionPath\" : \"/testsoap\",\n                \"wsdl\": \"\\n  \\n    \\n      \\n        \\n      \\n      \\n        \\n          \\n            \\n          \\n        \\n      \\n      \\n        \\n          \\n        \\n      \\n      \\n        \\n          \\n          \\n        \\n      \\n      \\n        \\n          \\n            \\n          \\n        \\n      \\n      \\n        \\n          \\n            \\n          \\n        \\n      \\n      \\n        \\n          \\n            \\n              \\n              \\n              \\n            \\n          \\n        \\n      \\n      \\n        \\n          \\n            \\n            \\n            \\n            \\n          \\n        \\n      \\n      \\n        \\n          \\n            \\n          \\n        \\n      \\n      \\n        \\n          \\n            \\n          \\n        \\n      \\n      \\n        \\n          \\n            \\n          \\n        \\n      \\n      \\n        \\n          \\n        \\n      \\n      \\n        \\n          \\n          \\n          \\n          \\n          \\n          \\n        \\n      \\n    \\n  \\n  \\n    \\n  \\n  \\n    \\n  \\n  \\n    \\n  \\n  \\n    \\n  \\n  \\n    \\n  \\n  \\n    \\n  \\n  \\n    \\n  \\n  \\n    \\n  \\n  \\n    \\n      \\n      \\n    \\n    \\n      \\n      \\n    \\n    \\n      \\n      \\n    \\n    \\n      \\n      \\n    \\n  \\n  \\n    \\n    \\n      \\n      \\n        \\n      \\n      \\n        \\n      \\n    \\n    \\n      \\n      \\n        \\n      \\n      \\n        \\n      \\n    \\n    \\n      \\n      \\n        \\n      \\n      \\n        \\n      \\n    \\n    \\n      \\n      \\n        \\n      \\n      \\n        \\n      \\n    \\n  \\n  \\n    \\n      \\n    \\n  \\n\",\n                \n                \"wssProcessingEnabled\": true,\n                \"methodsAllowed\": [\n                    \"POST\"\n                ],\n                \"policy\": {\n                    \"xml\": \"\\n\\n    \\n        \\n            \\n                \\n\\n    \\n        \\n    \\n    \\n        \\n            \\n                \\n            \\n        \\n    \\n    \\n        \\n            \\n        \\n    \\n    \\n        \\n            \\n            \\n        \\n    \\n    \\n        \\n            \\n                \\n            \\n        \\n    \\n    \\n        \\n            \\n                \\n            \\n        \\n    \\n    \\n        \\n            \\n                \\n                    \\n                    \\n                    \\n                \\n            \\n        \\n    \\n    \\n        \\n            \\n                \\n                \\n                \\n                \\n            \\n        \\n    \\n    \\n        \\n            \\n                \\n            \\n        \\n    \\n    \\n        \\n            \\n                \\n            \\n        \\n    \\n    \\n        \\n            \\n                \\n            \\n        \\n    \\n    \\n        \\n            \\n        \\n    \\n    \\n        \\n            \\n            \\n            \\n            \\n            \\n            \\n        \\n    \\n\\n]]>\\n                \\n            \\n            \\n        \\n        \\n            \\n                \\n            \\n            \\n        \\n        \\n            \\n            \\n                \\n                    \\n                        \\n                    \\n                    \\n                        \\n                    \\n                \\n            \\n            \\n                \\n                \\n            \\n            \\n                \\n                    \\n                        \\n                    \\n                \\n            \\n        \\n    \\n\\n\"\n                }\n      }\n  ]\n}\n\n```"
									},
									"response": []
								},
								{
									"name": "Delete Soap Services",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation deleteSoapServices ($soapServices: [SoapServiceResolverInput!]!) {\n    deleteSoapServices (resolvers: $soapServices) {\n        detailedStatus {\n            action status description\n            source {name value}\n            target {name value}\n        }\n    }\n}",
												"variables": "{\n  \"soapServices\": \n      [{\n        \"soapAction\": \"http://warehouse.acme.com/ws/listProducts\",\n        \"baseUri\" : \"http://warehouse.acme.com/ws\",\n        \"resolutionPath\": \"/some-soap\"\n      }]\n}"
											}
										},
										"url": {
											"raw": "{{target_gw}}",
											"host": [
												"{{target_gw}}"
											]
										},
										"description": "# Delete Soap Service"
									},
									"response": []
								}
							]
						},
						{
							"name": "Queries",
							"item": [
								{
									"name": "All Soap Services",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query soapServices {\n    soapServices {\n        goid \n        name \n        resolutionPath \n        resolvers { soapActions baseUri resolutionPath } \n        checksum \n        \n        enabled \n        folderPath \n        soapVersion \n        methodsAllowed \n        tracingEnabled \n        wssProcessingEnabled \n        laxResolution \n        properties { name value } \n        wsdl \n        policy { xml }\n    }\n}",
												"variables": "{}"
											}
										},
										"url": {
											"raw": "{{source_gw}}",
											"host": [
												"{{source_gw}}"
											]
										},
										"description": "# All Soap Services"
									},
									"response": []
								},
								{
									"name": "Soap Services in Folder",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query soapServicesByFolderPath ($folderPath: String!) {\n    soapServicesByFolderPath (folderPath: $folderPath) {\n        goid \n        name \n        resolutionPath \n        resolvers { soapActions baseUri resolutionPath } \n        checksum \n        \n        enabled \n        folderPath \n        soapVersion \n        methodsAllowed \n        tracingEnabled \n        wssProcessingEnabled \n        laxResolution \n        properties { name value } \n        wsdl \n        policy { xml }\n    }\n}",
												"variables": "{\n    \"folderPath\": \"/graphman-tests/soapServices\"\n}"
											}
										},
										"url": {
											"raw": "{{source_gw}}",
											"host": [
												"{{source_gw}}"
											]
										},
										"description": "# Soap Services in Folder"
									},
									"response": []
								},
								{
									"name": "Soap Service by Resolver",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query soapServiceByResolver ($resolver: SoapServiceResolverInput!) {\n    soapServiceByResolver (resolver: $resolver) {\n        goid \n        name \n        resolutionPath \n        resolvers { soapActions baseUri resolutionPath } \n        checksum \n        \n        enabled \n        folderPath \n        soapVersion \n        methodsAllowed \n        tracingEnabled \n        wssProcessingEnabled \n        laxResolution \n        properties { name value } \n        wsdl \n        policy { xml }\n    }\n}",
												"variables": "{\n  \"resolver\": \n      {\n        \"soapAction\": \"http://warehouse.acme.com/ws/listProducts\",\n        \"baseUri\" : \"http://warehouse.acme.com/ws\",\n        \"resolutionPath\": \"/some-soap\"\n      }\n  \n}"
											}
										},
										"url": {
											"raw": "{{source_gw}}",
											"host": [
												"{{source_gw}}"
											]
										},
										"description": "# Soap Service by Resolver"
									},
									"response": []
								},
								{
									"name": "Soap Services by Name",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query soapServicesByName ($name: String!) {\n    soapServicesByName (name: $name) {\n        goid \n        name \n        resolutionPath \n        resolvers { soapActions baseUri resolutionPath } \n        checksum \n        \n        enabled \n        folderPath \n        soapVersion \n        methodsAllowed \n        tracingEnabled \n        wssProcessingEnabled \n        laxResolution \n        properties { name value } \n        wsdl \n        policy { xml }\n    }\n}",
												"variables": "{\n    \"name\": \"some soap service\"\n}"
											}
										},
										"url": {
											"raw": "{{source_gw}}",
											"host": [
												"{{source_gw}}"
											]
										},
										"description": "# Soap Services by Name"
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Trusted Certs",
					"item": [
						{
							"name": "Mutations",
							"item": [
								{
									"name": "Set Certificates",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation setTrustedCerts ($trustedCerts: [TrustedCertInput!]!) {\n    # Ensure the availability of Trusted Cert dependencies (Revocation Checking Policy)\n    # FYI, GRAPHMAN doesn't fully support managin the Revocation Checking Policy entities. Currently, the support is limited to reference them in defining the TrustedCert entities.\n    # As an example, the following fields are valid for TrustedCert entity\n    # \n    # \"revocationCheckPolicyType\": \"SPECIFIED\",\n    #  \"revocationCheckPolicyName\": \"some revocation checking policy\",\n    #\n    setTrustedCerts (input: $trustedCerts) {\n        detailedStatus {\n            action status description\n            source {name value}\n            target {name value}\n        }\n    }\n}",
												"variables": "{\n  \"trustedCerts\": [\n    {\n      \"name\": \"some-trusted-cert\",\n      \"subjectDn\": \"cn=www.example.org,o=internet corporation for assigned names and numbers,l=los angeles,st=california,c=us\",\n      \"thumbprintSha1\": \"8qrXPTJoO3FtKn1htRxtV2SrOJk=\",\n      \"verifyHostname\": false,\n      \"trustAnchor\": false,\n      \"trustedFor\": [\n        \"SSL\",\n        \"SIGNING_SERVER_CERTS\"\n      ],\n      \"revocationCheckPolicyType\": \"USE_DEFAULT\",\n      \"notBefore\": \"2023-01-13T00:00:00Z\",\n      \"notAfter\": \"2024-02-13T23:59:59Z\",\n      \"certBase64\": \"MIIHSjCCBjKgAwIBAgIQDB/LGEUYx+OGZ0EjbWtz8TANBgkqhkiG9w0BAQsFADBPMQswCQYDVQQG\\r\\nEwJVUzEVMBMGA1UEChMMRGlnaUNlcnQgSW5jMSkwJwYDVQQDEyBEaWdpQ2VydCBUTFMgUlNBIFNI\\r\\nQTI1NiAyMDIwIENBMTAeFw0yMzAxMTMwMDAwMDBaFw0yNDAyMTMyMzU5NTlaMIGWMQswCQYDVQQG\\r\\nEwJVUzETMBEGA1UECBMKQ2FsaWZvcm5pYTEUMBIGA1UEBxMLTG9zIEFuZ2VsZXMxQjBABgNVBAoM\\r\\nOUludGVybmV0wqBDb3Jwb3JhdGlvbsKgZm9ywqBBc3NpZ25lZMKgTmFtZXPCoGFuZMKgTnVtYmVy\\r\\nczEYMBYGA1UEAxMPd3d3LmV4YW1wbGUub3JnMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKC\\r\\nAQEAwoB3iVm4RW+6StkR+nutx1fQevu2+t0Fu6KBcbvhfyHSXy7w0nJOdTT4jWLjStpRkNQBPZwM\\r\\nwHH35i+21gdnJtDe/xfO8IX9McFmyodlBUcqX8CruIzDv9AXf2OjXPBG+4aq+03XKl5/muATl32+\\r\\n+301Vw1dXoGYNeoWQqLTsHT3WS3tOOf+ehuzNuZ+rj+ephaD3lMBToEArrtC9R91KTTN6YSAOK48\\r\\nNxTA8CfOMFK5itxfIqB5+E9OSQTidXyqLyoeA+xxTKMqYfxvypEek1oueAhY9u67NCBdmuavxtfy\\r\\nvwp7+o6Sd+NsewxAhmRKFexw13KOYzDhC+9aMJcuJQIDAQABo4ID2DCCA9QwHwYDVR0jBBgwFoAU\\r\\nt2ui6qiqhIx56rTaD5iyxZV2ufQwHQYDVR0OBBYEFLCTP+gXgv1ssrYXh8vjgP6CmwGeMIGBBgNV\\r\\nHREEejB4gg93d3cuZXhhbXBsZS5vcmeCC2V4YW1wbGUubmV0ggtleGFtcGxlLmVkdYILZXhhbXBs\\r\\nZS5jb22CC2V4YW1wbGUub3Jngg93d3cuZXhhbXBsZS5jb22CD3d3dy5leGFtcGxlLmVkdYIPd3d3\\r\\nLmV4YW1wbGUubmV0MA4GA1UdDwEB/wQEAwIFoDAdBgNVHSUEFjAUBggrBgEFBQcDAQYIKwYBBQUH\\r\\nAwIwgY8GA1UdHwSBhzCBhDBAoD6gPIY6aHR0cDovL2NybDMuZGlnaWNlcnQuY29tL0RpZ2lDZXJ0\\r\\nVExTUlNBU0hBMjU2MjAyMENBMS00LmNybDBAoD6gPIY6aHR0cDovL2NybDQuZGlnaWNlcnQuY29t\\r\\nL0RpZ2lDZXJ0VExTUlNBU0hBMjU2MjAyMENBMS00LmNybDA+BgNVHSAENzA1MDMGBmeBDAECAjAp\\r\\nMCcGCCsGAQUFBwIBFhtodHRwOi8vd3d3LmRpZ2ljZXJ0LmNvbS9DUFMwfwYIKwYBBQUHAQEEczBx\\r\\nMCQGCCsGAQUFBzABhhhodHRwOi8vb2NzcC5kaWdpY2VydC5jb20wSQYIKwYBBQUHMAKGPWh0dHA6\\r\\nLy9jYWNlcnRzLmRpZ2ljZXJ0LmNvbS9EaWdpQ2VydFRMU1JTQVNIQTI1NjIwMjBDQTEtMS5jcnQw\\r\\nCQYDVR0TBAIwADCCAX8GCisGAQQB1nkCBAIEggFvBIIBawFpAHYA7s3QZNXbGs7FXLedtM0TojKH\\r\\nRny87N7DUUhZRnEftZsAAAGFq0gFIwAABAMARzBFAiEAqt+fK6jFdGA6tv0EWt9rax0WYBV4re9j\\r\\ngZgq0zi42QUCIEBh1yKpPvgX1BreE0wBUmriOVUhJS77KgF193fT2877AHcAc9meiRtMlnigIH1H\\r\\nneayxhzQUV5xGSqMa4AQesF3crUAAAGFq0gFnwAABAMASDBGAiEA12SUFK5rgLqRzvgcr7ZzV4nl\\r\\n+Zt9lloAzRLfPc7vSPACIQCXPbwScx1rE+BjFawZlVjLj/1PsM0KQQcsfHDZJUTLwAB2AEiw42va\\r\\npkc0D+VqAvqdMOscUgHLVt0sgdm7v6s52IRzAAABhatIBV4AAAQDAEcwRQIhAN5bhHthoyWMJ3CQ\\r\\nB/1iYFEhMgUVkFhHDM/nlE9ThCwhAiAPvPJXyp7a2kzwJX3P7fqH5Xko3rPhCzRoXYd6W+QkCjAN\\r\\nBgkqhkiG9w0BAQsFAAOCAQEAWeRK2KmCuppK8WMMbXYmdbM8dL7F9z2nkZL4zwYtWBDt87jW/Gz/\\r\\nE5YyzU/phySFC3SiwvYP9afYfXaKrunJWCtuAG+5zSTuxELFTBaFnTRhOSO/xo6VyYSpsuVBD0R4\\r\\n15W5z9l0v1hP5xb/fEAwxGxOIk3Lg2c6k78rxcWcGvJDoSU7hPb3U26oha7eFHSRMAYN8gfUxAi6\\r\\nQ2TF4j/arMVBr6Q36EJ2dPcTu0p9NlmBm8dE34lzuTNC6GDCTWFdEloQ9u//M4kUUOjWn8a5XCs1\\r\\n263t3Ta2JfKViqxpP5r+GvgVKG3qGFrC0mIYr0B4tfpeCY9T+cz4I6GDMSP0xg==\"\n    },\n    {\n      \"name\": \"some-other-trusted-cert\",\n      \"subjectDn\": \"cn=sni.cloudflaressl.com,o=cloudflare\\\\, inc.,l=san francisco,st=california,c=us\",\n      \"thumbprintSha1\": \"KCjaydt1qoeF9KZJxM0pDgBAd1U=\",\n      \"verifyHostname\": true,\n      \"trustAnchor\": true,\n      \"trustedFor\": [\n        \"SSL\",\n        \"SIGNING_SERVER_CERTS\"\n      ],\n      \"revocationCheckPolicyType\": \"USE_DEFAULT\",\n      \"notBefore\": \"2022-05-28T00:00:00Z\",\n      \"notAfter\": \"2023-05-28T23:59:59Z\",\n      \"certBase64\": \"MIIFJjCCBMygAwIBAgIQAc4RmE1z36BQTG41XVo7STAKBggqhkjOPQQDAjBKMQswCQYDVQQGEwJV\\r\\nUzEZMBcGA1UEChMQQ2xvdWRmbGFyZSwgSW5jLjEgMB4GA1UEAxMXQ2xvdWRmbGFyZSBJbmMgRUND\\r\\nIENBLTMwHhcNMjIwNTI4MDAwMDAwWhcNMjMwNTI4MjM1OTU5WjB1MQswCQYDVQQGEwJVUzETMBEG\\r\\nA1UECBMKQ2FsaWZvcm5pYTEWMBQGA1UEBxMNU2FuIEZyYW5jaXNjbzEZMBcGA1UEChMQQ2xvdWRm\\r\\nbGFyZSwgSW5jLjEeMBwGA1UEAxMVc25pLmNsb3VkZmxhcmVzc2wuY29tMFkwEwYHKoZIzj0CAQYI\\r\\nKoZIzj0DAQcDQgAENvXhMbPHM1wuM8muwgLfqOY8OZhhVbzGKYNf+VVTkgU4xvYoOtoBckp/L8HE\\r\\nYEIex1s77eEKNW4GuId6r+9g1KOCA2cwggNjMB8GA1UdIwQYMBaAFKXON+rrsHUOlGeItEX62SQQ\\r\\nh5YfMB0GA1UdDgQWBBSK7ogvwe81QKZOZXOq3FJVyiO3UTAuBgNVHREEJzAlggx3d3cuaWV0Zi5v\\r\\ncmeCFXNuaS5jbG91ZGZsYXJlc3NsLmNvbTAOBgNVHQ8BAf8EBAMCB4AwHQYDVR0lBBYwFAYIKwYB\\r\\nBQUHAwEGCCsGAQUFBwMCMHsGA1UdHwR0MHIwN6A1oDOGMWh0dHA6Ly9jcmwzLmRpZ2ljZXJ0LmNv\\r\\nbS9DbG91ZGZsYXJlSW5jRUNDQ0EtMy5jcmwwN6A1oDOGMWh0dHA6Ly9jcmw0LmRpZ2ljZXJ0LmNv\\r\\nbS9DbG91ZGZsYXJlSW5jRUNDQ0EtMy5jcmwwPgYDVR0gBDcwNTAzBgZngQwBAgIwKTAnBggrBgEF\\r\\nBQcCARYbaHR0cDovL3d3dy5kaWdpY2VydC5jb20vQ1BTMHYGCCsGAQUFBwEBBGowaDAkBggrBgEF\\r\\nBQcwAYYYaHR0cDovL29jc3AuZGlnaWNlcnQuY29tMEAGCCsGAQUFBzAChjRodHRwOi8vY2FjZXJ0\\r\\ncy5kaWdpY2VydC5jb20vQ2xvdWRmbGFyZUluY0VDQ0NBLTMuY3J0MAwGA1UdEwEB/wQCMAAwggF9\\r\\nBgorBgEEAdZ5AgQCBIIBbQSCAWkBZwB2AOg+0No+9QY1MudXKLyJa8kD08vREWvs62nhd31tBr1u\\r\\nAAABgQg6Ys4AAAQDAEcwRQIhANX0PSUOX/P50JSOcCYD98B6qt+R31549HF5pG7vNY6tAiBF0mN1\\r\\nuKpSSU//UYa2JsFnyNJoP1SCjjmltkviylJTlwB1ADXPGRu/sWxXvw+tTG1Cy7u2JyAmUeo/4Srv\\r\\nqAPDO9ZMAAABgQg6YugAAAQDAEYwRAIgFiWFDBq0iPpHVeuvExEotWs8OPvznzF5G/HKdTRoGSMC\\r\\nIFEHSwwxLw/3H7xZQCkga6oE2tlBnz1+RhcEMGSG+42iAHYAtz77JN+cTbp18jnFulj0bF38Qs96\\r\\nnzXEnh0JgSXttJkAAAGBCDpi0wAABAMARzBFAiEAyf8VZ5Y1NvgVk5PaBzvX3sWYqeLVaZje5QSs\\r\\nHIapKD8CICez+afq/kWu3bNv7ci5/ftUK63G4pye/8/tfzhPS3/HMAoGCCqGSM49BAMCA0gAMEUC\\r\\nIQDOQ2v6is3j1uVq8oS15c5SHTcsUd25ErdbcfGSs9HTGAIgIINaIvgtyM5xDmIObFHPBNYQpIAc\\r\\n9lIZN9fvL9ct7Yk=\"\n    }\n  ]\n}"
											}
										},
										"url": {
											"raw": "{{target_gw}}",
											"host": [
												"{{target_gw}}"
											]
										},
										"description": "# Set Certificates\n\nSet or update multiple trusted certificate altogether.\n\nInput: see sample\n\n``` json\n{  \"input\": {    \"name\" : \"New trusted cert\",    \"certBase64\" : \"thebase64cert\",    \"verifyHostname\" : true,    \"trustAnchor\" : true,    \"trustedFor\" : [\"SIGNING_SERVER_CERTS\"],    \"revocationCheckPolicyType\" : \"USE_DEFAULT\"  }}\n\n```"
									},
									"response": []
								},
								{
									"name": "Delete Trusted Cert",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation deleteTrustedCerts ($trustedCerts: [String!]!) {\n    deleteTrustedCerts (thumbprintSha1s: $trustedCerts) {\n        detailedStatus {\n            action status description\n            source {name value}\n            target {name value}\n        }\n    }\n}",
												"variables": "{\n    \"trustedCerts\": [\n        \"8qrXPTJoO3FtKn1htRxtV2SrOJk=\",\n        \"KCjaydt1qoeF9KZJxM0pDgBAd1U=\"\n    ]\n}"
											}
										},
										"url": {
											"raw": "{{target_gw}}",
											"host": [
												"{{target_gw}}"
											]
										},
										"description": "# Delete Trusted Certificate\n\nDelete the trusted certificate given its thumbprintsha1\n\nInput: thumbprintSha1"
									},
									"response": []
								}
							]
						},
						{
							"name": "Queries",
							"item": [
								{
									"name": "All Trusted Certs",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query trustedCerts {\n    trustedCerts {\n        goid \n        name \n        subjectDn \n        thumbprintSha1 \n        checksum \n        \n        verifyHostname \n        trustAnchor \n        trustedFor \n        revocationCheckPolicyType \n        revocationCheckPolicy { goid name }\n        notBefore \n        notAfter \n        certBase64\n    }\n}",
												"variables": "{}"
											}
										},
										"url": {
											"raw": "{{source_gw}}",
											"host": [
												"{{source_gw}}"
											]
										},
										"description": "# All Trusted Certs\n\nword"
									},
									"response": []
								},
								{
									"name": "Trusted Certs by DN",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query trustedCertsByDn ($subjectDn: String!) {\n    trustedCertsByDn (subjectDn: $subjectDn) {\n        goid \n        name \n        subjectDn \n        thumbprintSha1 \n        checksum \n        \n        verifyHostname \n        trustAnchor \n        trustedFor \n        revocationCheckPolicyType \n        revocationCheckPolicy { goid name } \n        notBefore \n        notAfter \n        certBase64\n    }\n}",
												"variables": "{\n  \"subjectDn\": \"cn=www.example.org,o=internet corporation for assigned names and numbers,l=los angeles,st=california,c=us\"\n}"
											}
										},
										"url": {
											"raw": "{{source_gw}}",
											"host": [
												"{{source_gw}}"
											]
										},
										"description": "# Certs by subject DN\n\nRetrieves a list of trusted certificates with the matching subject distinguished name.\n\nInput: subjectDn"
									},
									"response": []
								},
								{
									"name": "Trusted Cert by Thumbprint",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query trustedCertByThumbprint ($thumbprintSha1: String!) {\n    trustedCertByThumbprint (thumbprintSha1: $thumbprintSha1) {\n        goid \n        name \n        subjectDn \n        thumbprintSha1 \n        checksum \n        \n        verifyHostname \n        trustAnchor \n        trustedFor \n        revocationCheckPolicyType \n        revocationCheckPolicy { goid name } \n        notBefore \n        notAfter \n        certBase64\n    }\n}",
												"variables": "{\n  \"thumbprintSha1\": \"8qrXPTJoO3FtKn1htRxtV2SrOJk=\"\n}"
											}
										},
										"url": {
											"raw": "{{source_gw}}",
											"host": [
												"{{source_gw}}"
											]
										},
										"description": "# Cert by thumbprint\n\nRetrieves the unique (if any) certificate given its thumbprint sha1.\n\nInput: thumbprintSha1"
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Web API Services",
					"item": [
						{
							"name": "Mutations",
							"item": [
								{
									"name": "Set Web API Services",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation setWebApiServices (\n    $webApiServices: [WebApiServiceInput!]!,\n    $clusterProperties: [ClusterPropertyInput!]!) {\n    # Ensure the availability of Web API service dependencies\n    setClusterProperties(input: $clusterProperties) {\n        detailedStatus {\n            action status description\n            source {name value}\n            target {name value}\n        }\n    }\n    setWebApiServices (input: $webApiServices) {\n        detailedStatus {\n            action status description\n            source {name value}\n            target {name value}\n        }\n    }\n}",
												"variables": "{\n  \"webApiServices\": [\n    {\n      \"name\": \"some-webapi\",\n      \"resolutionPath\": \"/some-webapi\",\n      \"enabled\": true,\n      \"folderPath\": \"/graphman-tests/webApiServices\",\n      \"methodsAllowed\": [\n        \"GET\",\n        \"POST\",\n        \"PUT\",\n        \"DELETE\"\n      ],\n      \"policy\": {\n        \"xml\": \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n<wsp:Policy xmlns:L7p=\\\"http://www.layer7tech.com/ws/policy\\\" xmlns:wsp=\\\"http://schemas.xmlsoap.org/ws/2002/12/policy\\\">\\n    <wsp:All wsp:Usage=\\\"Required\\\">\\n        <wsp:OneOrMore wsp:Usage=\\\"Required\\\">\\n            <wsp:All wsp:Usage=\\\"Required\\\">\\n                <L7p:ComparisonAssertion>\\n                    <L7p:Expression1 stringValue=\\\"${gateway.greetings}\\\"/>\\n                    <L7p:Expression2 stringValue=\\\"\\\"/>\\n                    <L7p:ExpressionIsVariable booleanValue=\\\"false\\\"/>\\n                    <L7p:Negate booleanValue=\\\"true\\\"/>\\n                    <L7p:Operator operator=\\\"EMPTY\\\"/>\\n                    <L7p:Predicates predicates=\\\"included\\\">\\n                        <L7p:item binary=\\\"included\\\">\\n                            <L7p:Negated booleanValue=\\\"true\\\"/>\\n                            <L7p:Operator operator=\\\"EMPTY\\\"/>\\n                            <L7p:RightValue stringValue=\\\"\\\"/>\\n                        </L7p:item>\\n                    </L7p:Predicates>\\n                </L7p:ComparisonAssertion>\\n                <L7p:SetVariable>\\n                    <L7p:Base64Expression stringValue=\\\"JHtnYXRld2F5LmdyZWV0aW5nc30=\\\"/>\\n                    <L7p:VariableToSet stringValue=\\\"greetings\\\"/>\\n                </L7p:SetVariable>\\n            </wsp:All>\\n            <L7p:SetVariable>\\n                <L7p:Base64Expression stringValue=\\\"SGVsbG8sIFdvcmxkIQ==\\\"/>\\n                <L7p:VariableToSet stringValue=\\\"greetings\\\"/>\\n            </L7p:SetVariable>\\n        </wsp:OneOrMore>\\n        <L7p:HardcodedResponse>\\n            <L7p:Base64ResponseBody stringValue=\\\"JHtncmVldGluZ3N9\\\"/>\\n            <L7p:ResponseContentType stringValue=\\\"text/plain; charset=UTF-8\\\"/>\\n        </L7p:HardcodedResponse>\\n    </wsp:All>\\n</wsp:Policy>\\n\"\n      },\n      \"tracingEnabled\": false,\n      \"wssProcessingEnabled\": false\n    },\n    {\n      \"name\": \"some-other-webapi\",\n      \"resolutionPath\": \"/some-other-webapi\",\n      \"enabled\": true,\n      \"folderPath\": \"/graphman-tests/webApiServices\",\n      \"methodsAllowed\": [\n        \"GET\",\n        \"POST\",\n        \"PUT\",\n        \"DELETE\"\n      ],\n      \"policy\": {\n        \"xml\": \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n<wsp:Policy xmlns:L7p=\\\"http://www.layer7tech.com/ws/policy\\\" xmlns:wsp=\\\"http://schemas.xmlsoap.org/ws/2002/12/policy\\\">\\n    <wsp:All wsp:Usage=\\\"Required\\\">\\n        <wsp:OneOrMore wsp:Usage=\\\"Required\\\">\\n            <wsp:All wsp:Usage=\\\"Required\\\">\\n                <L7p:ComparisonAssertion>\\n                    <L7p:Expression1 stringValue=\\\"${gateway.greetings}\\\"/>\\n                    <L7p:Expression2 stringValue=\\\"\\\"/>\\n                    <L7p:ExpressionIsVariable booleanValue=\\\"false\\\"/>\\n                    <L7p:Negate booleanValue=\\\"true\\\"/>\\n                    <L7p:Operator operator=\\\"EMPTY\\\"/>\\n                    <L7p:Predicates predicates=\\\"included\\\">\\n                        <L7p:item binary=\\\"included\\\">\\n                            <L7p:Negated booleanValue=\\\"true\\\"/>\\n                            <L7p:Operator operator=\\\"EMPTY\\\"/>\\n                            <L7p:RightValue stringValue=\\\"\\\"/>\\n                        </L7p:item>\\n                    </L7p:Predicates>\\n                </L7p:ComparisonAssertion>\\n                <L7p:SetVariable>\\n                    <L7p:Base64Expression stringValue=\\\"JHtnYXRld2F5LmdyZWV0aW5nc30=\\\"/>\\n                    <L7p:VariableToSet stringValue=\\\"greetings\\\"/>\\n                </L7p:SetVariable>\\n            </wsp:All>\\n            <L7p:SetVariable>\\n                <L7p:Base64Expression stringValue=\\\"SGVsbG8sIFdvcmxkIQ==\\\"/>\\n                <L7p:VariableToSet stringValue=\\\"greetings\\\"/>\\n            </L7p:SetVariable>\\n        </wsp:OneOrMore>\\n        <L7p:HardcodedResponse>\\n            <L7p:Base64ResponseBody stringValue=\\\"JHtncmVldGluZ3N9\\\"/>\\n            <L7p:ResponseContentType stringValue=\\\"text/plain; charset=UTF-8\\\"/>\\n        </L7p:HardcodedResponse>\\n    </wsp:All>\\n</wsp:Policy>\\n\"\n      },\n      \"tracingEnabled\": false,\n      \"wssProcessingEnabled\": false\n    }\n  ],\n  \"clusterProperties\": [\n    {\n      \"name\": \"greetings\",\n      \"value\": \"Hello, World!\"\n    }\n  ]\n}\n"
											}
										},
										"url": {
											"raw": "{{target_gw}}",
											"host": [
												"{{target_gw}}"
											]
										},
										"description": "# Set Web Api Services\n\nCreate multiple web API services on the target gateway.\n\nInput: See sample for input. Here is a sample:\n\n``` json\n{  \"input\": {    \"name\" : \"New service created\",    \"folderPath\" : \"/migrationTest\",    \"resolutionPath\": \"/testNewService17\",            \"methodsAllowed\": [                \"GET\",                \"POST\",                \"PUT\",                \"DELETE\"            ],            \"enabled\": true,            \"policy\": {                \"xml\": \"wsp:Policy...\"            }  }}\n\n```"
									},
									"response": []
								},
								{
									"name": "Update Web API Service - Move Folder",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation updateWebApiService($webApiServices: [WebApiServiceInput!]!) {\n    setWebApiServices(input: $webApiServices) {\n        detailedStatus {\n            action status description\n            source {name value}\n            target {name value}\n        }\n        webApiServices {\n            goid\n            name\n            resolutionPath\n            checksum\n\n            folderPath # modified field\n        }\n    }\n}",
												"variables": "{\n  \"webApiServices\": [\n    {\n      \"name\": \"some-webapi\",\n      \"resolutionPath\": \"/some-webapi\",\n      \"enabled\": true,\n      \"folderPath\": \"/graphman-tests/webApiServices/some-folder\",\n      \"methodsAllowed\": [\n        \"GET\",\n        \"POST\",\n        \"PUT\",\n        \"DELETE\"\n      ],\n      \"policy\": {\n        \"xml\": \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n<wsp:Policy xmlns:L7p=\\\"http://www.layer7tech.com/ws/policy\\\" xmlns:wsp=\\\"http://schemas.xmlsoap.org/ws/2002/12/policy\\\">\\n    <wsp:All wsp:Usage=\\\"Required\\\">\\n        <wsp:OneOrMore wsp:Usage=\\\"Required\\\">\\n            <wsp:All wsp:Usage=\\\"Required\\\">\\n                <L7p:ComparisonAssertion>\\n                    <L7p:Expression1 stringValue=\\\"${gateway.greetings}\\\"/>\\n                    <L7p:Expression2 stringValue=\\\"\\\"/>\\n                    <L7p:ExpressionIsVariable booleanValue=\\\"false\\\"/>\\n                    <L7p:Negate booleanValue=\\\"true\\\"/>\\n                    <L7p:Operator operator=\\\"EMPTY\\\"/>\\n                    <L7p:Predicates predicates=\\\"included\\\">\\n                        <L7p:item binary=\\\"included\\\">\\n                            <L7p:Negated booleanValue=\\\"true\\\"/>\\n                            <L7p:Operator operator=\\\"EMPTY\\\"/>\\n                            <L7p:RightValue stringValue=\\\"\\\"/>\\n                        </L7p:item>\\n                    </L7p:Predicates>\\n                </L7p:ComparisonAssertion>\\n                <L7p:SetVariable>\\n                    <L7p:Base64Expression stringValue=\\\"JHtnYXRld2F5LmdyZWV0aW5nc30=\\\"/>\\n                    <L7p:VariableToSet stringValue=\\\"greetings\\\"/>\\n                </L7p:SetVariable>\\n            </wsp:All>\\n            <L7p:SetVariable>\\n                <L7p:Base64Expression stringValue=\\\"SGVsbG8sIFdvcmxkIQ==\\\"/>\\n                <L7p:VariableToSet stringValue=\\\"greetings\\\"/>\\n            </L7p:SetVariable>\\n        </wsp:OneOrMore>\\n        <L7p:HardcodedResponse>\\n            <L7p:Base64ResponseBody stringValue=\\\"JHtncmVldGluZ3N9\\\"/>\\n            <L7p:ResponseContentType stringValue=\\\"text/plain; charset=UTF-8\\\"/>\\n        </L7p:HardcodedResponse>\\n    </wsp:All>\\n</wsp:Policy>\\n\"\n      },\n      \"tracingEnabled\": false,\n      \"wssProcessingEnabled\": false\n    }\n  ]\n}"
											}
										},
										"url": {
											"raw": "{{target_gw}}",
											"host": [
												"{{target_gw}}"
											]
										},
										"description": "# Update Web Api Service\n\nIdentify a web api service to update given its resolutionPath, then the property(ies) you want to update about it.\n\nInput: in this example, the service at the given resolution path is being moved to a different folder path\n\n``` json\n{  \"resolutionPath\" : \"/testNewService17\",  \"input\": {    \"folderPath\" : \"/migrationTest\"  }}\n```"
									},
									"response": []
								},
								{
									"name": "Delete Web API Services",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation deleteWebApiServices($webApiServices: [String!]!) {\n    deleteWebApiServices(resolutionPaths: $webApiServices) {\n        detailedStatus {\n            action status description\n            source {name value}\n            target {name value}\n        }\n    }\n}",
												"variables": "{\n    \"webApiServices\": [\n        \"/some-webapi\", \n        \"/some-other-webapi\"\n    ]\n}"
											}
										},
										"url": {
											"raw": "{{target_gw}}",
											"host": [
												"{{target_gw}}"
											]
										},
										"description": "# Delete Web Api Service\n\nDeletes a Web Api Service given its resolution path.\n\nInput: resolutionPath"
									},
									"response": []
								}
							]
						},
						{
							"name": "Queries",
							"item": [
								{
									"name": "Web API Services in Folder",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query webApiServicesByFolderPath ($folderPath: String!) {\n    webApiServicesByFolderPath (folderPath: $folderPath) {\n        goid\n        name\n        resolutionPath\n        checksum\n\n        enabled\n        folderPath\n        methodsAllowed\n        properties {name value}\n        tracingEnabled\n        wssProcessingEnabled\n\n        policy {xml}\n    }\n}",
												"variables": "{\n    \"folderPath\": \"/graphman-tests/webApiServices\"\n}"
											}
										},
										"url": {
											"raw": "{{source_gw}}",
											"host": [
												"{{source_gw}}"
											]
										},
										"description": "# APIs in a folder\n\nRetrieves the Web APi Services given a folder path. This query good into subfolders as well so you get the whole tree.\n\nInput: folderPath"
									},
									"response": []
								},
								{
									"name": "Web API Service by Resolution Path",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query webApiServiceByResolutionPath ($resolutionPath: String!) {\n    webApiServiceByResolutionPath (resolutionPath: $resolutionPath) {\n        goid\n        name\n        resolutionPath\n        checksum\n\n        enabled\n        folderPath\n        methodsAllowed\n        properties {name value}\n        tracingEnabled\n        wssProcessingEnabled\n        \n        policy {xml}\n    }\n}",
												"variables": "{\n    \"resolutionPath\": \"/some-webapi\"\n}"
											}
										},
										"url": {
											"raw": "{{source_gw}}",
											"host": [
												"{{source_gw}}"
											]
										},
										"description": "# API by resolution path\n\nGet a Web API Service given its unique resolution path.\n\nInput: resolutionPath"
									},
									"response": []
								},
								{
									"name": "Web API Services by Name including Policy Dependencies",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query webApiServicesByName ($name: String!) {\n    webApiServicesByName (name: $name) {\n        goid\n        name\n        resolutionPath\n        checksum\n\n        enabled\n        folderPath\n        methodsAllowed\n        properties {name value}\n        tracingEnabled\n        wssProcessingEnabled\n        \n        policy {\n            xml\n            allDependencies {\n                policyFragments {guid name folderPath checksum}\n                encassConfigs {guid name policyName checksum}\n                clusterProperties {name checksum}\n                jdbcConnections {name checksum}\n                # please do consider listing the remaining supported entity types as dependencies\n            }\n        }\n    }\n}",
												"variables": "{\n    \"name\": \"some-other-webapi\"\n}"
											}
										},
										"url": {
											"raw": "{{source_gw}}",
											"host": [
												"{{source_gw}}"
											]
										},
										"description": "# Api and dependencies\n\nGet a Web Api Service given its name and also get the dependencies that are in the service's policy (nested dependencies too).\n\nInput: the name of the Web Api Service"
									},
									"response": []
								},
								{
									"name": "All Web API Services",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query webApiServices {\n    webApiServices {\n        goid\n        name\n        resolutionPath\n        checksum\n\n        enabled\n        folderPath\n        methodsAllowed\n        properties {name value}\n        tracingEnabled\n        wssProcessingEnabled\n\n        policy {xml}\n    }\n}",
												"variables": "{}"
											}
										},
										"url": {
											"raw": "{{source_gw}}",
											"host": [
												"{{source_gw}}"
											]
										},
										"description": "# List all Web Api Services\n\nList all of the services\n\nInput: no input"
									},
									"response": []
								}
							]
						}
					],
					"description": "# Web API Services\n\nHow to query and mutate published services of type Web API (REST apis)"
				}
			],
			"description": "# CRUD Config Entities\n\nThis folder contains queries (read) and mutations (create/update/delete) for full CRUD for each Layer7 Gateway configuration entity type supported."
		}
	],
	"auth": {
		"type": "basic",
		"basic": [
			{
				"key": "password",
				"value": "7layer",
				"type": "string"
			},
			{
				"key": "username",
				"value": "admin",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"const passphrase = pm.collectionVariables.get(\"base64_passphrase\");",
					"pm.request.headers.add({key: \"x-l7-passphrase\", value: passphrase });"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "local_gw",
			"value": "https://localhost:8443/graphman",
			"type": "string"
		},
		{
			"key": "source_gw",
			"value": "https://source.gateway:8443/graphman",
			"type": "string"
		},
		{
			"key": "target_gw",
			"value": "https://target.gateway:8443/graphman",
			"type": "string"
		},
		{
			"key": "restman_host",
			"value": "localhost:8443",
			"type": "string"
		},
		{
			"key": "base64_passphrase",
			"value": "N2xheWVy",
			"type": "string"
		},
		{
			"key": "l7utils",
			"value": "const L7META = {\n    \"activeConnectors\": {\n        \"prefix\": \"activeConnector\"\n    },\n    \"backgroundTaskPolicies\": {\n        \"prefix\": \"backgroundTaskPolic\"\n    },\n    \"cassandraConnections\": {\n        \"prefix\": \"cassandraConnection\"\n    },\n    \"trustedCerts\": {\n        \"prefix\": \"trustedCert\"\n    },\n    \"clusterProperties\": {\n        \"prefix\": \"clusterPropert\"\n    },\n    \"customKeyValues\": {\n        \"prefix\": \"customKeyValue\"\n    },\n    \"dtds\": {\n        \"prefix\": \"dtd\"\n    },\n    \"emailListeners\": {\n        \"prefix\": \"emailListener\"\n    },\n    \"encassConfigs\": {\n        \"prefix\": \"encassConfig\"\n    },\n    \"fips\": {\n        \"prefixes\": [\"fips\", \"fipByName\"],\n        \"prefix\": \"fips\"\n    },\n    \"fipGroups\": {\n        \"prefix\": \"fipGroup\"\n    },\n    \"fipUsers\": {\n        \"prefix\": \"fipUser\"\n    },\n    \"globalPolicies\": {\n        \"prefix\": \"globalPolic\"\n    },\n\t\"httpConfigurations\": {\n        \"prefix\": \"httpConfiguration\"\n    },\n\t\"logSinks\": {\n        \"prefix\": \"logSink\"\n    },\n    \"internalGroups\": {\n        \"prefix\": \"internalGroup\"\n    },\n    \"internalSoapServices\": {\n        \"prefix\": \"internalSoapService\"\n    },\n    \"internalUsers\": {\n        \"prefix\": \"internalUser\"\n    },\n    \"internalWebApiServices\": {\n        \"prefix\": \"internalWebApiService\"\n    },\n    \"jdbcConnections\": {\n        \"prefix\": \"jdbcConnection\"\n    },\n    \"jmsDestinations\": {\n        \"prefix\": \"jmsDestination\"\n    },\n    \"keys\": {\n        \"prefix\": \"key\"\n    },\n    \"listenPorts\": {\n        \"prefix\": \"listenPort\"\n    },\n    \"policies\": {\n    \t\"prefixes\": [\"polic\", \"policiesBy\"],\n        \"prefix\": \"polic\"\n    },\n    \"ldapIdps\": {\n        \"prefix\": \"ldapIdp\"\n    },\n    \"simpleLdapIdps\": {\n    \t\"prefix\": \"simpleLdapIdp\"\n    },\n    \"policyBackedIdps\": {\n    \t\"prefix\": \"policyBackedIdp\"\n    },\n    \"federatedIdps\": {\n    \t\"prefix\": \"federatedIdp\"\n    },\n    \"revocationCheckPolicies\": {\n        \"prefix\": \"revocationCheckPolic\"\n    },\n    \"smConfigs\": {\n        \"prefix\": \"smConfig\"\n    },\n    \"scheduledTasks\": {\n        \"prefix\": \"scheduledTask\"\n    },\n    \"schemas\": {\n        \"prefix\": \"schema\"\n    },\n    \"secrets\": {\n        \"prefix\": \"secret\"\n    },\n    \"serverModuleFiles\": {\n        \"prefix\": \"serverModuleFile\"\n    },\n    \"soapServices\": {\n        \"prefix\": \"soapService\"\n    },\n    \"webApiServices\": {\n        \"prefix\": \"webApiService\"\n    }\n};\nconst L7UTILS = (function () {\n    return {\n        metaKey: function (key) {\n            if (L7META[key] || key === \"properties\") return key;\n            for(const prop in L7META) {\n                if (L7META[prop].prefixes && L7META[prop].prefixes.includes(key)) return prop;\n                if (key.startsWith(L7META[prop].prefix)) return prop;\n            }\n            return key;\n        },\n        normalize: function(bundle) {\n            normalize(bundle, bundle.data);\n\t\t\tbundle.properties = {defaultAction: \"NEW_OR_UPDATE\"};\n            delete bundle.data;\n        }\n    };\n    function normalize(bundle, data) {\n        Object.entries(data).forEach(([key, value]) => {\n\t\t    if (key !== \"properties\") {\n                const mkey = L7UTILS.metaKey(key);\n                let target = bundle[mkey];\n                if (!target) target = bundle[mkey] = [];\n                if (Array.isArray(value)) value.forEach(item => target.push(item));\n                else target.push(value);\n                target.filter(item => item.policy).forEach(item => normalizePolicyDependencies(bundle, item.policy));\n\t\t\t}\n        });\n    }\n    function normalizePolicyDependencies(bundle, policy) {\n        if (policy.allDependencies) {\n\t\t    let deps = Object.assign({}, policy.allDependencies);\n            delete policy.allDependencies;\n            normalize(bundle, deps);\n        }\n        if (policy.directDependencies) {\n            let deps = Object.assign({}, policy.directDependencies);\n            delete policy.directDependencies;\n            normalize(bundle, deps);\n        }\n    }\n})();\nfunction l7utils() {\n    return L7UTILS;\n}\n",
			"type": "string"
		}
	]
}